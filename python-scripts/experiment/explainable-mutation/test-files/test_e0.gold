989	This method sends and handles a connection factory, object and response handler to create a ResponseStream. If the active flag is false, an HazelcastInstanceNotActiveException is thrown. If the ErrorHandler throws a retryable error, the operation is retried, else an IOException is thrown. Finally, the response is handled and the stream is ended.
796	This method creates references for a PsiElement, by checking if it contains the "://", starts with the MAILTO_PREFIX, or starts with the "//". If so, a PsiReference is created, and the references list is added with this PsiReference. It returns true if a reference was created, and false if not.
451	This method takes in a Connection object and an InputStream resource as parameters, reads the contents of the resource line-by-line, and executes the SQL commands found. The method checks for the existence of semicolons at the end of each line, appends the lines before the semicolon to create a SQL command, and then executes the command on the Connection. For databases of type Oracle and DB2, the semicolon at the end of the line is deleted before the command is executed.
119	This method takes in a directory, keyspace, column family, comparator, subcomparator, and a buffer size in MB and creates a superclass with the given CFMetaData. The buffer size is calculated as the given buffer size in MB multiplied by 1024L and then again by 1024L.
7	This method retrieves a JMXConnector and then executes a callback using that connector. If an exception is thrown, the connection is closed and a FabricException is thrown.
92	This method creates a new JCacheProducer with this and cacheConfiguration as parameters.
932	This method creates a Dialog object with a ListView object as its content view. The dialog is assigned to the variable mDialog and the title is given based on the title retrieved from the getTitle() function. The OnDismissListener is set to the dialog and the state is restored from the given Bundle argument. Lastly, the dialog is added to the PreferenceManager and shown.
965	This method creates an ExecutorService object by parsing the pool size, maximum pool size, rejected policy, keep alive time, and maximum queue size from the CamelContext. It then creates a new thread pool with these settings and returns the ExecutorService answer.
961	This method creates a new CachedIntrospectionResults object for the given beanClass. It checks the strongClassCache and softClassCache to see if the beanClass is already present. If the beanClass is present, the method returns the cached results. If the beanClass is not present, the method creates a new CachedIntrospectionResults object and stores it in either the strongClassCache or the softClassCache, depending on whether or not the beanClass is cache-safe.
826	This method takes a document, a processor of UsageInfo, a FindModel, a PsiFile, an int array, and an int as parameters. It then iterates through the document, looking for instances of the FindModel string. If it finds one, a UsageInfo object is created and processed. The method returns the number of matches found. If a maxUsages is specified, the method will stop searching once this number of matches is found.
596	This method performs an operation based on whether or not the shardsIt is null. If it is not null, the request.preferLocalShard() is checked and the shardsIt is iterated through. If the request.operationThreaded() is true, the threadPool.executor is executed and the listener is given response. If not, the response is given and the method is returned.
35	This method provides a list of extensions for a variety of tasks, including resource types, user managed metrics, periods, viewers, filters, widgets, and dashboard classes, as well as formats, decorators, filters, sensors, events, and notifications.
687	This method deserializes a given target of type Value by creating an InternalDeSerializer object, setting its memory and position, and then calling the target's read method. If an exception occurs during this process, a DeserializationException is thrown, including the field number and the name of the target's class.
709	This method creates an authentication event execution plan configurer that verifies an address is defined and registers a RADIUS authentication handler if one exists. If no RADIUS address is defined, a warning is logged and support will be disabled.
85	This method takes in two parameters, line and horiz, and returns an offset for a given line and horizontal position. It begins by collecting the maximum and minimum of the line, as well as the line directions. It then calculates the best offset based on the minimum, the directions of the line, and the estimated horizontal position. The line is iterated through using a loop and the method is completed by calculating the best distance between the estimated horizontal position and the maximum of the line. If the distance of the maximum is less than or equal to the best distance, the best distance is then set to the distance of the maximum.
100	This method synchronizes the buffer by allocating a certain size of SYNC_MARKER_SIZE, waiting for modifications and updating the CRC associated with the buffer. The buffer is forced and the nextMarker is set to the lastSyncedOffset and the CLibrary is used to try and skip the cache. If the nextMarker is the capacity of the buffer, the method will be closed.
784	InsertionEvent4 is a method that takes in a SpecializationNode source, a String reason, a Frame frame, and four Objects o1, o2, o3, and o4. It extends the super class and passes in the source, reason, frame and objects as parameters.
363	This method is used to send emails by checking if the sender and the receiver are valid and if all of the necessary parameters are supplied such as the text, from, subject, to, cc and bcc. If any of these is blank, the email cannot be sent and a warning message is logged. If all the conditions are met, a MimeMessage is created with the given parameters, which is then sent and returns true or false depending on the mail send status.
242	This method creates a SpacingBuilder object that is used to set spacing rules for Jet language code. It is based on the CodeStyleSettings and JetCodeStyleSettings objects, and sets spacing rules in various places such as before and after commas, assignment operators, logical operators, equality operators, relational operators, additive operators, multiplicative operators, unary operators, range operators, type colon operators, extend colon operators, and when entry operators.
17	This method iterates through a list of callbacks and checks if they have a specific key type. If they do, it searches through a store of valid security tokens and sets the key to the token's secret. If not, it searches for the token in the store and sets the key and custom token accordingly. If an internal method is present, it is called.
31	This method throws an IllegalStateException with a message indicating that property existence constraints can only be used on Neo4j enterprise when attempting to create a property constraint.
807	This method checks to see if the current window is already set to the desired opacity. If not, it checks the AttributeCache for the package, theme, and styleable information, as well as the user ID, and confirms that the window is not floating and is set to translucent. If both conditions are met, the task's number of fullscreen windows is incremented or decremented and the fullscreen value is set to the desired opacity.
16	This method discovers the IT-100 Bridge by enumerating all available serial ports and opening each one. It then sets the parameters for the port and sends an IT100_SEND_STRING to each port. If the response is an IT100_DISCOVERY_RESPONSE, then the bridge has been discovered and is added to the dscAlarmBridgeDiscovery. Finally, the port and its associated streams are closed.
354	This method checks for the presence of special query fields such as _specialFields, _orderBy, _hint and _explain, as well as _snapshot. It returns true if any of these fields are present.
663	This method returns a String that contains the class name and ID of the object. The class name is retrieved using the getName() method.
638	This method substitutes a return type for a PsiMethod with a PsiSubstitutor. It takes in a PsiManager, PsiMethod, PsiType, and PsiSubstitutor as parameters. It checks to make sure a PsiTypeElement and PsiType exists, then substitutes the new PsiType with the PsiSubstitutor and replaces the original PsiTypeElement with a new LightTypeElement.
495	This method takes an input path and an output path as arguments, reads the input file line by line, and writes the data to the output file. It uses the Config class to convert the input data into a list of Element objects, which are then written to the output file.
630	This method is used to retrieve a parameter from a given method and key, and returns the parameter as a long value. If the parameter is not found, the default value is returned instead. The method also stores the parameter in a map for future use.
474	This method creates a ComposeShader object, which is composed of two Shader objects, shaderA and shaderB, and an Xfermode. The native_instance is created with the given parameters and the native_shader is created either with the nativePostCreate1 method, if the Xfermode is not an instance of PorterDuffXfermode, or with the nativePostCreate2 method, if the Xfermode is an instance of PorterDuffXfermode.
152	This method runs a switch statement with four cases that determine how to scroll the list. The first two cases determine how to scroll down, while the last two cases determine how to scroll up. For each case, the method calculates the position of the last or next view, and uses this position to determine how much to scroll the list. If the list is scrolled to the target position, the method will end.
93	This method gets the types for a given biome by calling the checkRegistration method and then checking if the biomeList array contains the biome's ID. If the biome is present, the method returns an array of the types associated with it, using the toArray method. If the biome is not present in the list, an empty array is returned.
187	This method creates an Initial Account Registration Frame to enable users to sign in. It sets a title, adds a border to the main panel, and adds the mainAccountsPanel, buttonPanel, and accountsPanel to the mainPanel. It also adds an actionListener to the signinButton and cancelButton, as well as setting the default button to signinButton. Lastly, it initializes the account wizards and creates a meta contact group using the defaultGroupName application property.
730	This method initializes weights for a neural network by using a variety of techniques, including distributions, normalization, ReLU, uniform, Xaviar, and others. It takes in parameters such as fanIn, fanOut, shape, and a parameter view, and reshapes the weights according to the parameters.
117	This method takes a StringBuilder object as an input and returns a CharSequence object. It will find the SELECT clause of the StringBuilder and strip any aliases from it before returning the result.
865	This method takes in a FileDescriptor and uses it to create a ProtoOutputStream. It then iterates through all the users and stores the user id, number of fingerprints and any performance stats in the ProtoOutputStream. It also stores any crypto performance stats in the ProtoOutputStream. Finally, the ProtoOutputStream is flushed.
14	This method adds a statement to a BlockStmt object. First, it checks if the list of statements is empty or null, and if it is, it creates a new list. Finally, it adds the given statement to the list of statements.
515	This method creates a SubscriptionSender object and sets various attributes to it, such as the body, company ID, context attributes, from address and name, mail ID, portlet ID, service context, and subject. It also adds runtime subscribers and flushes notifications asynchronously.
498	This method creates a PacketWriter depending on the address. If the address is a localhost and the user has enabled short circuit, it will create a LocalFilePacketWriter. Otherwise, it will create a NettyPacketWriter.
901	This method builds an AdvertisingSetParameters object, ensuring that certain conditions are met, depending on whether the advertising is legacy or not. Legacy advertising cannot be anonymous, cannot be connectable and non-scannable, and cannot include TX power level in the header. Non-legacy advertising cannot be both connectable and scannable, and cannot be both connectable and anonymous.
255	This method checks whether the type settings property "sitemap-include" is set to true, and if so, retrieves the layout full URL and canonical URL for the layout. It then creates alternate URLs for the layout, and adds the URLs to an element before checking whether there are multiple alternate URLs. If so, it adds the alternate URLs to the element, excluding the default locale.
66	This method checks if the arguments provided are valid, and then initializes and starts the Alluxio Worker Service. If an exception occurs while running the service, it is stopped, and the program is exited.
683	This synchronized method sets the lastAccess value for a class to the specified value, ensuring thread safety.
554	This method retrieves a KeyIterator from a backend and adds metrics to it by using the MetricInstrumentedIterator if a metrics prefix is present.
934	This method builds a TSpanEvent from a SpanEvent. It sets the end elapsed time, sequence, service type, end point, depth, next span id, destination id, api id, exception info, next async id, async id, and async sequence. It also converts annotation objects into TAnnotations.
477	This method checks if an Entity object and a name are given. If an Entity object is given, then the method obtains the MappingField object corresponding to the name and returns the column name in SQL associated with the MappingField object. If no Entity object is given, then the name is returned.
70	This method updates the notification for the status bar. It checks if an entry for the notification exists, and if it does, the ranking is updated and the notification is checked to determine if it should be interrupted or alerted again. If the notification can be applied in place, it will do so and if not, it will inflate a new view for the notification. Finally, the notification will be updated, the veto button will be updated, and a check is done to determine if the notification is for the current user.
615	This method overrides the pushProgress() function to update the progress and the maximum value of the progress.
691	This method adds a keyword and a coloring to the keywordColoring variable, if it is not already set. The first character of the coloring string is checked to determine if the coloring is a keyword or literal, and the last character is used to determine the number of the coloring. This number is then converted to a byte and added to the keywordColoring variable, using the KeywordMap set to false.
91	This method applies an HTTP handler to a request and response, and logs any errors that occur during the process. If an error occurs, the response status is set to 'INTERNAL_SERVER_ERROR'. Once the request is completed, it is logged as successful.
527	This method retrieves the parent path of a given file path. If a virtual parent is present, it is returned. If not, the path is evaluated and the parent path is returned with a boolean argument set to true.
592	This method processes writable tasks by looping through all the tasks in the AbstractNioChannel's writableTasks and processing the selected key with a task. After it has finished processing, the method flushes the data.
47	This method sets the hotspot bounds for a given instance of the Drawable class. It first creates a new Rect object if one does not already exist and then sets the given left, top, right, and bottom values. Finally, it sets the hotspot bounds for the current Drawable.
276	This method takes a path as an input and uses RequestUtil to normalize it. It then uses the context's resources to lookup the normalized path, and if successful, returns a URL object created with the host name and full path. If an exception is thrown, it is logged.
844	This method handles the onItemClick event of the AdapterView. Depending on the given position, different activities are started such as launching the Preferences class or the LogHistoryActivity class. It also includes a call to the allFilesOption function and the closing of the drawers.
569	: This method creates an AggregationToJsonProcessor, which is initialized with an OutputStream and a LinkedHashMap. The OutputStream is used to create a XContentBuilder, which is used to create a JSON-formatted output.
64	This method builds an AdvertisingSetParameters object to be used for advertising. If the advertising is marked as legacy, it cannot be anonymous, connectable and non-scannable, or include the TX power level in the header. If the advertising is not marked as legacy, it cannot be both connectable and scannable, or both connectable and anonymous. The parameters used to build the object are connectable, scannable, isLegacy, isAnonymous, includeTxPower, primaryPhy, secondaryPhy, interval, and txPowerLevel.
660	This method sets the stream volume for a given StreamControl sc, using an index and flags parameters. If the stream type is AudioService.STREAM_REMOTE_MUSIC, the controller is used to set the volume to the specified index. If not, the master volume or stream volume (depending on the stream type) is set to the specified index. Logging is used to notify the user if the remote volume is being adjusted without a controller.
309	This method creates a GoExecutor with a given module, title, and file path. It uses the absolute path of an executable file and passes in the file path as a parameter with the "-w" flag. It also displays the output if an error occurs.
492	This method checks for annotations with the Provided and AutoFactory classes, and then generates a factory descriptor based on these classes. It builds an immutable list multimap of string and factory method descriptors, and an immutable set of implementation method descriptors. It then uses a factory descriptor generator to generate a descriptor based on the element, and iterates through the value of the indexed methods to create a factory descriptor. Finally, it writes the factory descriptor to the factory writer.
870	This method checks if the account requested has been requested previously and if the settings allow for loading of vCards. If allowed, it requests a bare address from the account item's real Jid, ensuring it has not already been requested, and adds the account to the requested set. It then checks the roster contacts for the account and requests the user if it has not been requested previously.
982	This method checks if an automated transfer is initiated and if it is an error, it handles the automated transfer failed message. Otherwise, it dispatches a check automated transfer status action.
272	This method creates an intent object, parses the given uri string, determines if it contains action, categories, type, launch flags, component, and extras and sets these components to the intent object. If the uri contains an intent fragment, the data of the intent is set to the uri before the fragment. Otherwise, the data of the intent is set to the given uri.
960	This method reads an edge from an XMLStreamReader and stores the attributes, such as source, target, and id. It then creates a new EdgeDraft object with the given attributes and adds it to the container. Finally, it reads any attribute values associated with the edge and adds them to the edge.
671	This method creates an AvroSource object for a given file name, start, and end. It checks that the relevant codec, sync marker, and file schema strings have been set, and if not, reads them from the file metadata. It then creates an AvroSource object with the read values and the given parameters.
204	This method creates an animator which animates the transition of a view from one size and shape to another. It does this by first measuring and limiting the view to the start bounds, then calculating the translation for the end bounds and setting the translation accordingly. A ColorDrawable and Drawable are then added to the view's overlay and an Animator is created to reveal the view when transitioning from the Fab to the dialog. Lastly, an Animator is added to fade the contents of the view if it is a ViewGroup.
464	This method verifies the validity of the given PackageParser.Package by checking the code and resource paths, making sure no duplicate packages are present, and ensuring that only privileged apps can add child packages. If the SCAN_REQUIRE_KNOWN flag is set, the code and resource paths must match the expected paths. If the SCAN_NEW_INSTALL flag is set, the method checks to make sure authority names are not already in use by another package.
897	This method creates an AnnotationNode object from an AST annotationNode as input. It takes the first child node of the annotation node, extracts the qualified name from it, and creates an AnnotationNode object with that name. Then, it iterates over the remaining nodes of the annotation node, assigning each parameter and expression to the AnnotationNode object. Finally, it returns the AnnotationNode.
542	The ObservableZip method takes in an array of ObservableConsumable and an Iterable of ObservableConsumable objects, along with a zipper function, a buffer size and a delayError flag. The method then stores the given parameters into instance variables.
681	This method uses the JGitUtils API to retrieve a RevCommit object corresponding to the given objectId. It then creates a CompressorStreamFactory instance if a given algorithm is provided. A RevWalk and TreeWalk are created to recursively traverse the tree and add files to a TarArchiveOutputStream. The ArchiveEntry is populated with the FileMode and a MutableObjectId. The archive is then written to the OutputStream.
19	This method retrieves the QuickSettingsContainerView, the status bar close drawable, the close handle height dimension as a pixel size, and the handle view from the resources. It also sets the content description to the accessibility description for quick settings.
520	This method takes in a SampleResult from a previous result and a Sampler from the current sampler and uses a CompoundVariable to execute a given string and log it with a priority string and a Throwable. It will then use the LogFunction to log the details with the given string, priority string, Throwable, and an empty string.
72	This method updates the presentation of a DBCResultSet, and sets the activePresentationDescriptor to null if the resultSet is an instance of StatResultSet. Otherwise, the method uses the IResultSetContext interface to get the available presentations from the ResultSetPresentationRegistry and ensures that the activePresentationDescriptor is set. The presentationSwitchToolbar is updated to reflect the activePresentationDescriptor and any changes are reflected in the viewerPanel.
5	This method begins a restore session based on the current transport, and attempts to restore all available sets from a given token. If there are no available restore sets or if no matching token is found, no restore will be performed. If a restore is successfully scheduled, the RestoreObserver will wait for the completion of the restore before ending the restore session.
341	This method uses a logistic regression classifier to train a set of data with 6 inputs and 2 outputs using a learning rate of 0.1 over 500 epochs. The classifier is then tested with 2 inputs and the outputs are printed.
147	This method retrieves the service data for a given ParcelUuid. If the serviceDataUuid is null or mServiceData is null, then the method returns null. Otherwise, it returns the corresponding data from the mServiceData map.
727	: This synchronized method evaluates an object given a BitSet and a ParameterContext. If the BitSet and the ParameterContext match, the method will return the value calculated by the calcSelectValue method. Otherwise, it will return null.
484	This method retrieves the journal structure ID from the given structure ID using a database connection, PreparedStatement and ResultSet. DataAccess.getConnection() is used to get the database connection, followed by the PreparedStatement to query the JournalStructure table with the given structure ID. The ResultSet is used to iterate through the resulting records and the journal structure ID is retrieved from the id_ field of each record. Finally, DataAccess.cleanUp() is used to clean up the database resources.
673	This method checks if there are any invalid remote credentials in a given SDK. It first checks if the SDK is remote, and if so, it uses the LanguageCaseCollector to check the validity of the credentials. If the credentials are not valid, the result variable is set to true. The method then checks if the Vagrant folder is empty, and if so, the result variable is also set to true. Finally, the method returns the result variable.
386	This method retrieves text from a given source and searches for any errors or exceptions that may be present in the text. An ArrayList is used to store the lines containing errors or exceptions, and an EnterSelectionDialog is opened to allow the user to select a line. The method then attempts to open the associated step that the error or exception is related to, allowing the user to edit it.
171	This method creates a new IntMap with an initial capacity and load factor. It checks if the initial capacity is valid and throws an exception if it is not. It then sets the capacity to the next highest power of two and sets the load factor. It then calculates the threshold and mask and sets the stash capacity, push iterations, and key and value tables.
55	This method sends a message using the given subId, callingPkg, contentUri, locationUrl, configOverrides, and sentIntent. It enforces the SEND_SMS permission, and checks the AppOpsManager to make sure the sending of the message is allowed. Finally, it calls the getServiceGuarded() method to send the message.
78	This method creates an iterator which returns a RunLengthEncodedBlock object. It begins by getting the cursor of the source and advancing to the next value. It then stores the Tuple key and the start position of the cursor. It then checks if the next value is equal to the key and if so advances the cursor. Finally, it creates a Range object with the start position and the current value end position and returns a RunLengthEncodedBlock object.
601	This method takes in a server string and converts it to lowercase. If the server string starts with either "http://" or "https://", the string is returned as a URI. Otherwise, the server string is parsed using the HostAndPort class, which returns a host and port. This is used to create a URI, which is returned. If a URISyntaxException occurs, an IllegalArgumentException is thrown.
508	This method is used to get the name mapping for a given type element and type name. It first checks if the given type name is equal to the default Objective-C name, returning an empty Optional if it is. Otherwise, it checks if the type element has an Objective-C Name annotation or a mapped name, returning an Optional containing a formatted string if either is present. If the type element is top-level and public, it returns an Optional containing a formatted string using the type name, package name, and mapped package name. Otherwise, an empty Optional is returned.
167	: This method checks an AtmosphereResource object to determine if it is a POST method. If it is, it creates a string builder and a buffered reader to read the input stream of the resource. The char buffer size is 8192, and it reads the data from the input stream and appends it to the string builder. Finally, it broadcasts the string builder's contents.
77	This method creates an OsmEditingPlugin and OsmEditsUploadListenerHelper to show a progress dialog with a horizontal progress bar. An UploadOpenstreetmapPointAsyncTask is then created with the given parameters and executed with the provided OsmPoints.
570	This method overrides the original disable2 function by calling the disable2ForUser function with the given parameters, as well as the current user ID.
220	This method creates a spanNot query and checks if the include and exclude parameters are specified. It then writes the query to XContentBuilder and adds a boost if it is not equal to -1.
925	This method adds a media item with the given ID to the queue by retrieving the local table blog ID from WordPress and updating the media upload state to "queued". It then starts the media upload service.
27	This method imports a file using the specified file importer name. It first checks if the importer exists, then creates a dialog box using the ImporterUI class to capture any relevant data from the user. If the user confirms the data, the file is imported using the controller and the source is set to "Stream +importerName". Lastly, the executor executes the task and the finishImport() method is called.
976	This method takes an array of intervals and merges any overlapping intervals together. It does this by creating a stack of intervals and then looping through the input array, comparing each interval to the one at the top of the stack. If the end of the top interval is less than the start of the current interval, the current interval is added to the stack. If the end of the top interval is greater than or equal to the start of the current interval, the intervals are merged and the new merged interval is added to the stack.
789	This method checks if the given PsiType is a String. It first checks if the type is an instance of PsiClassType, and if it is, it checks the short name against CommonClassNames.JAVA_LANG_STRING_SHORT. If they do not match, the method returns false. If they do match, the method returns the result of comparing CommonClassNames.JAVA_LANG_STRING and type.getCanonicalText(false).
113	This method takes an ExecutionContext as an argument and returns a StepExecutionResult. It first creates a WorkerProcessPool and WorkerProcess and then submits the job to the WorkerProcess. If there is output, it is printed to the console based on the verbosity settings. Finally, the WorkerProcess is returned to the pool and the exit code of the job is returned.
993	This method creates a List of Orders by looping through each child View and creating a new Order object for each. The List of Orders is initialized with the childCount parameter to improve the efficiency of the method. The Order object contains the order and index of the child View. The List of Orders is returned at the end of this method.
144	This method overrides the existing toArray() method and returns an array of type T. It uses toArrayHelper() to help generate the array, passing in the array and an integer value of 0 as parameters.
686	This method starts a settings activity by checking if the device is provisioned and dismissing the keyguard on the next activity. It then sets the flags for the intent, starts the activity as the current user, and animates the collapse of the notifications.
312	This method calculates the current hour by obtaining the degree of selection from the appropriate circle (inner or outer) and dividing it by the number of degrees per hour. If the mode is 24-hour, the hour is adjusted accordingly, including when the hour is 0 on the inner circle. If the mode is 12-hour, the hour is further adjusted based on whether it is AM or PM.
465	This method takes a given sentence as an argument and uses a word tokenizer to divide the sentence into individual tokens. It then loop through the list of tokens and counts the tokens that are not empty. It then returns the number of real tokens.
40	This method overrides the onFirstFix(int ttff) method, and sets the time to first fix (ttff) to the mTimeToFirstFix variable. It then creates a Message object and sets the what field to GpsStatus.GPS_EVENT_FIRST_FIX. Finally, it sends this message to the mGnssHandler.
426	This method returns a String value representing the miterlimit.
283	This method updates the tab border of the project. It first checks if the project is open, and then gets the tool window ids, the UISettings, and the list of ids on each of the four sides. Then, it sets the top, bottom, left, and right borders depending on the number of ids on each side, and then iterates through the ids to set the borders to 0 if the window is visible and docked. Finally, it sets the paint border and tab side paint border.
678	This method is used to create a ContextualUndoView object with a given context and undo layout ID. The content view is obtained from the parent view and updated in the ContextualUndoView object. If the item ID matches the current removed ID, the undo view is displayed and a countdown timer is initiated.
825	This method sets the state of the BroadcastRecord to IDLE, sets the receiver and app to null, sets the result code, result data, and result extras, and checks if the result should be aborted. It also checks if there are any services that need to be waited on before continuing.
41	This method sends an input event to an input method editor (IME) when a channel is present. It creates a new ImeInputEventSender if one is not present, and assigns a sequence number to the event. If the event is successfully sent, the method stores the event in a pending events list and sends a delayed message to the looper with the sequence number and the pending event.
181	This method creates an IllegalConfigurationException with a String message parameter. It calls the super constructor with the String message to create the Exception.
278	The KeyguardStatusViewManager() method instantiates the LockPatternUtils, KeyguardUpdateMonitor and several TextViews. It also sets the Typeface for the date view, makes the views selected and registers a callback for the update monitor. Finally, it resets the status info and refreshes the date and owner info.
158	This method is a void method that sets the acceptance of third-party cookies for a given webview. It throws a MustOverrideException if not overridden.
307	This method checks if an object is an instance of a certain type by comparing it to an array of hints. If the object is null, it will return false. If the object is not null, it will anchor the object and then loop through the array of hints. If the object is found to match one of the hints, it will return either true or false, depending on the hint. If the object does not match any of the hints, it will deoptimize the method and return false.
867	This method initializes a processor used to transmit audio and video data. It connects to a data source and sets a buffer length, then creates a processor and waits for it to become configured. Supported audio and video encodings are then identified and stored in two arrays.
893	This method allows a context to start an activity by passing in the context and the class of the activity to start. Specifically, this method will start the DonateActivity.
797	This method begins an exchange and checks for an existing managed span property. If one exists, it is activated and the property is set to null. Span decorator and span objects are created and activated and the operation name is set using the exchange and endpoint. The span kind is tagged and the span is started. If an error occurs, the logging level is set to warn.
853	This method creates a new operation context and executes a series of steps to process the given operation. It first adds a prepare step to the context, then adds a verification step, and finally adds a step for the actual operation. It also sets a flag to determine whether to rollback on failure or not. Finally, it completes the steps and returns the response.
475	jni_YGNodeStyleSetMarginAuto is a private static native method that takes a native pointer and an integer edge as its parameters.
42	This method checks if a given class should be excluded from a certain process. It returns true if the given class is equal to MetadataGeneratingExpandoMetaClass.class, ExpandoMetaClass.class, DocumentationContext.class, DocumentedMethod.class, DocumentedProperty.class, DocumentedElement.class, DocumentationContextThreadLocal.class, and assignable from Closure.class.
576	This method prints out the details of a BinaryMapDataObject, including the type of object (Multipolygon, Area, Way, or Point), the types associated with the object, any additional types associated with the object, the names associated with the object, and the lat/lon coordinates.
395	This method creates a DexBackedAnnotationEncodedValue object. It takes as a parameter a DexReader object and stores the DexBuffer, the type (read from the DexReader using readSmallUleb128() and retrieved as a type), and the elementsOffset (the current offset of the DexReader) as fields. The skipElements() method is then called on the DexReader.
782	This method uses the @RequestMapping annotation and the RequestMethod.HEAD request to determine whether a resource is available. If the resource is available, a ResponseEntity is returned with a status of OK. Otherwise, a ResponseEntity is returned with a status of NOT_FOUND.
357	This method takes a View and a ListItem as parameters and sets the text of the view to the label of the ListItem. Additionally, if mShowIcons is enabled, it creates an icon thumbnail of the ListItem's resolveInfo and applies it to the view using the setCompoundDrawablesRelativeWithIntrinsicBounds method.
507	This method is responsible for reading data from a socket. It first acquires a read lock, and if the socket is in the desired blocking mode, it will attempt to read data from the socket. If the socket is not in the correct blocking mode, the write lock is acquired, the blocking mode is changed accordingly, and the read lock is reacquired before attempting to read from the socket. If the read is successful, a value greater than 0 is returned, and the eagain flag is set to false. If the read is unsuccessful, the eagain flag is set to true and a 0 is returned. If the read returns an APR_EOF or APR_OS_START_SYSERR + 10053, an EOFException is thrown, and an IOException is thrown in all other cases, providing additional information about the error.
349	This method determines the maximum height of a child view. It handles ExpandableNotificationRows and ExpandableViews differently. For ExpandableNotificationRows, it adds an extra size if the row is a heads-up entry, and for ExpandableViews, it returns the intrinsic height of the view. If the view is null, it returns the collapsed size.
999	This method handles the GpsNiNotification by checking if the location is disabled and if the user is in emergency. If the notification needs to be notified, an openNiDialog is set or notification is set. If the notification does not need to be verified or has a privacy override, then the response is accepted.
836	This method attempts to acquire a lock on a file with the specified lock mode. It first attempts to lock the state region, and if this fails it attempts to lock the information region. If the lock cannot be acquired, a LockTimeoutException is thrown. If the lock can be acquired, the information region is updated with the process identifier and operation display name.
479	This method attempts to check whether the radio is on by using the ITelephony interface. If the ITelephony interface is found, the method checks if the radio is on with the specified package name and returns a boolean result. If an error occurs, a false result is returned.
487	This method checks if the mapping has been applied. If it has not been applied, a RuntimeException is thrown.
46	This method updates the album art for a media notification. If the SHOW_LOCKSCREEN_MEDIA_ARTWORK flag is not set, the method returns. If the media metadata is available, the artwork bitmap is fetched and if it is not null, the visibility of the backdrop is set to visible and it is animated to have an alpha of 1f. If metaDataChanged is true, the backdrop front image is changed. If hasArtwork is false, the backdrop is animated to have an alpha of 0.002f and its visibility is set to gone.
801	This method is used to create an instance of an RcFileReader, which is used for reading data from an RC file. The method requires a data source, a list of data types, an encoding, a set of columns to read, a codec factory, an offset, a length, and a buffer size. It will then check that the offset and length are valid, determine if the file is compressed, read the metadata entries, and parse the column count. Columns are then created and the first row group in the range is sought out.
482	This method begins by setting running to false and the engine to null. If now is true, the thread groups are told to stop and paused for a certain amount of time. Afterwards, the threads are verified to have stopped. If they have not stopped, an error is reported to the user. If now is false, the stopAllThreadGroups method is called.
878	This method will return an ActionController object that takes an Id as its parameter.
609	This method retrieves the VcsHistoryProvider and VcsHistorySession for the file that was selected in the VcsContext. It then checks if the treeHistoryProvider is not null and if so, it shows a tree popup with the revisions and the DiffProvider. Otherwise, it shows a list popup with the revisions and the DiffProvider. In case of an exception, it displays an error message with the exception's message.
174	This method creates a DeploymentManager object which is used to deploy the application. It takes an array of ServletContextInitializers as a parameter and sets the classloader, context path, display name, deployment name, servlet stack traces and resource manager for the deployment. It also registers a default servlet, configures error pages, mime mappings and locale mappings. If access log is enabled, then it is also configured. Furthermore, if session persistence is enabled, then a valid session store directory is set.
450	This method sets an interface based on the current card, either simple or more complex. If the current card is set to have a simple interface, a TextView is created and set to be selectable and clickable. The background and text color are also set. If the current card is set to have a more complex interface, a web view is created and set to be the background color.
751	This method sets up a battery meter drawable base by retrieving resources from the context, creating an array of colors, setting up paints and typefaces, and obtaining default colors from the context. It also saves the intrinsic width and height of the battery.
799	This method creates a Point object with two parameters, lineNo and columnNo. It sets the value of line equal to lineNo and the value of column equal to columnNo.
531	This method returns a boolean value indicating whether or not the assist feature is blocked. It does this by checking to see if the "mFlags" variable is not equal to the "ViewNode.FLAGS_ASSIST_BLOCKED" flag.
834	This method saves metadata for a given file version. It begins by checking if the file version is a LiferayFileVersion, and if so, attempts to get the raw metadata map from the file. If this is unsuccessful, it then attempts to get the raw metadata map from the file version's content stream. It then obtains the list of DDM structures related to the file version and updates the file entry metadata with the raw metadata map. Finally, it checks if the file entry is a LiferayFileEntry, and if so, reindexes the DLFileEntry.
448	This method performs an upgrade of settings for a given user, from version oldVersion to version newVersion. If the user is the system user, the global settings are updated with new values for Zen Mode and Ringer Mode. Secure settings are also updated with a new setting for Double Tap to Wake, and if the user is a managed profile, settings for Show Notifications and Allow Private Notifications will be added. The Bluetooth Disabled Profiles setting is also inserted, as well as settings for NFC Payment Default Component, Show IME with Hard Keyboard and Enabled VR Listeners.
302	This method updates the animation by calculating the millisSoFar, millisLeft, totalDeltaX, and goingRight variables. It then takes the interpolation value and the totalDeltaX to calculate the rotaryOffsetX. Finally, it checks if the dimples of fling are greater than 0, and if so adjusts the rotaryOffsetX accordingly.
281	This method is the same as the first method, however, it is synchronized to allow for thread safety. It renames a file with a specific file ID and a destination path. If the method is inactive, it will return without any action. If it is active, it will write a byte to indicate a rename operation and the file ID and destination path are then written to the DataOutputStream. Any exceptions are caught and handled by the CommonUtils runtimeException method.
126	This method checks if the order entry is a JdkOrderEntry and if the active configuration is valid. It then checks the SdkEntry and the SdkType to ensure it is a FlexSDKType2. The method then adds all the urls of the specified type to the url collection. If the type is OrderRootType.CLASSES, it adds all the accessible urls to the collection.
998	This method creates a ShelveChangesManager object, initializing the project and message bus fields. It then sets the myFileProcessor field to a CompoundShelfFileProcessor object, which is determined by whether or not the project is a default project. If it is not, then the CompoundShelfFileProcessor takes in the "shelf" parameter. Otherwise, it takes in an empty stream provider and the path to the config file.
190	This private static native method, jni_YGNodeStyleSetFlexDirection, takes two parameters: a long nativePointer and an integer flexDirection. It is used to set the flex direction of an element.
900	This method creates an expression statement object using a method call expression derived from an AST code object. The expression statement object is then configured using the AST code object.
446	This method uses async commands to manage the expiration of the keys that are passed in. It checks the timeout and idle sets to see if the keys have expired, and then updates the values accordingly. It also packs and unpacks the data to ensure that the correct values are returned.
787	This method adds a product code to a given address, after breaking the manufacturer and product identifiers into bytes. If the address already contains a product code, it will be compared to the new one. If they are not the same, a warning will be logged and the new code will replace the old one.
122	The method loop() begins by checking if the thread has a looper and if not, a runtime exception is thrown. The method then clears the Binder calling identity and creates a message from the message queue. It then prints the message, traces the message with a trace tag if enabled, dispatches the message and prints the completion of the dispatch. Finally, it checks whether the thread identity has changed and if so, logs a warning. The message is then recycled.
906	This method overrides the visitInnerClass() method. It removes the declared inner class from the declaredTypes collection and applies the instrumented type's modifiers if the internal name of the inner class matches the internal name of the instrumented type. The modified inner class is then passed to the super.visitInnerClass() method.
105	This method checks if the device is interactive and visible, then determines the current state and sets the appropriate icon. It then sets the appropriate padding and resting alpha, and starts the animation if necessary. The trust managed flag is then updated, and the clickability is also updated.
849	This method is used to retrieve an activity result from an activity, check if the result is valid, adjust the width and height of the image if necessary, get the real path from the URI, and get the base64 string from the file. It also includes code for getting the timestamp, lat/long, and orientation from the ExifInterface.
496	This method initializes token iterator by setting the origin, input, and allowComments parameters, as well as creating a linked list buffer and token list. It also sets the line number to 1 and creates a whitespace saver.
385	This method returns a boolean value based on the optional parameter "kylin.query.enable-dynamic-column" with a default value of "false".
837	This method returns a location that is determined by the position of a portal block when it is present, or a random position if it is not. The location is calculated by adding/subtracting 1 or 1 - 2*Math.round(Math.random()) from the coordinates of the block, depending on the situation.
872	This method allows the user to share a given item by building a geo URL, an HTTP URL, and a string builder. The string builder takes the title, address, and a string representing the location to generate a SMS message. If the address is not empty, is not equal to the title, and is not equal to a "no address found" string, then it is also included in the SMS message. Depending on the selected ShareItem, the user can then send the message via a share dialog, send to clipboard, view on a map, or create a QR code.
672	This method returns the description for the owner type of a given property. It is viewable as false and editable as false, and it is placed under the category of DB2Constants.CAT_OWNER.
261	This method retrieves an OAuth2AccessToken object using the authenticationKeyGenerator.extractKey() method. If an access token is found, it is checked against the authenticationKeyGenerator.extractKey() method to ensure its validity. If it is not valid, it is removed and replaced.
656	This method takes two input parameters, URI addr and String msg. It splits the message into parts and checks if the first part is 'slave'. If so, it puts the slave address into the 'slaves' list and checks the read mode of the config. If the read mode is 'SLAVE', it adds the slave to the list and adds a listener to the future. If not, it calls the 'slaveUp' method. If the message is invalid, a warning is logged.
196	This method initializes a target client if it is not already initialized. If the client is not initialized, a JAXRSClientFactoryBean is created and configured with a given address and thread safety settings. The targetClient is then created and added to the ClientImpl. If the targetClient is already initialized, the method checks if the current URI is the same as the given URI and sets it accordingly.
353	This method provides a backpropagation gradient for a convolutional layer. It starts by retrieving the configuration parameters of the layer, such as the kernel size, stride, and padding. It then checks for an existing helper and if it finds one, uses it to backpropagate the gradient. If not, it creates col6d and col2d matrices, and depending on the pooling type, either multiplies the isMax matrix by the epsilon matrix, or adds the epsilon vector to the col2d matrix. Finally, it performs the col2im operation to get the outEpsilon matrix, and if pooling type is avg, divides it by the product of the kernel size.
110	This method collects broker infos by attempting to get the remote and local broker information. If either is null, the method will serviceLocalException and return. If the remote and local broker ID's match, the local and remote brokers will be disposed of. If the configuration is set to use broker names as the ID seed, the ID generator will be initialized.
719	The refresh() method returns the value of the refresh(true) method.
716	This method begins by logging a user action and creating an array list of enabled documents. It then iterates through the list of model IDs and checks whether the cursor for the model ID is not null, and that it is enabled. If it is enabled, it adds it to the enabled list. Finally, the selection manager is used to set the items selected in the enabled list to true and updates the display state if it has changed.
829	This method overrides the convertView method to set the background color and text color for the view. The viewHolder is set up and a color and icon are decided for the view. The switch is set to checked and an onClickListener is set.
160	This method creates a MethodSpec object, which is used to store information about a method. It starts by creating a list of TypeMirrors, which contains the primitive type mirrors and void. Then, it creates a ParameterSpec for the return type, which includes the list of type mirrors and a cardinality of one. Finally, it creates a list of ParameterSpecs, which includes a ParameterSpec for the frame. The MethodSpec is then returned.
594	This method checks a call on the receiver object and if successful returns the sum of the receiver and the arg which are both converted to double values. If an error is thrown, it calls the super call method.
275	This method takes a path as an argument and returns a DataStreamSink of type OUT. It uses the writeFormatAsText method with a parameter of 1 and a null value.
890	This method creates a Context object and sets the DetailAST parameter to the ast instance variable. It also sets the count to 0.
737	This method creates a DumpFilter object that takes in arguments from an array of strings. It checks for arguments such as --noredact, --reveal, p, pkg, --package, --zen, and --stats and sets the relevant fields in the DumpFilter object accordingly. It also uses Long.parseLong to parse the argument for the --stats argument.
331	This method checks the updated accounts, sends a "canceling sync" message if the account has been removed, sends a "check alarms" message, performs a database cleanup, and schedules a sync if there are accounts present.
812	This method is used to send a response message from a given HttpResponse object. It first gets the status line from the response, then attempts to get the response body from the entity associated with the response. If the status code of the response is greater than 300, a failure message is sent, otherwise a success message is sent.
805	This method takes in a 2-dimensional array of strings and a single array of strings as parameters. It then iterates through the 2-dimensional array and checks if the single array is equal to any of the elements in the 2-dimensional array. If so, the method returns true, otherwise, it returns false.
457	This method is used to find a property editor for a given field and value type. If the value type is null, it will be retrieved from the getFieldType method. If no editor is found and the formatting service is not null, a FormattingPropertyEditorAdapter is created using the formatting service and value type.
992	This method adds a view to the layout specified by the layout parameters, and handles any necessary transitions and requests for layout. It also checks for any existing parents of the child, and throws an exception if one is present. It then sets the layout parameters for the child and adds it to the array at the specified index. Finally, it dispatches the attached to window event, resets the layout direction, and handles any needed transient state changes.
928	This method checks the Looper thread and sets the mReversing boolean to true if the playback is reversed. It also sets certain variables, such as mStarted, mPaused, and mRunning, to true. It uses an AnimationHandler to add an animation frame callback and starts the animation if the start delay is 0 or if the seek fraction is greater than or equal to 0. Lastly, it sets the current play time to 0 if the seek fraction is -1, or sets the current fraction to the seek fraction if it is not -1.
80	This method returns a list of fragments if the added variable is not null. The fragments are cloned before being returned to ensure that the data remains secure.
404	This method creates a new PyClassType instance with the given parameters, setting the third parameter to false.
219	This method creates an SQLExecutionEvent object based on the SQLType and the SQLExecuteUnit provided. The list of parameters and a URL are passed in to the event constructor depending on the type of SQL query.
48	This method calculates the state of child notifications within a group notification, taking into account the maximum number of visible children, the group expansion fraction, and the current state of the group (expanded or not). It sets the height, translation, and alpha values of each child, and sets the overflow state to be equal to the last visible child. It also initializes the header view state with the notification header.
293	This method creates a RequestContext object by using the RequestContext.create() static method with the class loader of the "ksession" object. The resulting object is further initialized with the "ksession" object.
822	This method sets the content view, title, and alert message. It sets the background color of the list view and creates and sets up three buttons: mDownloadButton, mToggleButton, and mRefreshButton. The bundle savedInstanceState is used to store and restore information from the activity. If the last non-configuration instance is null and the FormNamesAndURLs is empty, the downloadFormList() method is called. Finally, a SimpleAdapter is set up for the FormList and the list view is set with a multiple choice mode.
38	This method updates the content of the card. It checks if the question is displayed, and if so, parses sounds accordingly. It also replaces font-weight and adds a base URL. If the Hebrew fix is enabled, it applies the fix. Lastly, it plays sounds at the start if mPlaySoundsAtStart is true.
224	This method updates the reflog of a repository by filtering commands that do not start with Constants.R_HEADS and Constants.R_TAGS. It then creates an orphan branch for the reflog if it does not exist, and creates a commit with new tree, author and committer details, as well as a message. If the update is successful, it returns true.
518	This method is a SystemApi public Connection that retrieves a primary connection. If there are no unmodifiable child connections or they are empty, the method returns null. Otherwise, the method returns the first unmodifiable child connection.
89	This method overrides the selectTracks() method to enable the selection of new tracks. It first obtains the stream index to track group index mapping, then releases disabled streams and orphan embedded streams. It then selects new streams and creates an ArrayList of ChunkSampleStreams and EventSampleStreams. The sampleStreams and eventSampleStreams arrays are then initialized, and the compositeSequenceableLoader is created for the sampleStreams. The method then returns the positionUs value.
811	This method is used to log information about an application that is running too slowly. It first checks if IS_USER_BUILD is true, and if it is, the method returns. The method then checks for the existence of a specific stack-trace-file and if it does not exist, the method also returns. To log the details, the method creates a new traces file, adds a timestamp and duration, and if an application is detected, it creates an array of PIDs and dumps the stack trace into the file. Lastly, the method renames the log files so that the last one is the most recent.
840	This method notifies the client of an unavailable view. It checks if the callback is present and if the view ID is not null, it calls the notifyNoFillUi method of the client with the view ID as a parameter. If an error occurs while trying to notify the client, it is logged.
324	This method delays a given duration by first calculating the amount of time to wait, which is the current system uptime plus the given duration. The loop then waits for the calculated duration, and if the mDone flag is true, execution breaks out of the loop.
903	This method creates a CImageCombo object which provides a composite of a label, text, and an arrow button. The label and text is placed within a grid layout and the arrow is placed outside of the composite. Event listeners are also added to each of the elements in order to handle user interaction. Finally, a popup is created for the CImageCombo.
471	This method cancels the inner, outer, and alpha objects by calling the cancel() method respectively.
67	This method calculates the remaining lease time on an expiration time. It first checks if the expiration time is set to Long.MAX_VALUE or if it is negative. If either is true, it returns Long.MAX_VALUE. It then gets the current time from the Clock.currentTimeMillis() method and checks if it is greater than the expiration time. If so, it returns 0, otherwise it returns the difference between the two.
599	This method writes an integer value to a parcel object specified by the dest parameter. The flags parameter is also included in this method.
263	This method executes an Executor and waits for the completion of the flow associated with the Wrapper object, throwing an exception if necessary.
74	This method returns an ImmutableList of Symbol objects using the ImmutableList.copyOf function to copy the values found in the 'symbols' variable.
705	This method enables users to switch to a new point on a page. If the tips list is not empty or the new current point is not greater than the list size, the tip text view will be visible and the text will be set to the new current point. The point real container will be set to visible if the views list is not empty and the new current point is less than the list size. The number indicator will also be set to visible if the views list is not empty and the new current point is less than the list size.
436	This method overrides the setIgnoreExitValue function in JavaExecHandleBuilder, setting the exit value to be ignored in the process.
206	This method vibrates the device with a given frequency and clears the flags of the window manager. It then stops recording and stores the results in a ListenableFuture pair. Based on the selection of the transport, a message is then sent with the audio as an attachment. Finally, it asynchronously deletes the stored audio.
103	This method delivers a sampler, test element and a sample result to a target controller node. If the filter content type and filter URL conditions are met, the method will remove values from the sampler, replace values from the sub configuration, set auto redirects, follow redirects, use keep alive, and set image parser. The sampler is then placed and the sample listeners are notified.
406	This method checks whether the provided _href is null and prints the _name if it is. If the _href is not null, it creates a string builder and appends HTML anchor tags, with the _href, _data, _target, and _title variables, to it. It then escapes the _href and prints the string builder with the JspWriter.
199	This method enables scheduling of an alarm by setting the exact time and allowing the device to wake up, even while the device is in idle mode. It sets up a PendingIntent to be broadcast when the alarm is triggered, and logs the time when the alarm is scheduled.
721	This method builds a SQLParsedResult from a given logicSql string. First, it creates a SQLParsedResult and logs the type of SQL statement that was obtained. Then, a SQLBuilder is created and the given logicSql is appended to it. Finally, the SQLBuilder is set in the SQLParsedResult and returned.
470	The ParameterInliner apply() method tests the parameters provided and creates a list of indices of arguments. It then uses a StringBuilder to create a new SQL query and an ArrayList of Objects to store the new parameters. The method uses an array of parameters to check for parameters of different types, such as Iterable, byte[], short[], int[], long[], float[], double[], boolean[], char[], and Object[]. If the type matches, it expands the query and adds the parameter to the list of new parameters. Finally, the method sets the sql to the new query and parameters to the new parameters.
512	This method checks the text of a PyStringLiteralExpression node object by calling the checkString() method, which is passed the node object and the node’s getText() method.
241	This method takes in an integer value representing the number of ticks and multiplies it by the number of ticks in a gap to return the number of gaps.
369	This method handles a RestRequest request and RestChannel channel. It splits the indices in the request, creates a ClusterStateRequest, filters the routing table, nodes, and filtered indices, and sets the listener thread to false. A ClusterStateResponse is then sent and the MetaData is checked to see if any indices are present. If not, a XContentThrowableRestResponse is sent. Otherwise, the settings are filtered, XContentBuilder is created, and a XContentRestResponse is sent with the results. If an exception occurs, it is handled by sending a XContentThrowableRestResponse with the error.
210	This method refreshes the media from a server using the given offset, and updates the media grid adapter accordingly. If the offset is 0 or the method is not already refreshing, it sets the mIsRefreshing flag to true and adds the WordPress blog to the given list of apiArgs. It then creates a callback to handle the response, and updates the mHasRetrievedAllMedia flag and the mGridAdapter with the results. If there is an error, it sets the mHasRetrievedAllMedia flag to true and displays an appropriate error message.
950	This method borrows an item from a list and checks if the item is in the not in use state. It checks for items in a thread list first, then tries to acquire a shared nanos from a synchronizer. It then attempts to borrow an item from the shared list and if successful, returns it.
841	This method imports folder file entry types into a portlet data context, checks for the reference elements, imports the reference staged model, gets the new primary keys map and updates the imported folder's default file entry type.
431	This method starts by checking if the process should be stopped, then it sets the start date, runs the scan, and notifies the plugin completion. In the event of an exception, an error message is logged. Finally, it sets the finished date.
178	This method retrieves a list of strings from a given XML string. It creates a reader object and then loops through the XML data to check for START_ELEMENT or NAMESPACE events. When it finds one, it adds it to the list and returns it.
598	This method calculates the maximum profit that can be made by buying and selling a stock. The method takes in an array of prices and finds the minimum price in the array. It then calculates the maximum profit by subtracting the minimum price from each element of the array starting from the second element and returning the highest value.
208	This method checks if the specified ApplicationVersion is an upgrade over the existing version by using the compareTo() method. If the compareTo() method returns a value less than 0 the method returns true, otherwise it returns false.
942	This method returns an observable of the logged in user.
61	This method updates the cached service for a given user ID and disables it if necessary. It first obtains the service using the getServiceForUserLocked() method and then updates the locked fields before checking if the service is enabled. If not, the cached service is removed.
360	This method returns a boolean value based on the comparison between the mThumbPosition and the getThumbScrollRange() divided by 2.
547	This method checks that the stream is not initialized and that the ExecutionContext is not null. It then executes the query and stores the ExecutionContext. If the context contains the key CURRENT_PROCESSED_ROW, it moves the ResultSet to the last committed row. Lastly, if the context contains the key SKIPPED_ROWS, it adds all the skipped rows to the skippedRows list.
156	This method gets the name of the query. If the last good query is not null, the name is obtained from the lastGoodQuery.getOriginalQuery(). If the last good query is null, the name is set to "SQL". The method returns the obtained name.
511	This method checks if the content parent is not null and if the requested feature is not the custom title feature. It then checks if the feature is not the no title feature, the action bar feature, or the action mode overlay feature and throws an exception if it is. It then removes the action bar feature if the no title feature is requested. Finally it calls the super.requestFeature method.
562	This method creates an object of type HttpRequest and passes the given CharSequence URL and METHOD_DELETE as parameters.
483	This method initializes a RatingBar object by setting the number of stars, indicating whether it is a user-seekable rating bar, setting the step size, and setting the rating. It also sets the mTouchProgressOffset to 0.6f.
926	This method is used to finish the connection. It checks if the connection is active and then attempts to finish the connection. If there is a ConnectException, a new ConnectException with the requested remote address is thrown. Finally, the connectTimeoutFuture is cancelled and the connectPromise is set to null.
142	ShapeState is a method that takes in an original ShapeState object and copies its various attributes, including mThemeAttrs, mPaint, mShape, mTint, mTintMode, mPadding, mIntrinsicWidth, mIntrinsicHeight, mAlpha, and mShaderFactory. If the original ShapeState object is null, then a new Paint object is created without any flags.
134	This method overrides the DivideByOnConditionStep class and adds a Condition object to the condition object. It then returns the DivideByOnConditionStep object.
49	This public abstract method enables a user to return to a safe environment by providing a boolean value for the report parameter.
639	This method updates the mobile radio state by assessing the NetworkStats delta in order to accurately calculate the total packets sent and received. The packets are then used to calculate the mobile radio active time for each app and the remaining radio time is attributed to unknown sources. Any activity info is also used to update the modem activity counters and the power counter.
169	This method adds an output of type PValue and returns a long value.
148	This method builds a program URI by using the programId as a parameter and using the ContentUris class with the Programs.CONTENT_URI appended to it. It is declared as public static.
559	This method aims to set the permission checker to ensure secure access. It starts by getting the company ID from the cookie and then getting the user UUID string from the cookie. The UUID is decrypted with the company's key object. If the UUID exists in the authenticated user UUID store, the user ID is extracted from the UUID and the permission checker is set accordingly.
71	This method unlocks the accept functionality by creating a socket, setting the socket timeout and linger options, and connecting to the socket address. It then writes an OPTIONS request, if defer accept is enabled, and waits for the acceptor to be in a running state. Finally, the socket is closed.
967	This method allows users to place a market order with the given parameters. The parameters include the symbol, side, order quantity and execution instructions. The order is placed using the Bitmex API, with the signature creator and nonce factory provided by the exchange. The side is capitalized before being sent to the API.
333	This method first logs a user action in Metrics and then creates a list of enabled files. It iterates through the model IDs of the adapter and attempts to obtain a cursor for each item. If the cursor is found, the document's MIME type and flags are checked to determine if the document is enabled. If so, it is added to the list of enabled files. The selection manager is then called to set all of the items in the list as selected. Finally, the display state is updated to reflect the changes.
175	This method sets the form size, x-entry space, y-entry space, form-to-text space, text size, stack space, x-offset and y-offset to their respective values in Utils.convertDpToPixel.
1	This method calculates the number of non-null, non-reference null elements in the mResourceData array, creates an array of indices that correspond to those non-null elements, and stores the number of non-null elements in the first element of the indices array.
684	This method removes a collection of strings from a file, throwing an IOException if an error occurs.
690	This method creates a query builder and appends the query base. If the query base is not an update, it appends the table name. If the query base is a select, it also appends the table alias name and the joins. The query is then returned.
62	This method checks for infinite work by comparing the lastPull node and the firstNoChange node. If the lastPull is the same as the firstNoChange node and the node has no usages, it returns false, otherwise it sets the lastChain node to the lastPull node. If the lastPull is not the same as the firstNoChange node, it sets the firstNoChange node to null.
653	This method creates a mini thumbnail of a bitmap based on the width and height provided. It first determines the scale of the thumbnail by comparing the width and height of the bitmap. Then it creates a new matrix and sets the scale. Finally, it transforms the bitmap using the matrix and returns the mini thumbnail, with the additional parameter of "true".
818	This method binds objects to a given domain by taking in an object, a source, a list of includes, a list of excludes and a filter. Depending on the type of source, a GrailsDataBinder is created and then used to bind the object, and if a domain is specified, the binding result is validated for all errors. Finally, a MetaClass is used to add the errors to the object.
151	This method performs input/output (I/O) operations depending on the value of the mWrite flag. When mWrite is true, this method will loop through a range of values (mLeft to mRight) and create a file for each iteration in the loop. The file's content will be a byte buffer, with the first byte being the iteration number plus the worker ID. Logging is performed in the logPerIteration function. The Results array will be updated with the sum of all the iterations.
222	This method creates a concise ProcessGroupDTO object from a ProcessGroup object. It sets the ID, position, comments, name, and variables of the ProcessGroupDTO object to the corresponding fields from the ProcessGroup object. It then sets the parent group ID if the ProcessGroup has a parent. Lastly, it sets the counts of running, stopped, invalid, disabled, input port, output port, active remote port, and inactive remote port of the ProcessGroupDTO to the corresponding counts from the ProcessGroup.
991	This method handles Message objects and performs different operations depending on the value of the "what" property of the message. If the "what" is equal to MSG_WRITE_STATUS, the method synchronizes on the mAuthorities object and calls the writeStatusLocked() method. If the "what" is equal to MSG_WRITE_STATISTICS, the method synchronizes on the mAuthorities object and calls the writeStatisticsLocked() method.
443	This method creates a CharRange object with the parameters of a starting character 'from' and an ending character 'to'. If the starting character is greater than the ending character, an empty CharRange object is returned. Otherwise, a CharRange object with a length of the difference between the from and to characters plus one is returned.
400	This method is the same as the one above, but it is synchronized, meaning that only one thread can access it at a time. This prevents multiple threads from accessing it simultaneously, thus avoiding any potential conflicts.
754	This method checks whether a registered listener exists for a given map name. If there is a registered listener and the event type requires firing, the method converts the values before and after processing into a Data type and passes the map name, event type, key, and values to the MapEventPublisher to be published.
332	: This method creates a TimeArray that contains an array of OffsetTime values. The OffsetTime values are generated using the nextTimeArrayRaw method, which takes in the minimum and maximum array values as inputs. The final TimeArray is created using the Values class' timeArray method.
212	This method sets the flash mode of the camera by making use of the RCTCamera class and its getInstance() method. The setFlashMode() method is used to specify the camera type as well as the flash mode.
768	This method checks if the active editor has been modified and then closes the internal runner. It then attempts to open the internal path but if it is unsuccessful, it will call the handleNewReplaceImpl() method.
390	This method creates an array of indices based on the ResourceValues in the mResourceData array, excluding any null values and any values whose getValue() method returns RenderResources.REFERENCE_NULL. It iterates through the mResourceData array and keeps a count of the number of non-null values that do not return RenderResources.REFERENCE_NULL. It then creates an array of indices with the number of non-null values + 1 as the first value, and the indices of each non-null value that does not return RenderResources.REFERENCE_NULL as the subsequent values.
286	This method takes two IBlockState objects, a and b, and a collection of ignored properties. It then creates an intersection of the two IBlockState's property keys, filters any properties in the ignoredProperties list, and checks that all remaining properties have the same value in both a and b.
550	This method checks to see if a package is a system component or a persistent platform signed privileged application by checking the user ID, package privilege status, package flags, and signature comparison.
647	This method polls the scheduledWorkers for a FutureTask, runs it if the taskOutput is not done and cancels any remaining FutureTask in the scheduledWorkers at the end.
311	This method takes a ModelContainer as an input and returns an ArtifactBasicMetadata object. It iterates over the model properties, and sets the groupId, artifactId, version, classifier, scope, type, and optional values of the ArtifactBasicMetadata object based on the resolved values of the model properties. If the scope is not set, it is set to "runtime" by default. Additionally, it queries for the Exclusion model containers and sets the ArtifactBasicMetadata object with the resolved artifactId and groupId values from the model properties.
432	This method resolves padding by first checking the resolved layout direction. If the direction is RTL, the mUserPaddingStart, mUserPaddingRight, mUserPaddingEnd and mUserPaddingLeft are reassigned. If the direction is LTR, the mUserPaddingStart, mUserPaddingLeft, mUserPaddingEnd and mUserPaddingRight are reassigned. The mUserPaddingBottom is also reassigned if it is greater than 0. Once all the assignments are done, the recomputePadding() function is called.
326	The method getPropertyDescriptor() takes in a property name as an argument and returns a PropertyDescriptor object. An exception of type InvalidPropertyException is thrown if the property name is invalid.
701	This method sets the boundaries of a stack when it is in docked mode. It takes in a displayRect, outBounds, stackId, dockedBounds, dockDividerWidth and dockOnTopOrLeft as parameters. Depending on the values of these parameters, the boundaries are adjusted accordingly.
591	This method begins a 2D projection by pushing the projection matrix, setting the orthogonal projection to the width and height of the image, pushing the current matrix, and then setting the camera to the width and height of the image.
155	This method creates a ListNumberingDefinition object based on the provided Numbering.Num node. It first stores the numNode and listNumberId into the object. It then checks for an AbstractNumId, which is used to get the abstractListDefinition from the provided HashMap. Afterwards, it stores all the ListLevels from the abstractListDefinition into a HashMap. Finally, it iterates through the LevelOverrideNodes to set start values and overrides if necessary.
545	This method overrides the bodyToFlux method, which takes an element class as a parameter. It then creates a Flux<T> object from the body extractor and onErrorMaps any errors associated with UnsupportedMediaTypeException to the ERROR_MAPPER.
95	This method initializes the POI types, by checking if a poi_types.xml exists and initializing accordingly. It also sets the POI Translator, which is used to get translations for POI types in different languages, as well as the translations for the same POI type in English, using the localized resources specified.
266	This method takes in a parameter of a Throwable and assigns a ShardRouting to it. If the ShardRouting is null, it sets the failure to either the lastThrowable or a NoShardAvailableActionException. If the ShardRouting is not null, it either runs the shardOperation on a thread or without a thread. If the ShardRouting is not on the local node, the transportService is used to send a request to the node.
284	This method processes a list of grammar files and creates output files based on the grammar files. It checks if the output files already exist and if the grammar files have been modified since the output file was created, and only processes the grammar files that have changed or do not have an output file yet. It also checks for any dependencies that have changed and takes those into account when processing the grammar files.
420	This method is identified by an ID of 10835 and it prints a message that indicates an "IN_SERIES" is missing groups. It takes a String parameter of "rolloutPlan" which is used to determine the missing groups.
409	This method starts a multipart body descriptor by expecting a Part object, retrieving its content type and boundary, and creating a MimeMultipart object with those parameters. It then sets the body of the Part object to the MimeMultipart object and adds it to the stack. If an error occurs, it throws a MimeException.
578	This method overrides the getIsNullProvider from the superclass and implements a SimpleFilterCriterionProvider that builds a criterion based on the targetPropertyName and uses Restrictions.isNull to check for null values.
899	This method creates a sparse array of components by user and an array list of removable bound services. It also clears the enabled services for current profiles and enabled services package names. Finally, it disables services that are not in the allowed components list and enables services that are part of the allowed components list.
538	This method returns a MutableDateTime object using the current milliseconds, ISOChronology instance, and the current timezone.
116	This method sets the layer type to one of three options (LAYER_TYPE_NONE, LAYER_TYPE_SOFTWARE or LAYER_TYPE_HARDWARE), and updates the layer paint accordingly. If the layer type is not LAYER_TYPE_SOFTWARE, the drawing cache is destroyed and the parent caches are invalidated.
718	This method gets the row type of a RelDataTypeFactory object. If the type is dynamic, a new RelDataTypeDrillImpl object is returned. For each field, a corresponding name and type is added to the list. Depending on the precision and scale, a different type of RelDataType is created. Finally, a StructType is returned by the factory.
384	This method overrides the close() method by shutting down the recompute launcher service.
280	This method is used to get AssistContextExtras from the enqueueAssistContext method, which is used to store information about the user's request. The method waits for the result, then builds an AssistBundle based on the result, removes the PendingAssistExtras from the queue, and removes the callback from the UI handler before returning the extras.
933	This method retrieves a related view based on a set of rules and a relation. It starts by retrieving the ID associated with the rules and relation, then checks if the ID is not equal to 0. If it is not, the method retrieves a node in the dependency graph associated with the ID, then gets the view associated with the node. If the visibility of the view is set to GONE, the method then retrieves the rules associated with the view's layout parameters and retrieves a node in the dependency graph associated with the rules, then gets the view associated with the node. If the node is null or the view is the same as the node's view, the method returns null. Otherwise, the method returns the view.
304	This method overrides the existing public boolean canSet() method with a boolean canSet() method. It determines whether a value can be stored in the DynamicObject store by first checking if the value is able to be stored and then checking if the store is able to store the final value.
917	This method overrides the onBackendConnected() to obtain the Shared Preferences and get the Boolean value from the same. It then checks for the action type, and if it is ACTION_VIEW_MUC, it assigns the UUID as the Extras. It then checks for the UUID and if it is not null, sets the mSubject text, title and more details for the conversation. It also sets the mRoleAffiliaton, and clears the users list, removing all the views from the LayoutInflater.
407	This method retrieves the voicemail number associated with a given PhoneAccountHandle. If the service is connected, it will call the ITelecomService#getVoiceMailNumber() method and return a string representing the voicemail number. In case of any RemoteException, it will log the exception and return null.
53	This method returns a String value of the maximum inflight.
882	This method creates a map of related collections and a stream of classes of type Identifier. For each class, it retrieves the representable and its name and checks if the name is already present in the map. If it is, it logs a warning, otherwise it puts the name, class, and representor in the map.
997	This method is used to get the schema from the connection object and throw an SQLFeatureNotSupportedException if a LinkageError is encountered.
238	This method takes in a bitmap as an argument and returns a float that represents its darkness. It first checks if the bitmap is null or has 0 width or height and returns 0 if it is. It then determines the width and height of the bitmap and initializes the totalLum and n variables to 0. A for loop iterates through the pixels of the bitmap, incrementing n each time and adding the red, green and blue values of the color to the totalLum. Finally, the method returns the average luminance divided by 256.
502	This method runs a stack resize operation, requiring a stack ID as input. It then retrieves the required bounds of the resize operation, and attempts to perform the resize operation. If an error occurs, such as invalid input bounds, the method will return and print an error message.
777	This method posts a notification to the NotificationManagerInternal if the foregroundId and foregroundNoti are not 0 and null respectively. It sets the small icon of the notification to the app's icon if it is not specified, and sets up a pending intent for the user to access the application's settings. If the small icon is still null, then the application is crashed.
389	This method creates a JPanel for a condition, with a label and a syntax text area. The label is set to the condition label and the text area is set to the condition. The condition panel is then added to the north of the condition label and syntax text area, with a horizontal glue creating an organized layout.
315	This method ensures that a connection is open and starts processing if the private input is null or the response code is -1.
2	This method counts the number of items in a database based on a given create date and thread ID. It starts by creating a timestamp object from the given create date. It then opens a session and creates a SQL query using the CustomSQLUtil class. It adds a scalar to the query and sets the query position with the create date and thread ID. Finally, it iterates over the list and returns the count of the items if it is not null.
75	: This method updates a layout with a given plid, companyId, name, title, and typeSettings. It checks for the presence of the name and title, and replaces certain strings in the name and title. It then checks for the presence of typeSettings, and if present it finds the default language, and then looks for meta-description, meta-keywords, and meta-robots in the default language. It updates the meta fields if found, and then looks for JavaScript 1, 2, and 3. It then updates the typeSettings using a sorted string.
491	This method overrides the onUnlockUser method and sends a message to the mService handler with the userHandle parameter and a value of 0.
990	This method checks for the call on the receiver before multiplying the two Long values of the receiver and the argument. In case of a ClassCastException, the call is delegated to the super class.
305	This method saves the progress of a video by storing the progress in a SharedPreferences object. The method takes in a Context object, an Object, and an integer representing the progress of the video. If the boolean JZVideoPlayer.SAVE_PROGRESS is set to true, a log message is printed and the progress is stored in the SharedPreferences object if progress is greater than 6000. The progress is stored as the toString() of the Object passed in.
439	This method handles the release of a NetworkRequest object by a given user. It checks if the user is authorized to make the request, then removes the request from the list of NetworkRequests and its associated NetworkAgentInfo. Additionally, it sends a cancel request to all NetworkFactories and if there are no more requests for the NetworkAgentInfo, it disconnects. Finally, it calls the callback for the request being released.
699	This method sets skew values by assigning values to matrix elements and adding the transformation to the matrix. The transformation consists of two parts, first the kx and ky values are set, and then the px and py values are set.
735	This method reads a file and waits for an event to occur. It first obtains the map of file IDs from the mPbrFile object and checks if the map is null or empty. If it is not null or empty, it requests to load all ADN-like files and obtains a message from the obtainMessage() function. It then waits for the event to occur using the mLock.wait() function.
859	This method adds a temporary Lob value to the system. If the type of the value is not a CLOB or BLOB, the method does nothing. If the value is coming from the TABLE_RESULT or TABLE_TEMP, it is added to the temporaryResultLobs linked list, otherwise it is added to the temporaryLobs array list.
410	This method determines whether copying files is allowed or not. It checks if the destination is a directory, if it supports creation, and if the root is the downloads folder. If any of these conditions are not met, it will return false.
643	This method creates a GroupDialog object, and then checks that the user has pressed the "OK" button. If so, it creates a new AbstractGroup object, a new GroupTreeNode object, and a new GroupTreeNodeViewModel object. It then creates an UndoableAddOrRemoveGroup object, expands the path in the groupsTree, adds an edit to the panel's undo manager, marks the base as changed, and outputs a message to the user.
489	This method creates a ModClusterConfig object and sets various fields, including the advertise property, SSL configuration fields, proxy list, advertise security key, excluded contexts, auto enabled contexts, stop context timeout, socket timeout, sticky session settings, worker timeout, max attempts, flush packets, flush wait, ping, smax, ttl, and node timeout. Additionally, there are two optional fields for the balancer and load balancing group.
838	This method checks if a task is locked, and if it is not, it moves the task to the back of the stack. It also checks if the task is over the home stack and sets the next task appropriately. Finally, it resumes the focused stack top activity.
288	This method registers a metric with a given name, reducer, and time bucket size in seconds and returns a ReducedMetric.
605	This method checks if EditorConfig is enabled and overriding Code Style settings for a given file. If this is the case, two IntentionActions are registered to either disable EditorConfig support or dismiss the override.
378	This method synchronizes tasks that have been modified since the last sync, by using a TodorooCursor to select the tasks modified since the last sync, and pushing them to the GtasksInvoker. The progress of the synchronization is tracked using a SyncResultCallback, which is incremented according to the number of tasks processed.
670	This method checks if a user has permission to view a Group and whether the Group has a public layout page count greater than 0. If both conditions are true, then it returns true, otherwise it returns false.
614	This method is used to retrieve trades based on a given currency pair and optional arguments. The optional arguments consist of a sinceId (Number) and an optional count (Number). If these arguments are provided, they will be used to retrieve trades from the VaultOfSatoshi API. The trades will then be adapted and returned.
909	This method is used to get the time for a given platform version. If the platform version is greater than or equal to M, the time will be 6:00. For earlier versions of the platform, the time will be 2:20 (for Gingerbread), 2:30 (for Ice Cream Sandwich), 4:00 (for Jelly Bean), 4:30 (for KitKat), 4:40 (for Lollipop), 5:00 (for Lollipop MR1), and 5:10 (for M). If none of the conditions are met, the time will be 4:04.
211	This method creates a new ForAdvice object with the method description, instrumented method, and exit type provided as arguments.
173	This method returns the float value associated with the given offset. If the mHorizontals array is null or the offset is outside the range of the mHorizontals array, then it returns the float value from the getHorizontal() method with the given offset and mPrimary value.
866	This method checks if a task is resizeable by a docked stack, if the fullscreen mode is enabled or not, and if the docked stack is visible for the user. If any of these conditions are met, it will return true, otherwise it will return false.
581	This method compares two SimpleNode objects, o1 and o2, and returns an integer value based on their weights and strings. If the boolean myCompareToString is true and the objects have the same weight, then the strings are compared using a case-insensitive comparison. If the boolean is false or the weights are different, then the difference between the weights is returned.
468	This method handles various messages related to the radio, subscription and signal strength. It includes handling messages related to the RadioAvailable and RUIMReady events, polling state, getting signal strength, getting location done, registering for CDMA subscription, receiving NITZ time, updating signal strength, reloading MDN and handling ERI file loaded and OTA status change events.
769	This method checks if the provided expression is a valid field or an attribute. If it is an attribute or a valid field, it attempts to access the field using the specified parameters. If successful, it returns true, otherwise false.
485	This method takes a string, tableNameOrRegionName, as an argument and converts it to a byte format using the Bytes.toBytes method before calling the majorCompact method.
675	This method creates a ParcelableConference object from a given Parcel source. It reads the parcelable PhoneAccountHandle, the state, capabilities, connectionIds, VideoCallProvider, VideoState and ConnectTimeMillis from the source. It then creates a new ParcelableConference object with the read values.
28	This method overrides the onCompletion() method of MediaPlayer. It first checks if the sSoundPaths list contains a key associated with the mQa variable. If it does, it checks if the mNextToPlay variable is less than the size of the sSoundPaths list associated with the mQa variable. If it is, it calls the playSound() method with the appropriate sound path and this as parameters. If not, it releases the sound.
877	This method adds Vetoable Change Support to a class by creating a field of type Vetoable Change Support and adding methods to add and remove Vetoable Change Listeners, fire Vetoable Change, and get Vetoable Change Listeners, specifying types for the parameters.
676	This method declares a property with viewable, editable, and updatable set to true, with order 11. It returns a number representing the minValue.
106	This method creates a ClusterConnectionManager using a ClusterServersConfig and Config, initializes the configuration, creates a RedisClient for each node in the configuration, connects to the cluster nodes and extracts their partitions, adds master entries to the partitions based on the configuration, and monitors the cluster for any changes.
910	This method returns a string that contains the event, focus, time, last window, last binder, finished, got first window, event dispatching, time to switch, was frozen, focus paused, and curFocus.
375	This method attempts to disable a network with the given netId by calling the mService.disableNetwork() method and passing in the netId. If there is a RemoteException, it is rethrown from the SystemServer.
876	This method creates a new OperationTimeoutException object depending on whether a response has been received or not. It takes in two parameters, pollCount and pollTimeoutMs, and uses them to generate an exception message. It also includes information about the number of backups expected and completed.
959	This method shows the Sign Up Fragment, replacing the container with the new Fragment. The currentFragment is set to FRAGMENT_SIGNUP, the title of the toolbar is set to the title of the 'register Xabber account' and the barPainter is set to 'liteGrey'.
143	This method rebuilds the list of activities that can handle an intent. It first checks if the mBaseResolveList has been initialized and sets mCurrentResolveList to that if it has. If it hasn't, mCurrentResolveList is set to the results of a query to the PackageManager. Next, the list is pruned to remove activities that don't have permission, and some sorting and filtering is done to group activities with similar labels. Finally, the initial intents are added to the list.
602	This method returns an integer which represents the resource ID of the overlay background.
339	This method checks if the user has a trust relationship and if so, it will finish the process. Otherwise, it checks the security mode and shows the security screen accordingly. If authenticated, it will either finish the process or show the security screen depending on the current security selection and if lock screen is disabled for the current user. Lastly, if finish is true, the security callback will be finished.
924	This method processes messages and performs different tasks depending on the message type. If the message type is CMD_TETHER_STATE_CHANGE, it checks if the state change is active and transitions to mTetheredState if it is. If the message type is CMD_TETHER_NOTIFICATION_TIMED_OUT, it logs a failure to get tether update and transitions to mSoftApStartedState before sending a CMD_STOP_AP message at the front of the queue. For all other message types, it defers the message until it is handled.
296	getMediaProperties is a native method that takes a String file as its argument. It throws four exceptions: IllegalArgumentException, IllegalStateException, RuntimeException, and Exception.
816	This method initializes the context, sets mEnabled to ENABLE_CONTACT_SCORER, and sets the global setting to 0.
597	This method is used for pre-training a neural network. It takes an input INDArray and checks if the layer wise configuration is set to pre-train. It then calculates the mini-batch size and creates a layer input variable. For each layer, it pre-processes the input if needed, then logs the information about the training, including the number of examples, and calls the fit method for the current layer.
338	This method reads from a ByteBuffer and checks whether the required data is present in the buffer in order to read the base version, commit status, commit version, unique future ID, group lock key, invalidation status, recovery writes data, synchronization commit status, synchronization rollback status, thread ID, transaction size, and system status. If the data is present, it is stored for use.
885	This method implements a rollback feature for a release process. It prints out the number of release steps that are being rolled back, and then goes through each step, checking if it has a rollback operation. If so, it performs the rollback operation, otherwise it prints out a message saying there is no rollback operation.
300	This method enables the UserManager to get a list of enabled profiles for the user, and for each profile, it sets an exact alarm to lock the profile based on the lock timeout. The alarm is set using the AlarmManager, and it allows the alarm to fire while the device is idle.
677	This method creates a Pattern object based on a given string. The pattern is set to be case insensitive. If the given string is null, an IllegalArgumentException is thrown.
803	This method calculates the sketch path by attempting to get the user's directory, the code source location of the PApplet class, and the scheme specific path of the jar file. If the platform is MacOSX, the absolute path of the containing folder is determined. Otherwise, the canonical path of the folder is determined.
521	This method is used to GET information from the file system. It takes in parameters related to the user, path, offset, length, filter, doAs, override, blockSize, permission, and replication. It then throws an UnsupportedOperationException if the GetOpParam is not found, and makes the path absolute. It then begins a switch statement based on the value of the GetOpParam and executes the appropriate command. This method is used to retrieve information from the file system.
285	This method provides a way to create an MBean, given the className, name, loaderName, params and signature. The params and signature are converted to empty arrays if they are null. A delegate is found for the new object and authorized if necessary, and the MBean is created. Finally, an audit log is created which records any errors encountered.
809	This method continuously checks if all ReplayOutputBroker objects have finished executing. It uses an iterator to loop through all values in the outputBrokerMap and checks if they have not finished executing. If they have not, the loop is exited and the method ends. If they have finished, the loop continues and the method waits for the specified amount of time before looping again.
546	This method returns a boolean value which indicates whether or not the ViewNode is blocked from accessing assist features. The return value is based on comparing the mFlags value with the ViewNode.FLAGS_ASSIST_BLOCKED value.
616	This method utilizes the metadataDao.persist() method to store the given Metadata object.
791	This method creates a PythonSdkComboBox object. The ComboBox has a custom renderer, and an ActionListener is added to it. The ActionListener triggers a ProjectJdksEditor object to be created, which allows the user to select a new SDK. The list of SDKs is then updated based on the user's selection.
347	This method takes in a parameter of type ResolvedJavaType, and returns a value of type JavaType.
522	: This method generates a change log by taking a snapshot of the database and comparing it to a reference database. It takes in a CatalogAndSchema, DiffToChangeLog, PrintStream, and any number of Class objects extending DatabaseObject as parameters. A HashSet is created from the Class objects, which are then used to create SnapshotControl and CompareControl objects. A DatabaseSnapshot is then created and compared to the reference database to generate a DiffResult, which is written to the PrintStream via the changeLogWriter.
342	This method takes a dataset, checks that the pre-processor has been fit, subtracts the minRange, divides by the difference between maxRange and minRange plus the Nd4j threshold, multiplies by the maxMinusMin and adds the min.
328	This method verifies staged groups by retrieving all live groups, setting properties for each group, and updating the group's class name ID if necessary.
469	This method overrides the ortho() method to set the viewport of the camera in a specific way. This involves setting the parameters of the viewport to be negative width divided by two, positive width divided by two, positive height divided by two, negative height divided by two, cameraNear, and cameraFar.
273	This method evaluates the template type of a given node, given a name resolver. It first evaluates the passed in parameter and checks if it is a templatized type. If it is, it evaluates the index of the template type, and if the index is within the bounds of the template types, it returns the template type at that index. If not, it reports a warning and returns an unknown type.
86	This method creates a JSONObject which contains the additional info, company ID, class PK, class name, client IP, client host, message, server port, server name, session ID, timestamp, event type, user ID, and user name.
539	This method is used to update the application mode based on the router.getAppMode() function. Depending on the app mode, the PREPARE_DISTANCE, PREPARE_DISTANCE_END, TURN_IN_DISTANCE, TURN_IN_DISTANCE_END, TURN_DISTANCE and DEFAULT_SPEED can be set to different values.
603	This method takes a platform version as an integer and returns a string representing the time associated with that version. If the platform version is greater than M, the method returns "6:00". For platform versions less than M, the method returns different times depending on what version the platform is.
879	This method creates a StringBuilder object and iterates through the expressions array to append each expression's text to the builder. The builder is then returned as a string.
561	This method overrides the onEvent() callback of the RuntimeStatusEvent class. When the event is detected to have failed, the workspaceId is retrieved and the probeScheduler is canceled. A write lock is obtained to remove the runtime and status from the runtimes and statuses collections. If the status is not null, the publishWorkspaceStatusEvent() is called to set the workspaceId to stopped, the status parameter to the status parameter and an error message containing the event's error is set. The setAbnormalStopAttributes() method is then called to set the workspaceId and the event's error.
855	This method checks the equality of two objects by first verifying that the two objects are of the same type, and then comparing the instanceName of each object. If the instanceName of the two objects are equal, then the objects are equal, and the method returns true.
251	This method creates a BuilderRemoteViews instance, sets it with the appropriate text, icon, and content description, and then processes the legacy action, before returning the view.
810	This method indexes a given set of lines. It first prints out the line count, the current amount of characters, and the time taken for the indexing operation. It then commits the indexing process after every 100,000 lines. It then tokenizes each line and indexes each sentence.
380	This method modifies text by first deleting text within a valid range, then inserting new text at a specific location and setting the new cursor position to a valid position.
140	This method handles the Message object by providing a switch case for each Message.what value. Depending on the value, the method performs a specific action, such as queueing the next signal strength poll, handling the AsyncResult object, setting the power state to desired, updating the SPN display, or reloading the MDN.
29	This method creates a list of FavouritePoint objects from a list of GPXUtilities.WptPt objects. It iterates through the list of WptPt objects and creates a FavouritePoint object for each one. The FavouritePoint object includes the latitude, longitude, name and category of the WptPt object, as well as a description if one exists. The FavouritePoint objects are then added to the list of FavouritePoint objects and returned.
717	This method prepares the source for an ExoPlayer and checks that it is a top-level source. It then creates a ComponentListener and prepares the child source for the DUMMY_CONTENT_MEDIA_PERIOD_ID. Lastly, it posts a Runnable in the mainHandler to attach the player to the adsLoader with the componentListener and the adUiViewGroup.
821	This method attempts to establish a connection with a target by first acquiring a lock, then attempting to connect. If a connection already exists, the method returns, and if an Exception is thrown, it is logged. Once the method is complete, the connectionsInProgress is updated.
45	This method uses a synchronized version of the SurfaceHolder object to set the surface of the RenderScript to null and 0,0 when it is destroyed.
213	This method creates a list of InputSplits based on a given Configuration, the number of splits required, and the total size in bytes. It calculates the average number of bytes per split and creates a CopyListingFileStatus and Text object. The method then reads from the ListingFilePath and adds FileSplit objects to the splits list when the current split size plus the source file status length is larger than the number of bytes per split and when the last position is not zero. Finally, a split is added if the last position is larger than the last split start.
835	This method adds an alert receiver to a stream. It checks the permission to edit the stream and validates the type of the alert receiver. It then checks if the stream already has an alert receiver with the specified type and entity, and if not, adds the alert receiver to the stream.
320	This method retrieves a target APK from a RuleContext and creates an instrumentation APK from the RuleContext. It then sets up a NestedSet of the target and instrumentation APKs, then creates a RuleConfiguredTargetBuilder from the RuleContext. Finally, it adds the RunfilesProvider and AndroidInstrumentationInfo to the ConfiguredTarget and builds it.
528	This method is responsible for adding a service to the list of pending services. It takes in an integer status and a BluetoothGattService object as parameters. It sets the instance ID of the service to the one in the BluetoothGattService and then goes through the list of characteristics and descriptors to set their IDs as well. It then adds them to the list of services and calls the onServiceAdded() callback.
939	This method adds a DataSegment to the segments set. If it is successfully added, the current size is increased by the size of the segment.
444	This method creates an intent with an action of USER_PRESENT and a ComponentName and adds flags in order to send a broadcast when an error occurs. The flags are set to ensure that the broadcast is only registered before boot and that it is sent as a foreground broadcast.
860	This method attempts to execute a new instance of an object by using ForeignAccess to send execute, TruffleObject to receive, and toGuestValues to execute an array of arguments. If any of the exceptions such as UnsupportedTypeException, ArityException, or UnsupportedMessageException is thrown, CompilerDirectives is used to transfer to the interpreter and handle the exception, with the exception of UnsupportedMessageException which returns polyglot.newInstanceUnsupported of the receiver.
954	This method checks whether the background location needs to be initialized and if so, it first checks if the Google Play Services are available. If they are, it then checks whether the background location is enabled. If not, it will display a message and log an event, but with a different flag set to false.
814	This method enforces the calling package to have the permission WRITE_SMS and checks the AppOpsManager for a mode of ALLOWED. It then uses the getServiceGuarded() method to add a multimedia message draft with the provided Uri contentUri.
267	This method writes values such as the ID of the source node, the window ID, the parent node ID, the label for ID, labeled by ID, connection ID, and child node IDs to a given Parcel. It also writes the bounds for both the parent and screen, the actions, movement granularities, boolean properties, package name, class name, text, content description, view ID resource name, and text selection start and end. Finally, it recycles the values.
497	This method updates an AppWidgetId with a RemoteViews object. If the AppWidgetId is valid and not a zombie, the views object of the AppWidgetId is either set to the RemoteViews object or merged with one if it is a partial update and the views object is not null. The AppWidgetId's host callbacks object is then called to update the AppWidgetId with the RemoteViews object.
593	This method retrieves the most recent task from the stack task list, optionally including freeform tasks. It does this by looping through the stack tasks list from the most recent task to the oldest one, returning a task if it is not a freeform task, or if the includeFreeformTasks parameter is set to true. If no such task is found, it returns null.
820	This method starts with a log statement and then checks if the storage is low. If not, it then gathers a set of packages that need to be optimized. It then creates a new thread and iterates through the packages, optimizing them with the true flag. If at any point the idle time is no longer true, it will schedule the background dex opt service again. Finally, it finishes the job and returns true.
356	This method creates a new AnnotationRepositoryConfigurationSource instance using StandardAnnotationMetadata, getAnnotation(), the resourceLoader, and the environment. It then overrides the getBasePackages() method to return the base packages retrieved from the AbstractRepositoryConfigurationSourceSupport.
516	This method begins by adding a prefix to the given AMD64Address dst. It then emits a byte of 0xF7 and then calls the emitOperandHelper method with the arguments 0 and dst. Lastly, it emits an int of imm32.
84	This method utilizes a RequestMapping annotation to specify the request type and a ResponseBody annotation to indicate the response type. The method checks if the request is available and returns a ResponseEntity object of Object type with an OK status if the request is available or a NOT_FOUND status if it is not.
18	This method creates an AlertDialog that allows the user to select a GPX file from a list of available files. The method begins by constructing a list adapter that sets an icon for each file, followed by the selection of the previously selected GPX file. A dialog is then created with the title "Select GPX" and a positive button to confirm the selection which, depending on the selection, will either process the selection or load the file in a different thread.
817	This method retrieves a Class object from a classCache given a String name. If the String name is null it will return null. The method is synchronized to ensure only one thread is accessing the classCache at a time.
958	This method revokes the mode flags based on the given input. It checks if the given flag is persistable and sets the global mode flags accordingly. It also removes read and write permissions from the owners, if any, depending on the includingOwners flag. Finally, it updates the mode flags and returns the status of the persisted mode flags.
577	The ShapeState method creates a new ShapeState object from an existing ShapeState object if one is provided. The new object will contain all of the same properties as the original, including mThemeAttrs, mPaint, mShape, mTint, mTintMode, mPadding, mIntrinsicWidth, mIntrinsicHeight, mAlpha, and mShaderFactory. If no existing ShapeState object is provided, then a new Paint object is created.
235	: This method draws a sprite batch with a specified alpha modulation. It retrieves the color of the sprite batch and multiplies the alpha value by the given alpha modulation, sets the color with the new alpha value, draws the sprite batch, and then sets the color back to its original alpha value.
166	This method removes a route for a given JID (node) from a routes Hashtable. It first acquires a write lock before attempting to remove the route. If the route is found within a resource RoutableChannelHandler, then it will remove it. If the route is found within a Hashtable, it will also be removed before checking if the related Hashtable is empty, and if so, removing it as well. In addition, if the nodeJID and resourceJID are both empty, it will also remove the route.
986	This method verifies the roles of a user by loading the list of known roles and comparing it to the list of roles provided. If any of the roles are unknown, a warning is printed out to the terminal in the ROOT locale, informing the user to add them to the roles file.
785	This method returns the UUID of the FileShortcut object as its display name.
685	This method checks if a trigger is active in a tile entity. It first checks if the tile is an ITankContainer and then checks the parameters to see if a searched liquid id was specified. It then checks the ILiquidTanks for the amount of liquid and checks for null values as well. Depending on the state it will either return true or false.
745	This method sets the mode of the screen brightness to either automatic or manual, depending on the boolean value 'automatic'. If manual mode is chosen, the brightness is adjusted to the value 'value' plus the minimum backlight. If the boolean value 'tracking' is false, the settings are saved asynchronously in the content resolver.
69	This method returns an animation object by taking the id of the animation as an input parameter and setting the second parameter as false.
149	This method checks if the size of the given unknown fields is greater than 0 and, if so, prepares for new unknown fields, writes the bytes to the unknown fields writer and returns the builder.
544	This method sets AudioAttributes and throws an IllegalArgumentException if attributes are set to null. It stores the usage and bypass interruption policy values from the AudioAttributes and obtains a Parcel which is then written to with the AudioAttributes.FLATTEN_TAGS parameter. Finally, the setParameter method is called and the Parcel is recycled.
249	This method resolves the type of an expression by first checking to see if the expression has a declared inferred type in its node metadata. If the expression has such a type, it is returned. Otherwise, the method checks to see if the expression has an inferred type in its node metadata. If so, the inferred type is returned, otherwise the super method is used to resolve the type.
168	This method creates a SlowPathEvent3 object, taking a SpecializationNode source, a String reason, a Frame frame, and three Objects (o1, o2, o3) as parameters. It uses the super class constructor to initialize the source, reason, and frame, and assigns the three Objects to their respective class variables.
819	This method adds references to a given element at a given offset. It first checks for any references associated with the element, and if any are found, then it checks if the offset falls within any of the given reference ranges. If so, it adds the reference to the outReferences collection.
517	This method uses the callOnClick() method of the mHeader object to animate the toggleQSExpansion of the header.
402	This synchronized method retrieves the ID of the entry that precedes the entry with the specified ID. If the entry ID is equal to 0, the method returns -1. Otherwise, the method looks through both the _pastEntries and _futureEntries arrays, searching for the specified entry ID. If the ID is found, the method returns the ID of the preceding entry. If the entry is the first in either array, the method returns 0. If the entry is not found in either array, the method returns -1.
334	This method creates a RecurrenceSet by receiving a cursor containing the strings rruleStr, rdateStr, exruleStr, and exdateStr from its columns. It then uses these strings to initialize the RecurrenceSet.
132	This method is used to get the bone weights and indices buffer for a given mesh structure. It starts by setting the bonesGroups array to 0 and then creates a FloatBuffer and ByteBuffer for the weights and indices data. It then checks if the pDvert is not null and if so, it iterates through the dverts and assigns the weights and indices data to the vertex indices. If the pDvert is null, it assigns a weight of 1.0f and an index of 0 to all the vertex indices. Finally, the bonesGroups array is set to the maximum value and two VertexBuffer are returned.
575	This method is used to assign a given value to a specific field. Depending on the type of field, this method will either assign the value directly to the year field or to a sub-date field such as quarter, month, week, or ordinal day. If the field is not a date field, an IllegalStateException is thrown.
579	This method registers path variables, patches thread trackers for unit testing, registers Kotlin JavaScript and Common Kotlin libraries in the Jar file, adds a Kotlin standard library debug filter, and excludes Kotlin plugin updates from the Update Checker. It also adds a document listener to detect changes to Kotlin files and calls the Kotlin plugin updater when a Kotlin file is edited, passing the virtual file as an argument. Finally, it registers a Kotlin Todo Searcher with the Index Pattern Search service.
856	This method retrieves the voicemail number for a given subscriber ID. It first attempts to get the subscriber information through the getSubscriberInfo method. If the info is not available, it will return null. If the info is available, it will use the getVoiceMailNumberForSubscriber method, along with the mContext.getOpPackageName, to return the voicemail number. If any remote exceptions or null pointer exceptions occur, it will return null.
830	This method retrieves a Bitmap with a specified size, allowing for the size to be ignored if necessary. It starts by checking the size parameters, and if they are not both 0 (or if ignoreSize is true), then it checks if the requested size is different from the previous request. If it is different, then the existing bitmap is recycled and a new one is requested with the new size parameters. The BitmapFactory.Options are set, and an inSampleSize coefficient is determined if the requested size is different than the real size. The bitmap is then decoded and scaled to the correct size if necessary, and the last request size is stored.
896	This method stops the running process and all transports that are instances of Lifecycle. It first checks if the process is running, and if so, sets the running variable to false and stops all running transports.
766	This method returns an Optional Path object that contains the file for the CA Certificates. If the file is null, then an empty Optional object is returned.
640	This method creates a security token in order to protect the element passed in. It finds the LocalName, RequestedSecurityToken, Requested AttachedReference, Requested UnattachedReference, RequestedProofToken, Lifetime, Entropy, TokenType, and KeySize elements. It then attempts to find the ID of the element and creates a security token with the ID and the other elements. It also sets the issuer address, token type, and secret. Finally, it returns the new security token.
377	This method stops tethering by first checking and setting the connectivity instance, then retrieving the interface configuration of the tether interface name. If it is not null, the link address is set to 0.0.0.0 and the interface is configured. Finally, an attempt is made to untether the tether interface name. If it fails, an error is logged.
418	This method checks to see if the matrix is an identity matrix. It does this by checking each of the entries and returning false if any of them don't equal either 1 or 0, including the m22 entry which must be equal to 1. If all entries are 1 or 0, it will return true.
648	This method takes a string of functions and a single function as parameters. It first splits up the functions string into an array of strings. It then checks each string in the array to see if it matches the single function parameter. If so, it sets the value of that string in the array to null. If the resulting array only has one element and it is null, the method returns the constant UsbManager.USB_FUNCTION_NONE. Otherwise, it creates a new string builder and adds all non-null strings in the array, separated by commas, to the builder. Finally, it returns the resulting string.
828	This method is used to clean up a user with a given userId. It first logs the userId and then attempts to execute a volume command with the user_stopped parameter. If an exception is thrown then it is ignored. Afterwards, the method synchronizes with the mLock object and removes the userId from the mSystemUnlockedUsers array.
321	This method creates an AlertDialog for the user to add a channel to GCM. The user is prompted to enter a channel name, and if the GCM registration ID is not set, the user is advised to register the ID and try again. Once the channel name is inputted, the pubnub method enablePushNotificationsOnChannel is called, and a callback is set up to notify the user of the success or failure of the add operation.
233	This method adds a DelayedActionComponent to an EntityRef. It first checks to see if the component is already queued for delayed action and throws an error if so. It then calculates a scheduleTime based on the current game time and the delay specified by the AddDelayedActionEvent event. Finally, it adds the new DelayedActionComponent to the entity.
202	This method sets the data for the banner by providing a local image size, scale type, and resource ID's. If no local image size is provided, the method will use a default size. If no scale type is provided, the method will use the existing scale type. Finally, the method creates a list of views and adds the resource ID's to the list, then sets the data.
702	This method attempts to load a list of ActionCommands from a file. If the file exists, the method uses an ObjectInputStream to read the object. If a Throwable is thrown during the read, the file is marked as corrupted and deleted. Otherwise, a new ArrayList is returned.
533	This method takes in a field name as a string and returns a DurationFields object based on the field name. The field name is converted to lower case before being compared with the different constants for various duration fields. If the field name provided does not match any of the constants, an UnsupportedTemporalUnitException is thrown.
388	This method checks if the user has clicked on one of the checkboxes cbFilter, cbUsed, and cbInternet and applies the filter if they have. If the checkbox cbPermission is clicked, the PrivacyManager.setSetting is called to set the boolean value and the selectRestriction method is called with the selected item position from the spRestriction.
504	This method determines the registered service for a given event by first locating the service in the service registry. It then locates the authentication event in the request context and enforces access strategy policies for the registered service and the principal, while also setting the value of false.
728	This method creates an ArtifactBasicMetadata instance from a ModelContainer parameter by looping through its properties. It sets the groupId, artifactId, version, classifier, scope, type, and optional values of the ArtifactBasicMetadata instance. If the scope value is null, it is set to runtime. The ModelDataSource is initialized with the ModelContainer properties, and ArtifactBasicMetadata instances for exclusions are created and added to a list. This list is then set to the exclusions of the ArtifactBasicMetadata instance.
30	This method returns a Queue of type T depending on the batchSize. If the batchSize is larger than the maximum integer value, a ConcurrentLinkedQueue is returned. If the batchSize is equal to 1, an ArrayBlockingQueue is returned. Otherwise, a RingBuffer with a single producer and sequenced queue is returned.
458	This method displays a pop-up menu when given a component, mouse event, and JPopupMenu object. It logs the debug information for the invoker, and packs, shows, makes visible, and requests focus in the window for the menu.
82	This method updates the get and put statistics. If the put succeeds, the cache puts are increased by 1 and the put time is added. If a value is retrieved, the cache misses (if the old value was null) or hits are increased accordingly, and the get time is added.
952	This method creates a RemoteViews object, which is used to create custom views for an app. The method takes an Action object as a parameter and checks if the action intent is null. If so, it sets the layout resource to the Action Tombstone Layout, otherwise it sets it to the Action Layout. It then sets the text, compound drawables, content description, and pending intent for the view. Finally, it processes the legacy action and returns the RemoteViews object.
978	This method decodes a sentence from a Channel and SocketAddress, and creates a Position object with the details. It starts by determining if the sentence is simple or not. If it is simple, it extracts the id, location, and status. It then creates a Parser object to parse the status, and sets the appropriate values in the Position object. If it is not simple, it extracts the id and location, and then creates a Parser object to parse the status. It then sets the appropriate values in the Position object. Finally, the method returns the Position object.
348	This method handles incoming messages, with two possible cases. If the message is MSG_WRITE_STATUS, the method synchronizes with the mAuthorities object and calls writeStatusLocked(). If the message is MSG_WRITE_STATISTICS, the method synchronizes with the mAuthorities object and calls writeStatisticsLocked().
764	This method sets disabled flags for a view, and checks for force. It also sets visibility for the back button, home button, recent button, and app shelf depending on the disabled flags. If the slippery when disabled flag is set, it will also set slippery. Finally, a transition listener is added if it does not already exist.
637	The pinMode method checks to ensure a valid pin is present and then writes to the relevant file. Depending on the mode specified, the relevant output is written and any pullup or pulldown resistors are set. If any errors occur, an appropriate message is printed.
247	This method computes the bitmap size of a NinePatch object by taking into consideration the target density, optical insets, padding, height, width, and outline insets. It also scales these values appropriately to ensure they are in the correct format.
949	The CompassListener method is initialized with the heading set to 0 and the timestamp set to 0. The status is set to CompassListener.STOPPED.
365	This method updates the presentation for a given DBCResultSet. It first checks if the control is disposed. If not, it checks if the result set is an instance of StatResultSet. If it is, it sets the available presentations and active presentation to empty list and StatisticsPresentation respectively. If not, it creates an IResultSetContext object and gets the available presentations from the ResultSetPresentationRegistry. It then checks if the available presentations is empty or not, if not it checks for the active presentation and if not found, sets the default presentation from the preference store. Finally, if the presentation has changed and the presentation switch toolbar is not null, it updates the presentation in the toolbar.
606	The onPlaybackStateChanged() method is a public method that takes a parameter of type PlaybackState that can be null.
424	This method removes a fragment from an activity by obtaining the FragmentManager of the activity, finding the fragment associated with the FRAGMENT_TAG, and then commiting the transaction to remove the fragment, allowing the state to be lost in the process.
793	This method takes in four parameters (name, type, isDefaulted, and binding) and assigns them to the corresponding class variables. If the binding is null, it is set to a DefaultBinding with an IdentityConverter, and the type's isLob value is also taken into consideration.
76	This method takes a bean and a boolean value as parameters and uses the BeanUtil class to fill the bean with a given map. The boolean value determines whether the camel case is used or not. Additionally, the method includes the parameter false. The filled bean is then returned.
631	This method deserializes a JsonObject into a BaseComponent by checking for fields such as color, bold, italic, underlined, strikethrough, obfuscated, extra, clickEvent, and hoverEvent. If any of these fields are present, the appropriate values are set for the BaseComponent.
217	This method takes a Tuple2<Writable, Iterable<DataVecRecord>> as an input and creates two Lists, one containing Writable objects and the other containing List of Writable objects. It then iterates through the DataVecRecord objects in the Iterable and assigns each one to the appropriate List. If either List is null, an IllegalStateException is thrown along with an error message specifying which input index caused the null record. Finally, the Lists are combined into a DataVecRecords object and returned.
201	This method populates an entity form by looping through the properties of a ClassMetadata object and populating the form with data from a DynamicResultSet. If the CollectionMetadata is an instance of BasicCollectionMetadata, it will add the appropriate action groups to the list grid. If the EntityForm has no actions, the save action is added. Lastly, the delete action is added if allowed and the visibility of the form is set based on a 'showIfFieldEquals' field.
560	This method adds an error to the Dropbox. It starts by checking the process to determine the prefix for the dropbox tag. It then checks the dropbox to see if the tag is enabled. The method then builds a string with the process, flags, packages, activity, parent process, and subject. Build, duration, and other information is added to the string before the logcat is read and added to the string. The string is then added to the dropbox. Finally, a thread is created and run depending on the process.
905	This method overrides the write() method in the AtmosphereResponse class and takes a string as a parameter. It then converts the string into bytes using the character encoding specified in the AtmosphereResponse object and calls the write() method with this byte array as a parameter.
513	This method creates a JavaPropertyDescriptor object and initializes it with the given parameters. It then sets the setterProjectedOut property, and if there is a compileTimeInitializer, it is set as well. Finally, the type of the JavaPropertyDescriptor is set and the method returns the enhanced object.
135	This method returns a new instance of Property2 when called.
260	This method is an abstract void visit function which takes a single parameter of type T and throws an exception of type E.
50	This method creates a RemoteViews object with a specific layout, sets the image view resource, draws parameters, creates a pending intent, and sets the content description of the action.
692	This method creates a TaskQuery object and adds various criteria to the query based on the provided TaskQueryRequest object. These criteria include task name, task priority, assignee, owner, delegation state, candidate user, involved user, candidate group, process instance ID, process instance business key, execution ID, created before, created on, created after, task definition key, due date, due before, due after, active status, task variables, and process variables. Finally, the method returns a DataResponse object.
370	This method attempts to authorize a given username and principal. It first checks the authorization policies and if it finds a match, it attempts to load the user and return true. If the user is not found, it checks if the property xmpp.auth.autoadd is set to true and creates a new user with a random 8 character string if the user provider is not read-only and the name or email is not required. If the user already exists, it returns false.
698	This method returns a boolean value of false when a ConfigTestElement is passed as a parameter.
295	This method creates a call site for the receiver of a GroovyObject. If the meta class of the receiver is not of type MetaClassImpl, then the call site will simply return the meta class's property. Otherwise, if the meta class is of type MetaClassImpl and there is an effective get meta property, the call site will return the effective get property if there is a Groovy category in any thread. If not, the call site will return the meta class's property. The call site is then saved in an array.
804	This method checks if it is possible to add more managed profiles for a given user. It begins by verifying that the device has the necessary features and that the user has the required permissions. It then checks if the maximum number of managed profiles has been reached and if the user is eligible to have a profile. Finally, it compares the number of users after removing a profile (if allowed) to the maximum number of users supported by the system.
417	This method replays a log file in order to update the index and physical storage. It begins by ensuring that the structural lock is held, and then checks the header of the log file. Next, it iterates through the instructions within the log file and performs the appropriate actions based on the instruction. Finally, it performs a sync on the physical storage and index, zeroes out the header of the log file and deletes the file.
376	This method checks if a given byte opCode is a control byte by comparing it to the binary value 0000 1000 (0x08). If the result of the comparison is not equal to zero, the method returns true indicating that the given byte is a control byte.
239	This method establishes a connection to the data source and then creates a statement based on the QueryBuilder query. Results are read from the ResultSet and an InputStream is returned, wrapped by a ClosingInputStreamWrapper. If the ResultSet is empty, the connection is closed.
292	This method takes a list of DetailAST objects and a parameter name as arguments. It iterates through the list to check if the given parameter name matches any of the DetailAST objects. If a match is found, it removes the object from the list and returns true. If no match is found, it returns false.
8	This method schedules a reminder for a deck. It retrieves the deck's configuration and checks if the reminder is enabled. It then sets up an alarm to be triggered at the specified time with an intent pointing to the ReminderReceiver.
645	This method creates a prompt for the user to select a folder. Depending on the platform, either a FileDialog or JFileChooser will be used to select a file. If the platform is Windows and the sketch is in OpenGL mode, the sketch will be hidden. The current directory is set to the default selection if specified. The selected file is then passed to the selectCallback() method.
938	This method returns an IDrawerItem based on the given position. First, it checks if the position is out of bounds; if so, it returns null. If the position is within the bounds, the method checks if it is in the range of the header items, the drawer items, or the footer items. If it is, the item is returned from the corresponding list.
123	This method sets the audio attributes for a given object, and throws an IllegalArgumentException if the attributes are set to null. It first retrieves the usage from the attributes, and then checks if the all flags include the AudioAttributes.FLAG_BYPASS_INTERRUPTION_POLICY flag. It then obtains a Parcel and writes the attributes to it, and sets the parameters for audio attributes before finally recycling the Parcel.
36	This method creates a ParserInterpreter object, which contains the filename, a list of token display names, a list of rule names, a deserialized ATN, and a TokenStream. The method throws an exception if the grammar is a lexer.
223	This method is used to add a repository for a given portlet. It first increments the repository ID, and then adds a DLFolder with the incremented ID. Next, it creates a connection and prepares a statement to insert a new repository into the database. The repository is populated with the given parameters and the folder ID. Finally, the method returns the repository ID.
704	This method attempts to retrieve the data network type for a given subscriber using the ITelephony interface, while also providing the package name of the operation. If the ITelephony interface is not available, the method will return the NETWORK_TYPE_UNKNOWN. Any RemoteException or NullPointerException exceptions encountered during the process will also result in the NETWORK_TYPE_UNKNOWN return value.
808	This method adapts a QuoineProduct object to a Ticker object by setting the ask price, bid price, last traded price, and volume of the past 24 hours of the QuoineProduct. The CurrencyPair is also set and the Ticker is returned using the Builder.
753	This method stops all running tasks. It first calls the shutdown() method for each entry in the exec Map to stop the tasks gracefully. It then iterates through the runningItems list and attempts to stop each task gracefully if the task can be restored on restart. If not, the task is stopped without grace. After this, the shutdownNow() method is called on each entry in the exec Map to force-stop any tasks that were not stopped gracefully.
188	This method calculates the wrap position of a given text by first creating a TIntDoubleHashMap, offset2Weight, which stores the offset and corresponding weight of symbols that meet the specified conditions. It then chooses the offset of the highest weight within the given range by using the chooseOffset method and returns that value, unless the allowToBeyondMaxPreferredOffset is set to false in which case it returns the maxPreferredOffset. If no offset is found within the given range, it returns the endOffset.
329	This method retrieves a list of possible outcomes for a given program ID. It first gets the program object, and then the outcomes concept associated with this program. If the outcomes concept has answers, these are iterated over, and the answer concepts associated with the answers are added to the list of possible outcomes. If there are set members, these are added directly to the list of possible outcomes.
299	This method returns a JComponent object that is the focusable component of the myNameSuggestionsField.
371	This method sets a dynamic name mapping by assigning a given NameMapping to the nameMapping field. If the given NameMapping is null, the internalNameMapping field is set instead. If the given NameMapping is not null, a new ChainedNameMapping is created using the given NameMapping and the internalNameMapping field.
279	This method sends an input event to the current channel if it exists. It creates an ImeInputEventSender object and adds the event and its sequence number to a pending event map. A message is then sent to the looper with the event, the sequence number, and the event, and it is set to asynchronous. The method then returns a dispatch in progress status.
180	The get() method is used to retrieve a float value from mHorizontals depending on the value of the offset. If mHorizontals is null, or if the offset is outside the range of valid values, the getPrimaryHorizontal() method is used instead.
467	This method is a public abstract void procedure with a boolean argument called report.
700	This method gets the File object associated with the given exampleName. It first initializes a File object with the "drools-examples-api" folder and traverses up the parent folder to search for the exampleName folder. If the exampleName folder is found, then it checks if the target folder exists. If it does exist, then it iterates through the list of files in the target folder and returns the File object that starts with the exampleName and does not end with "-sources.jar", "-tests.jar", or "-javadoc.jar". If the target folder does not exist, then it throws a runtime exception.
3	This method instantiates a VoiceRouter object with parameters of router, settings, and player. Empty is assigned a Struct object with an empty String in its constructor, and voiceMessageListeners is assigned a ConcurrentHashMap which contains a VoiceMessageListener as its key and Integer as its value.
659	This method retrieves a value from an InternalWorkingMemory and returns a Byte object. It does this by taking in an object and using a getByteValue method.
244	This method creates a view for an AppWidget, setting the OnClickHandler, AppWidget and updating it with the RemoteViews received from the AppWidget service. It stores the view in synchronized mViews and returns the view.
946	This method creates a MdnsUrlDeviceDiscoverer, which is responsible for discovering and reporting services that can be accessed through a URL. It sets a state called mState to STOPPED and creates a DiscoverResolver, which will look for services with a specific MDNS_SERVICE_TYPE. When the services are found, the URL is logged, and if "public" is set to false, a title and description can be set. The URL is then reported if it is a network URL.
454	This method retrieves a collection of shared groups associated with a particular user name. It starts by constructing a key based on the user name. The key is then used to get a list of group names from groupMetaCache. If the list of group names is not present, the method synchronizes the user name with a suffix and then attempts to get the list of group names again. If the list of group names is still not present, the provider is used to get the list of shared group names associated with the user name. The list of group names is then stored in the groupMetaCache, and a new GroupCollection is returned.
553	This method stores steps records in a database by acquiring a DBHandler, creating a PebbleHealthSampleProvider, and creating a PebbleHealthActivitySample for each steps record. The sample is then set to the provider and added to the sampleProvider.
610	This method creates a StrictModeFlash object using the given Display and SurfaceSession parameters. It gets the real metrics of the display and creates a new Surface of the given parameters. The surface is set to a layer multiplier of 101 and the position is set to 0,0. Finally, the mDrawNeeded boolean is set to true.
362	This method creates a BatteryMeterView by obtaining the typed arrays for the battery levels and color values, creating paints with various settings for the frame, battery, text, and warning text, and setting the critical level, button height fraction, and subpixel smoothing variables. It also sets the color of the frame, charge, and bolt and loads the bolt points from the resources.
419	This method adds a task to a task queue and wakes up a selector if the selectNow flag is not set.
585	This method takes a Context and Date parameter, and checks if the Date parameter is null. If the Date parameter is not null, the method uses the DateFormat.getMediumDateFormat(context) to format the Date parameter and returns the formatted Date as a String.
941	This method creates a factory that is enhanced by the enhanceHelper method. The parameters given to the enhance method are the class, an array of interfaces, a callback, and a class loader.
713	This method takes a VisualPosition as an input and returns a Point object. It calculates the y-coordinate by using the visibleLineNumberToYPosition function, and the x-coordinate by using the getTabbedTextWidth and textWidth functions. It also checks for soft wraps, and adjusts the x-coordinate and lineStartOffset variables accordingly.
526	This method is used to create a MapReplicationOperation object that stores data about a given partition. It first sets the partitionId and replicaIndex, then creates a SerializationService and two HashMaps to store the data. It then iterates through the entries in the container, and for each entry creates a set of RecordReplicationInfo objects that contain the key, value and statistics of the records.
455	This method overrides the public JavaExecHandleBuilder setIgnoreExitValue function and sets the ignoreExitValue to the boolean value specified. It then returns the JavaExecHandleBuilder instance.
381	This method is used to close system dialogs. It creates an intent with the action to close system dialogs and adds a flag for receivers to be registered only. The WindowManager is also used to close system dialogs with the provided reason. After this, all activities in the main stack are looped through and any which have a flag to finish on close system dialogs and do not have the flag to close system dialogs are finished. Finally, an intent is broadcasted with the user's ID and the desired flags.
888	This method adds a value of type T to a list with a default quantity of 1L.
411	This method performs the ZTRSM operation on two allocations, A and B, using Double2 alpha as the scalar value. It first validates the Uplo and Diag parameters, followed by the TRSM parameters. It then uses the mRS.nScriptIntrinsicBLAS_Z function to perform the ZTRSM operation on A and B.
130	This method is used to get the list of tables associated with a given project by making use of the Cube Management Service. It returns the list of tables with an option to clone the table descriptions if indicated with the "withExt" parameter. The entire process is logged with the time taken to complete it.
108	This method ensures that the specified directories exist and filters out any directories that do not exist. If a directory does not exist, it will attempt to create the directory and check if it was successful. If it was not successful, the remote service will be called to try and create the directory. If that fails, the directory will be filtered out and a warning will be logged.
480	This method retrieves an integer from the specified row and column. It first checks the bounds of the row and column, then checks the type of the column. If the type of the column is an integer or a categorical, then the method retrieves the integer from the specified row and column; otherwise, it retrieves a string from the specified row and column and converts it to an integer.
499	This method returns a JExpression generated from the parcelParam, which is obtained by invoking the getReadMethod() method on it. The parcelableClass.dotclass().invoke() is then cast to the return value, with the argument being the getClassLoader() method of the parcelableClass.dotclass().
99	This method creates a NoteSequence object to store and play a musical melody. It begins by setting up variables such as the instrument number, starting note, and velocity. It then adds an instrument change to the NoteSequence. It reads through the melody string and adds notes to the NoteSequence with the appropriate duration, pitch, and velocity, taking into account pitch deltas and other factors. When the method is finished, it will have added a certain number of notes to the NoteSequence.
571	This method creates an ArrayList of ServiceRecords and populates it with services found by searching through the ServiceMap and the users locked by the ActivityManager. It then checks the name provided and filters the list accordingly. If the list is not empty, it will loop through the list and call dumpService() for each item. Finally, it returns a boolean indicating whether or not the list was empty.
262	This method shows a menu by creating a MenuAdapter with a MenuBuilder, measuring the menu width, creating a MenuPopupWindow, setting the adapter and width, and setting the drop down gravity. Depending on the size of the menu, the method either sets the menu's position relative to a parent menu or relative to an offset. Lastly, the method adds a header title to the menu if desired.
540	This method sets up JIT profile support by creating a profile file, setting the permissions, and registering the app info with the VMRuntime, including a null argument.
773	This method gets the network type for a specified subscriber by accessing the ITelephony interface and the OpPackageName. If the ITelephony is not null, the network type is returned. If ITelephony is null or an exception occurs, NETWORK_TYPE_UNKNOWN is returned.
343	This method adds a recent expression to a given ID, ensuring that the list of recent expressions associated with the ID never exceeds a set maximum. The expression is first trimmed and then added to the list, with the most recent expression being added to the start of the list. Additionally, the expression also includes a mode setting.
401	This method overrides the load method and takes in two parameters - the serialized field metadata and a DrillBuf buffer. It creates a list of serialized fields and assigns the value count from the metadata. It then iterates through the fields and checks if there is an existing ValueVector, if not it creates one and stores it. If the value count is zero and the group count is also zero, it clears the vector, otherwise it loads the vector. Finally, it checks to ensure that the buffer offset is equal to the buffer capacity.
589	This method checks to check if an Iterable object is empty or not. It does this by determining if the Iterable value is null or if its iterator does not have any values in it.
710	This method attempts to register a driver with the DriverManager, then registers an MBeanServer with an ObjectName if it is not already registered. If an error occurs during either step, a warning message is logged. The method then returns true if it was successful, and false if it was not.
415	This method takes a type filter and a tags argument and returns a collection of items that pass the type filter. It creates a new collection of the filtered items and then iterates through the items from the retrieved tags, adding each item that passes the type filter to the filtered items collection.
192	This method checks if the input view is shown, and sets the flags for the showInputRequested method. It then tries to show the window, and if there is a BadTokenException, it sets the mWindowVisible and mWindowAdded booleans to false. It then checks if the input view is shown and sets the ImeWindowStatus accordingly. Finally, it checks if the input view is shown, and sends the result to the ResultReceiver.
310	This method retrieves a prefix string related to the current thread by analyzing the stack trace elements. If the class name of the element at the specified base depth starts with "kotlin.io." or "java.lang.Throwable", the element at the base depth plus four is taken instead. The prefix string is then constructed using the class name, method name and line number of the retrieved element.
981	This method sends a GET request to the given location and token to obtain a PagesResponse object. The method then checks to ensure that the task instance ID matches and, if so, stores the pages from the response. If the client is complete, the future is set to null. The pages are then added to the client callback and the request is marked as completed.
345	This method sets a dummy animation in the AppToken and sets the hasTransformation to true. The transformation is then cleared and the alpha is set to 1 if the AppToken is visible or 0 otherwise.
476	This method deletes bookmarks from the ContentResolver and WebIconDatabase based on a given whereClause. It first queries the ContentResolver for all bookmarks that match the whereClause and then checks if they are bookmarks or not. If they are bookmarks, it stores their IDs in a string buffer. If not, it releases the corresponding icon from the WebIconDatabase. Finally, it updates the bookmark visit and date values and deletes all bookmarks that do not match the whereClause.
916	This method sets up a tunnel from a local system to a remote database using a SSH connection. It checks for certain parameters such as the host port, SSH host, SSH port, authentication type, private key file path, connect timeout and database port and throws an exception if any of these parameters is not specified. It then sets up the tunnel using these parameters and returns a connection configuration object containing the local port, host name, host port and URL.
887	This method creates a BatteryMeterView in the given context, using attributes, styles and resources to set the frame color, battery color, text color and more. It also enables the percent display if the system setting is enabled, and sets up a warning string and critical level. The various paints used in the method are also set up, including the bolt paint, dark mode and light mode colors.
725	This method gets a list of installed applications by sorting an array of string keys and getting the continuation point from the last read. Then it checks if the list should contain uninstalled packages by checking the flags. After checking, the method generates the application info from settings or from the package parser and appends it to the list. If the index of the array is equal to the length, the last slice is set to true.
163	This method deploys a contract of type T using a web3j, a transaction manager, a gas price, a gas limit, a binary, an encoded constructor, and a value. It throws a RuntimeException or a TransactionException if unsuccessful.
923	This method is identical to the first method, but additionally calls the getOpPackageName() method before retrieving the CDMA ERI text for the given subscriber. If an exception is thrown, it will return a null value.
226	This method creates a defensive XMLInputFactory using the newInstance method.
874	This method provides a set of ChromeDevtoolsDomain objects for the user to access. It instantiates a Console, CSS, Debugger, DOM, DOMStorage, HeapProfiler, Inspector, Network, Page, Profiler, Runtime, and Worker. Additionally, if the API level is greater than or equal to the AndroidDOMConstants.MIN_API_LEVEL, then a Document is instantiated and provided as well. Finally, it returns the Iterable<ChromeDevtoolsDomain> that contains all of these objects.
268	This method creates a new LFWDataSetIterator object with a specified batch size, number of examples, image dimensions, number of labels, use subset flag, path label generator, training flag, train/test split ratio, image transform, normalization value, and random number generator.
919	The withSelectable method overrides the original method and sets the value of the selectable variable to a boolean. It returns the object (of type Item) in its original form.
947	This method updates the ranking of the entries in the ranking map and synchronizes them. It also sets the override group key, channel and snooze criteria for the entries and then it calls the filterAndSort() function to sort the entries. The difference between this method and the first one is that it clones the notification object light.
800	This method parses a chat and creates a conversation by splitting the from field of the message packet, setting a markable message ID and updating the last seen time. It then creates either an encrypted or unencrypted message depending on the presence of a PGP body and sets the remote message ID, type and true counterpart depending on the conversation mode. Finally, the method sets the time stamp of the message before returning it.
237	This method calls the onCreate() method from its parent class and creates a strings variable that stores the output of the SampleObservables.numberStrings() method. The strings variable is then cached.
43	This method creates a byte array that is 20 bytes long, copies the original data into it, and then hashes the target byte array. It returns a pair of boolean and byte array with the hash of the target byte array.
649	This method registers a shortcut key with the IShortcutService. It checks to see if a key already exists and throws a RemoteException if it does. The shortcutCode and IShortcutService are stored in a map.
101	This method takes in a list of ReleaseStep objects and rolls back each one. A LinkedList of ReleaseStep objects is created from the list of ReleaseStep objects passed in and for each ReleaseStep, an Operation object is retrieved to rollback the step. If an Operation object is available, then it is performed, otherwise, a message is printed out indicating that no rollback is available for that particular step.
90	This method returns a list of Characteristic objects from the children list. If onlyEnabled is false, then the list is returned as is. If onlyEnabled is true, then the list is filtered to include only enabled Characteristic objects.
868	This method creates a Mono object from a given CompletableFuture object, using the toPublisher() method from the INSTANCE object.
459	This method takes in a content type string as a parameter and returns an XContentType value based on the content type. If the content type is "application/json" or "json" (ignoring case), the method returns the JSON XContentType value and if the content type is "application/xson" or "xson" (ignoring case), the method returns the XSON XContentType value.
920	This method overrides the getAllReverseDepsForNodeBeingDeleted() method, and provides a synchronized Set of SkyKeys. It also asserts that keepEdges are active, and calls the ReverseDepsUtility method to consolidate data and return new elements. Finally, it returns the reverse deps using ReverseDepsUtility.
88	This method compares the absolute values of two IComplexNumbers and returns the IComplexNumber with the smaller absolute value.
193	This method takes in ActionMapping, ActionForm, PortletConfig, RenderRequest, and RenderResponse objects as parameters. It casts the ActionForm object to an UnsubscribeForm object and checks if the log is enabled. If enabled, it logs the UnsubscribeForm object and returns an ActionForward object found through the ActionMapping object.
139	This method sends an asynchronous GET request to the given location and token, using the HttpUriBuilder. The response is parsed and if the task instance ID matches and the token is valid, the list of Pages is added to the callback. If the response is complete, it is marked as completed and the request is completed.
355	This method tracks motion scroll and takes two parameters: deltaY and incrementalDeltaY. It checks the child count, the first and last view positions, and the list padding values. Depending on the deltaY and incrementalDeltaY values, the method determines whether to detach views from the parent and adds scrap views to the recycler. It also checks for the selected position if the device is not in touch mode and adjusts the scroll bars accordingly.
971	This method installs a session manager factory for a service target, deployment service name, deployment name, module, JBossWebMetaData, and a ServletContainerService. It checks for the presence of a maxActiveSessions property in the JBossWebMetaData, and if it is not present, it uses the maxSessions property from the ServletContainerService instead. If the metaData has a distributable property, it builds a distributable session manager factory, otherwise it builds an in-memory session manager factory with the appropriate maxActiveSessions value.
102	This method retrieves a LazyRefreshingSelfQueue from a given VcsRoot, using a synchronized lock. If the queue already exists, it is returned, otherwise it is created and added to the myRefreshingQueues.
929	This method shows application details by creating an Intent and setting the data to the package name of the ResolveInfo object. The Intent also includes a flag to clear the task when resetting. The method is then started with the given Intent.
15	This method checks if a user needs to show an IME button by checking the size of the enabled input method list and the number of enabled input method subtypes.
827	This method is used to move a task record (tr) to the front of the task history. It first checks that the task record is valid and then inserts it at the top. The focusable activity stack is then moved to the front and the transit is updated accordingly. If the top activity is not ok to show, then the ActivityOptions are aborted. A check is also made to see if the task switch can enter Pip and if so, the top activity is updated. The focused stack top activity is resumed and the task change notification is sent.
898	This method initializes the POI types for the application by checking for the existence of the poi_types.xml file in the settings directory. If it exists, the POI types will be initialized using the path to this file, otherwise the initialization will be done without it. The method also sets a POI translator which is responsible for providing translations and synonyms for POI types. It also provides an English translation for the POI types, which is retrieved from the localized resources.
161	This method takes in a String password as an argument and sets it as the password for the MQTTClientBuilder object. The method then returns the MQTTClientBuilder object.
308	This method checks the argument given in the form of a URI and creates a file object from the URI. It then creates an InputSplit object from the File object and determines the file type by the file name extension. Depending on the file type, it will create a RecordReader object and initialize it with the InputSplit object. Finally, it will return the RecordReader object.
51	This method clears the focus in the Pip Recents Overlay and is used to resize the pinned stack while also starting the focus lose animation. It checks if Pip is shown and if the recents view has focus and requests focus if it does not. Finally, it will call the callback onRecentsFocused if one is provided.
23	This public method sets the value of a String type field called 'automaticReconnect' with the value passed as an argument.
693	This method closes the BuckPyProcess and checks the exit code before deleting the pathToBuckPy file. It also parses the profile output file if profiling is enabled and posts an event to the buckEventBus when the process is complete.
413	The KeyguardUpdateMonitor constructor creates a Handler to handle various messages about time updates, battery updates, carrier info updates, sim state changes, ringer mode changes, and phone state changes. It also sets whether the keyguard bypass will be enabled based on a configuration setting, checks the device provisioned state, and registers a content observer to monitor that state. It initializes the sim state, battery status, and battery level, and sets the telephony plmn to the default. It also registers a broadcast receiver to listen for various actions such as time tick, time changed, battery changed, timezone changed, sim state changed, phone state changed, SPN strings updated, and ringer mode changed.
667	This method uses the CliBuilder to build a command line interface (CLI) for the Presto application. The CliBuilder accepts the "presto" argument and stores the specified commands, such as Server, Execute, Console, and Help. It also has a "convert" group that stores Help and ConvertCsv commands. After the CliBuilder is built, the command line arguments are parsed and the resulting command is executed.
133	This method defines a CloseableHttpClient, using an org.apache.http.impl.client.HttpClientBuilder, an InstrumentedHttpClientConnectionManager, and a name. A timeout and keep alive value are set, as well as a ConnectionReuseStrategy, HttpRequestRetryHandler, RequestConfig, and SocketConfig. If keepAlive is set, a custom keepAliveStrategy is set. Finally, if credentialsProvider and routePlanner are set, they are also set to the builder.
694	This method retrieves a delete queue item from the WordPress database using the current blog's local table blog ID.
165	This method creates an error message when a given string is malformed at a certain position. The method will take in a text string and an error position as parameters. It then creates a sample text string that is either the same length as the text string, or is shortened to 32 characters and suffixed with an ellipsis. The method then checks if the error position is less than or equal to 0 or is greater than or equal to the length of the text string. Depending on the outcome, an appropriate error message is returned.
940	This method provides a @Nullable private synchronized VirtualFile[] asArray() which checks if myChildren is an instance of VirtualFile[]. If so, it returns (VirtualFile[])myChildren, otherwise it returns null.
157	: This method provides a report on assist context extras of an IBinder token, such as the result, structure, content, and referrer of the token. It sets the extras, then notifies all with the result and removes the pending extras from the UI Handler. It then either sends the bundle to a receiver or starts an activity as the user, based on what is set.
303	This method creates a RemoteSdkException, which is a type of exception. It sets a boolean value to false and then loops through the throwable to determine if it is an instance of NoRouteToHostException. If it is, the myCause variable is set to the current throwable and the boolean value myNoRouteToHost is set to true.
763	This method uses the GL.glCopyTexImage2D function to copy a texture image from the framebuffer to a texture object. The parameters passed to the function are target, level, internalformat, x, y, width, height, and border.
582	This method creates and commits a module if needed. It takes a Project, a ModifiableModuleModel, and a boolean as parameters. It first checks if a model is provided, else it retrieves it from ModuleManager. It then creates the module and commits it if the model was null. If the boolean is set to true, a project initialization activity is run when the project is initialized, which runs a write action to initialize the module. If the boolean is false, the module is initialized directly.
565	The generateAppendToMethod method declared in the ClassDefinition class takes four parameters: blockIndex, blockPosition, pageBuilder, and outputChannelOffset. It is used to generate a method that appends the given type to a BlockBuilder as specified by the given parameters. The type of the BlockBuilder is retrieved from the list of types and the corresponding Channel is retrieved from the list of FieldDefinitions.
587	This method attempts to handle a Mobile Management Interface (MMI) by first getting the TelecomService. If the TelecomService is not null, it then attempts to handle the PIN MMI for the given account handle and dial string, along with the package name of the calling context. If a RemoteException is encountered, an error is logged. If any of the steps fail, the method returns false.
985	This method sets the mAnimating variable to true and then checks if the animation is running. If the animation is not running, it will set the frame to 0, with false as the parameter, and with the condition of the animation state's child count being more than 1 or not being a one-shot animation.
624	This method is used to handle the event that occurs when the Global Navigation Satellite System (GNSS) is started. If a GnssCallback is found, a message is obtained and sent to the mGnssHandler with a status of GPS_EVENT_STARTED.
792	This method selects the best patterns from an array of possible centers. It calculates the average size of the centers and removes any that are more than 0.2f of the average size. If there are more than 3 centers, it uses an insertion sort to remove any additional centers and return the top 3.
4	This method starts the ChooseAccountTypeActivity by creating an intent and passing it the StringArrayExtra, BundleExtra, StringArrayExtra, and StringExtra from the original intent as extra parameters.
776	This method collects AnnotationData from external files and adds it to a SmartList. It checks if the file is valid and writable, and whether the external name matches the old external name. If the list is empty, it will return NO_DATA.
680	This method creates a FileWatcherFactory depending on the Java version. If the Java version is compatible with Java 7, then it will try to load a class called 'org.gradle.internal.filewatch.jdk7.Jdk7FileWatcherFactory' and use it to create the FileWatcherFactory. If the class cannot be found, it will log an error and fall back to a NoOpFileWatcherFactory.
731	This method retrieves the linked records from a log for a given ioRecid. If the modified map contains the given ioRecid and it is not a tombstone, the ret0 array is created and the log is retrieved using the offset of each element in the ret0 array. The retrieved log is then stored in the ret array which is returned.
145	public SslErrorHandler() is a method that handles errors related to SSL (Secure Sockets Layer).
580	This method creates and gets a user UFS temporary folder by retrieving the folder from the mWorkerClient and creating it with the mUnderFileSystem using the given ufsConf if it does not exist. It then returns the created folder.
788	This method computes a new configuration based on the given Configuration object. It determines the orientation of the display, the screen size, and if a hard keyboard is available and enabled. It also adjusts the configuration using the policy.
162	This method initializes the AlarmManagerService with a provided context. System properties are obtained and set for the timezone, and a wakelock is created. The method then sets up two PendingIntents for the time tick and date change events, but this time with the UserHandle.ALL flag. A ClockReceiver and UninstallReceiver are created, and a thread is started if the driver is initialized correctly.
438	This method first checks if there are any exceptions in the init process. If there are no exceptions, the thread context class loader is set, the log4j configuration is set to the bin directory of the JMETER_INSTALLATION_DIRECTORY and the JMeter class is loaded, instantiated, and the start method is invoked with the supplied arguments. If an exception is thrown, the JMETER_INSTALLATION_DIRECTORY is printed to the error stream.
778	This method iterates through a list of SerializedFields, retrieves the MaterializedField associated with each, and creates a ValueVector if one does not already exist. It then checks if the value count is 0, and if so, the vector is cleared. If the value count is larger than 0, the vector is loaded with the buffer data. The buffer offset is then incremented to the buffer length and the method asserts that the buffer offset is equal to the buffer writer index.
127	This method takes a ReilOperandNode object as an argument and sets it as the root value for the ReilOperand object. A check is performed to confirm that the root value is not null.
79	This method is used to save the state of the application when it is paused or stopped. It saves the reference position of the list, the indexes, the first positions, tops, height cell and empty list message.
430	This method checks the calling user UID and throws a security exception if it is not the system UID. It then executes a command to delete the user key using the crypt connector. If the response is not "0", an error is thrown. If an exception occurs, it is logged and thrown.
715	This method takes two double arrays, "to" and "from", and adds the corresponding elements of each array in place, i.e. modifying the elements of the "to" array. If the length of the two arrays is not equal, a RuntimeException is thrown with additional information about the length of each array.
922	This method overrides the public boolean isPermissionRevokedByPolicy function and returns false.
864	This method returns a boolean value which is determined by checking whether the showcaseX and showcaseY values are different than 1000000, and if the hasNoTarget value is false.
231	This method creates a ProtoBuf.Callable.Builder from a given CallableMemberDescriptor. It checks for annotations, visibility, modality, and kind of the descriptor to set the flags for the builder. It then iterates through the descriptor's type parameters, receiver parameter, and value parameters, adding them to the builder. Lastly, it sets the name and return type for the builder and returns it.
510	This method creates a MediaLayout for a FormEntryPrompt by retrieving the text, audio, video, and big image URIs from the prompt. It also creates a TextView with the prompt text and sets the font size, typeface, and padding. The MediaLayout is then set with the AVT parameters, audio listener, and play colors. Finally, the MediaLayout is returned.
227	This method creates an IdeaTitledBorder with a bold font, a specific color, and specific padding values.
752	This method returns the average time in nanoseconds, calculated by dividing the total time in nanoseconds (totalTimeNS) by the count. If the count is equal to 0, a value of 0 is returned.
256	This method sends messages using a Netty client to a specified destination. If the connection is closed, the messages are discarded. The messages are first gathered into batches and then flushed to the channel. If the connection is unavailable, the messages are handled appropriately.
172	This method sets the AllergyId and UUID to null, sets the patient and allergen values to the same as the 'allergy' object, sets the severity and comment to the same as the 'allergy' object, and sets the reactions to a new ArrayList. For each reaction in the 'allergy' object, the reaction's AllergyReactionId and UUID are set to null and a new UUID is generated, respectively.
974	This method retrieves the table name of an existing database connection. It first obtains the selection index of the connection and retrieves the database meta information. It then creates a DatabaseExplorerDialog object with the shell, SWT.NONE, the database meta information and the list of databases. The selected table is set to the contents of wTable and the open function is called to get the table name, which is then set to wTable if not null.
137	This method is an abstract method that returns an integer value that represents the length of an object.
414	This method overrides the getParentObject() method to return the parent object of type TABLE.
956	This method creates a ModClusterConfig object and sets various attributes based on the parameters specified in the ModelNode object. It sets the advertise, SSL configuration, proxy list, advertise security key, proxy URL, excluded contexts, auto enable contexts, stop context timeout, socket timeout, sticky session, sticky session remove, sticky session force, worker timeout, max attempts, flush packets, flush wait, ping, smax, ttl, node timeout, balancer, and load balancing group attributes.
200	This method sorts a list of VariableElements according to their order in a specified source table. The method first checks if the table spec can be found given the model and sourcePath, and if it cannot, it prints a warning message to the logger. Otherwise, it creates a list of words from the specSource and retains only those words which are field names. It creates a map of the words to their indexes in the list and then sorts the fields according to their index in the map. Finally, it prints a success message to the logger if the sorting is successful, otherwise it prints a warning message.
612	This method checks for a specific character in a given font name. If the font does not exist, it records a warning in the log and adds the font name to the warnedAlready list. It then returns false.
351	This method handles headers for a web request that needs to be processed. It assigns the headers to a variable and parses the content type header to check the MIME type. If the MIME type is a text or octet-stream, it attempts to guess the MIME type from the URL extension. It then checks if the MIME type is an XML type other than application/xhtml+xml and if so, attempts to start an activity with the given URL. It then checks if authentication is necessary and if so, sets the username and password if available. Lastly, it commits the headers and checks for redirects.
294	This method creates a list of elements, which is then checked to see if the first element is an instance of a Separator. If the list is empty or the first element is not an instance of the Separator, then a Separator is added to the beginning of the list. The modified list is then returned.
252	This method is used to doPortalDestroy. It retrieves the servlet context from the filterConfig and obtains the InvokerFilterHelper from the servlet context. If the InvokerFilterHelper exists, the attribute is removed from the servlet context and the InvokerFilterHelper is destroyed.
955	This method creates a RunProfileState object, taking an ExecutionEnvironment and Module as parameters. The fourth parameter is set to false.
861	This method gets the version of a portal depending on if the app is public or private. If the app is public, it will retrieve the public portal version and if it is private the private portal version. If the app is not private and is not null, it will then be checked for valid format and then added with a ".0" at the end for accuracy.
146	This method writes an integer value to a parcel and takes in two parameters: dest in the form of a Parcel and flags as an integer.
568	This method attempts to connect to an AccessPoint. It first checks if the AccessPoint is valid, and then checks if it is already saved. If it is, it will connect with the networkId. If it is not saved, it will check if the security is none and generate an open network config. If not, it will fire an intent to the settings page with the SSID as the extra.
83	This method creates an object of type Properties, which stores configuration information for the program. If a properties file is provided, it loads the contents of the file. It then iterates through the project's properties and sets each to the Properties object, as well as any override properties. Finally, the Properties object is returned.
889	This method initializes the ringer icon and sets an onClickListener and an onLongClickListener. When the icon is clicked, it will either set the ringer mode to vibrate or to normal, depending on the current state. If the stream volume is 0, it will set it to 1. When the icon is long-clicked, it will open the sound settings page and dismiss the view. Finally, the method will call updateRingerH().
423	This method combines two specified TopNResultValue objects to generate a new TopNResultValue object. It creates a new LinkedHashMap object to store the combination of the two objects, and then combines the metric values of each object in the Map using AggregatorFactory. It then adds the dimension value and the postAggregations to the Map and creates a new DimensionAndMetricValueExtractor object from the Map. Finally, it builds a new TopNResultBuilder object using the timestamp and other parameters, adds the new Extractor object to the Builder, and returns the Builder's build.
980	This method overrides the compute method to set the priority of the thread. It first checks that the priority of the task matches the priority of the pool, and then checks that the priority of the thread is less than or equal to the priority of the pool. It then iterates through the ForkJoinPool to find an H2OCountedCompleter and set the priority of the thread to the highest priority task. If an exception is thrown, the H2OCountedCompleter is completed exceptionally. Finally, the thread's priority is set back to its original priority, and the compute2 method is executed.
996	This method overrides the openFile() function. It takes the file path and file type as arguments and attempts to open the file with the associated application. If the file type is not null and the associated application is not empty, the file is opened using the 'openFileWithApplication' command. Otherwise, the file is opened using the '/usr/bin/open' command.
462	This method creates an initial layout for a page, with a folder layout on the left side of the page, a placeholder folder layout on the right side of the page, and two folder layouts at the bottom of the page. The left folder contains the Database Navigator View, the Project Navigator View, and the Templates View. The right folder contains the Help View. The bottom left folder contains the Project Explorer View. The bottom right folder contains placeholders for the Log View, the Query Manager View, the Shell Process View, the Properties Sheet, the Progress View, and the Outline.
537	This method creates a CreateTableStatement to generate SQL statements for a given database. It adds the columns to the statement, and adds any necessary constraints, such as primary key, foreign key, unique constraints, and auto-increment constraints. It also sets the table space of the statement. Finally, it adds the statement to a list of SQL statements and returns it.
895	This method retrieves the fields of a given query using a database cache entry object. If the database cache is not available, the method creates a statement and sets the maximum rows to 1. The method then retrieves the fields from the resultset and closes the statement. If the database cache is available, it stores the fields for future use.
600	This method overrides the getNameAsName() method, and it returns the name of the object as an identifier Name object if the name is not null. If the name is null, it returns null.
894	This method uses the standard error output to print a message formatted as error text. It does this by using the ANSI library to format the message as error text before outputting it to the standard error stream, and adding a line break after the message.
641	This method adds a PlainMenuItem to the plainMenuItems list with the given iconId, needLinks, isUrl, collapsable, collapsableView, and OnClickListener values, passing in null for the text value.
912	This method completes the lifecycle for an AtmosphereResource by executing a few operations such as checking for cancellation, invoking the AtmosphereHandler and finally notifying the listeners and closing the output stream.
642	This synchronized method attempts to cache a file by connecting and getting a local worker. If a connection is not established, the method returns. If a connection is established, the local worker client will try to cache the file with the given user ID and file ID. If an exception is thrown, the error message will be logged and the local worker client is set to null.
12	The RecursiveNodeIterator method takes in a Node parameter and adds an iterator to the iteratorStack. The iterator contains a boolean variable visited, and contains methods to remove, next, and hasNext. The next method returns the Node parameter and sets visited to true, while the hasNext method returns the opposite of visited.
862	This method scans through a list of files and runs Checkstyle on them. The time taken to locate the files and process them is logged, and the number of errors and warnings is recorded. If the number of errors and warnings exceeds the maximum amount, the failure message is set and a BuildException is thrown.
207	This method attempts to initialize text-to-speech (TTS) by first checking if the default engine is enforced and if the requested engine is enabled. If so, it will connect to the requested engine and set the value of mCurrentEngine to it. If not, it will attempt to connect to the default engine before connecting to the highest ranked engine available. If all else fails, it will dispatch an error and return an error code.
399	This method calculates the gradients and delta for a given input, labels2d, and maskArray. The gradient is set for keys W_KEY, V_KEY, and R_KEY, with the delta being calculated by the lossFunction computeGradient. The derivW and derivV are calculated with the activation function, and the first and second term derived from the broadcasted inputs. The derivR is calculated with the delta mean and 1/nu.
988	This method builds an AdvertisingSetParameters object, ensuring that legacy advertising is not anonymous, connectable and non-scannable, or include TX power level in the header. For other types of advertising, it ensures that they are not both connectable and scannable, or both connectable and anonymous.
367	This method collects attributes from a set of QueryTarget objects, checks if the targets are QueryBuildTargets, and stores the attributes in an immutable sorted map. It uses the PatternsMatcher class to determine which attributes to store, and uses the toPresentationForm() method to convert the nodes into a presentation format.
650	This method is used to get a list of delegated scopes for a given ComponentName and delegated package. It throws an exception if the parent instance is not valid. If the service is available, it will return the delegated scopes. If the service is not available, it will return null.
32	This method checks the status of the request and response objects, and sets the event type based on the status, before passing it to the first element of the pipeline. If the response is closed or the request is not a comet, the method will end the comet event. It will also check for errors and read operations, logging any errors that occur.
555	This method checks if a given class is assignable from a given supertype. It first checks if the class name is null, then if the supertype name is equal to the class name. It then retrieves the class node for the class name and checks if the supertype name is equal to the class node's supername. If not, it then checks if the supertype is assignable from the class node's supername and, if so, returns true. Lastly, it checks all of the class node's interfaces, returns true if the supertype name is equal to any of the interfaces, and also checks if the supertype is assignable from any of the interfaces using the same method.
125	This method checks if the instrumented method is static and then creates a MethodConstant.CanCache object. It then creates a StackManipulation.Size object containing a Compound StackManipulation to read a FieldDescription, load the 'this' value, use a cached method constant, create an ArrayFactory with argument values of the instrumented method, invoke the INVOCATION_HANDLER_TYPE's declared method, assign a TypeDescription.Generic.OBJECT to the method's return type using a dynamic assigner, and return the method's return type. The method then returns a new ByteCodeAppender.Size object containing the maximal size of the stackSize and the instrumentedMethod's stack size.
330	This method is used to check if the layout direction is set to right-to-left. It returns a boolean value (true/false) indicating if layoutDirection is equal to View.LAYOUT_DIRECTION_RTL.
195	This method enables users to insert missing tokens into a given tree body. It begins by setting a CommonParentState object and looping through the leaves. The token type is taken from the lexer and the next leaf is identified using the TreeUtil.nextLeaf() method. If the token type does not match the next leaf's element type, the TokenProcessor is used to process the token and determine whether or not it is valid. If it is valid, the missing token is inserted into the tree body in the appropriate spot. Finally, the passTokenOrChameleon() method is used to move to the next leaf.
463	This method checks if the argument 'args' is not null and also checks that its size is not 0, and if so, returns a compiled template for the given model ID and order. If 'args' is null or its size is 0, the method checks if the model ID is already in the compiled template map and if not, adds it by calling the compileTemplate method. Finally, the method returns the template for the given model ID and order.
248	This method adds the argument 'i' to the current position 'mPos' and stores the result in 'res'. If the resulting value of 'res' is greater than 'mLen' or less than 0, an RSIllegalArgumentException is thrown. If the resulting value of 'res' is within the specified range, 'mPos' is set to 'res'.
194	This method allows the player to remove a schematic from an item stack and also use the item to create a schematic block in the world. If the player is sneaking, the schematic will be removed from the stack and the item damage will be set to DAMAGE_CLEAN. If the item damage is not DAMAGE_USED, a schematic block will be grabbed from the world and stored in the stack. Finally, if the item damage is DAMAGE_USED, the schematic block will be placed in the world.
121	This method returns a Collection of PValue objects.
679	This method takes an Uri as input and returns an integer value depending on the authority and rootid of the Uri. If the Uri is null or a launch Uri, then the method returns ROOT_NONE, otherwise it checks the authority and rootid of the Uri and returns the corresponding ROOT value.
154	This method takes in a list of configured targets and data as parameters and builds several builders in order to collect the various providers, link parameters and defines of the configured targets. The collected providers, link parameters and defines are then added to the existing list of providers, link parameters and defines.
519	This method saves attributes of a JPEG file using the ExifInterface class. It first checks to ensure that the file is supported and throws an exception if not. It then creates a temporary file and renames the original file to this temporary file. The renamed file is then read using a FileInputStream and the attributes are saved using a FileOutputStream. The method then closes the streams and deletes the temporary file. Finally, the thumbnail bytes are set to null.
915	This method attempts to finish an activity affinity, beginning by finding the index of the token passed in to the method. If the index is negative, the method returns false. Otherwise, the method loops through the history starting from the index, and finishes each activity with the same task and task affinity as the passed in token until it reaches the beginning of the history, or the task or task affinity changes. The method then returns true.
265	This method sets the display options for an ActionBar. It checks for flags that have changed, and sets the visibility for mHomeLayout and mHomeAsUpView according to the flags. It also sets the mIconView image to either the mLogo or mIcon depending on the flags. Lastly, it requests a layout or invalidates depending on the flags.
722	This method visits the ParserRuleContext ancestorNode and SQLStatement statement and adds the ColumnDefinition column to the AlterTableStatement alterStatement's updateColumns. It then calls postVisitColumnDefinition with the each, statement and the column name.
441	This method attempts to connect to Plex, with a delay of 0. If the connection fails, an IOException, InterruptedException, or ExecutionException is thrown and the delay is updated to RECONNECT_DELAY.
337	This method provides the functionality to create an activity which displays debug logs. It sets the support action bar as up enabled and sets up the text view, button, and runOnUiThread. It also provides onClickListeners for each of the buttons to allow for clearing, copying, and starting/stopping of the logs.
880	This method initializes an algorithm parameter spec and secure random objects, checks for valid parameters and key size, and sets the keystore alias. It also sets the digests, signature paddings, encryption paddings, randomized encryption, and user authentication requirements, as well as the key size, algorithm parameter spec, certificate subject, serial number, and start/end dates.
703	This method takes a value of type T and a String as parameters and throws an IllegalArgumentException if the value is null. It returns the value if it is not null.
746	This method retrieves the thingUID from a remote device by first obtaining the device details and model details from the device. If the model name retrieved from the model details is not null, the method will then check if the model name starts with Socket, Insight, LightSwitch or Motion. If the model name does start with one of these, the method will log a debug statement and return the corresponding ThingUID.
13	This method creates an IndexWriter object with a limited maximum field length and sets its merge scheduler, info stream, and use compound file settings. The maximum buffered documents and maximum field length are also set to specified values.
437	This method returns the root of the import control, which is stored in a stack.
994	This method checks whether two graphs are equal by comparing the directed nature, nodes, edges, and edge values of each graph. It returns true if all of these values are equal, and false if not.
73	This method checks whether a boolean value, 'mInitialized', is initialized and returns the value of the boolean.
795	This method creates a PullToRefreshLayout view instance from the ThemedReactContext reactContext. It registers the view with a PtrDefaultHeader and sets parameters such as the color scheme and padding. It sets up an event listener to detect when the view has been refreshed, and then registers a MessageList view within the PullToRefreshLayout. It also sets up an ImageLoader to load avatar images and other images into the view, as well as various event listeners for the MessageList view such as onMessageClick, onMessageLongClick, onAvatarClick, and onStatusViewClick. Finally, it posts a LoadedEvent indicating that the MessageList was loaded.
625	This method creates a HostView widget and then sets an on-click handler and app widget ID, followed by a synchronized block that adds the view to a collection of views. It then attempts to get the AppWidgetViews, and if unsuccessful, throws a RuntimeException. Finally, it updates the AppWidget and returns the view.
732	This method calls the init() method and passes the input strings rruleStr, rdateStr, exruleStr, and exdateStr into it. The init() method then parses the strings and stores the parsed content into the variables rrules, rdates, exrules, and exdates.
714	This method parses a given text and extracts the start and end indices of a URL, the type of the URL, and the line and column information in the URL. It then creates a DartPositionInfo object with this information and returns it.
270	This method clears the existing referenceViolationsMap, then creates a ViolationQuery for the given resource and sets the SwitchMode to BOTH. If there are existing violations, the method retrieves the source from the index and referenceAnalysis, then creates a list of new violations and a list of reference violations. Finally, it uses a ViolationTrackingBlocksRecognizer to map the new and reference violations.
706	This method instantiates a new GraphVertex, a NormalizeVertex, with a given ComputationGraph, name, index, dimension, and epsilon.
392	This method enforces the calling permission of writing SMS, while also checking the AppOpsManager to ensure the application is allowed to write SMS. If allowed, it will return the getServiceGuarded() method with the provided package and contentUri.
824	This method configures the default settings for a Java Plugin Convention. It sets the classes and resources directories for the source set, as well as the source directory for the Java and resources elements. It also adds a ProcessResources task, maps the default sources, and sets a compile task for the source set. Finally, it adds a classes task and sets it to depend on the ProcessResources task and the compile task.
250	This method decodes a given long status value and returns a string value corresponding to the alarm type. The types of alarms that can be decoded include geofence enter, geofence exit, low battery, vibration, overspeed, SOS, and power cut.
658	This method allows for the visit of a NoneTupleExpression and returns a TupleExpression.
488	This method creates an MQTTClientBuilder object that takes a StepInterface object as input. It assigns the logChannel and stepName variables to the corresponding values from the StepInterface object and returns the MQTTClientBuilder object.
892	This method takes in three files, a beforeDir, an afterDir, and a file. If all three files are not null and the file contains the beforeDir, then the method will take the absolute path of the file and splice it, then return a new file with the spliced path and the afterDir.
68	This method returns the minimum of the startedSplits and the splits parameters.
136	This method uses the timeFormatter to create a literal representation of an OffsetTime value.
530	This method attempts to add a Float and Double value together. It first checks if the call receiver is valid and if it is, it will add the two values together. If an exception is thrown, then the super.call method is called instead.
891	This method begins by getting the current Providers context and pushing a new configuration to the ResteasyProviderFactory context. It then iterates through the request filters and checks if the request has been aborted with a response. If not, the response is obtained from the client's httpEngine. Finally, the response filters are iterated through and the response is returned.
781	This method retrieves the current trends using the 'restBaseURL' from the configuration file. The trends are then processed using 'TrendsJSONImpl' and the first element from the list is returned.
858	This method takes an ActionRequestBuilder request as an argument and returns an ActionResponse response. It starts a StopWatch for profiling and checks whether profiling is enabled on the basic level. If it is, it checks whether the request is assignable from the ToXContent class and if it is, it builds a debug response using XContentBuilder and logs the ES Request in the full profile. If not, it logs the ES Request in the full profile without building a debug response. If an Exception is thrown, it logs the error and throws an IllegalStateException.
460	This method brings down a service by disconnecting any connections associated with it, unbinding any bindings, cancelling foreground notifications, clearing restart counts, and removing the service from its associated ServiceMap. Additionally, the service's foreground status is set to false, and the method ensures that the service is not restarted in the background.
33	This method overrides the onAuthenticationSucceeded() method and sends a message to the target with no parameters.
635	This method shows a wikipedia page for a given amenity using a given language. It begins by checking the preferred language, and if it is empty, the language used is set to the language of the SampleApplication. A dialog is created and a toolbar is set up with a navigation icon and title. The language is then set, and a description is retrieved. A bottom bar is created for the user to click to open the Wikipedia article. The webview is then created and configured, and the content is loaded into it. Finally, the dialog is made visible.
966	This method is used to create a Drawable from a Resource Stream. It begins with a trace to the Trace Tag Resources and the source name is specified if it is not null. If it is null, it is set to "Unknown drawable". The drawable is then created using the given resources, value, input stream and null. Finally, the trace ends with the Trace Tag Resources.
501	This method takes in a string as an argument and checks if the characters in the string are within the range of A-Z, a-z, 0-9, and a space character. If not, the method quotes the string using the quoteName method and returns it.
447	This method is used to get a rounded corner picture from a given url. It first checks if external storage is mounted, then checks if the file exists and if not, it will get the bitmap from the network. It then uses BitmapFactory to decode the file to get the bitmap before scaling it to the desired size and getting the rounded corner bitmap.
34	This method returns a Well-Known Text (WKT) representation of a Geometry object using the WKTWriter class with a precision of 3.
397	This method populates a directory list with content from the given file path. It sets the content view to the uploader_layout, sets the action bar title to the current directory, and generates the file path from the given mParents. It then retrieves the file from storage manager and uses a SimpleAdapter to set the list adapter. Finally, a button is given an onclick listener and the listview is given an onitemclick listener.
857	This method sets the hotspot bounds of a given object. If the hotspot bounds are not initialized, a new Rect object is created and assigned the given left, top, right, and bottom values. If the hotspot bounds have already been initialized, the existing values are updated with the given values. Lastly, the hotspot bounds of the current drawable are also set to the given values.
322	This method handles headers from a request made to a URL, such as the content length, content type, and content disposition. It also tries to guess the MIME type from the URL. If the MIME type is determined to be an XML type, it checks if it can be viewed externally, excluding XHTML+XML, and, if so, attempts to open it in an external application before stopping the loading process. It then checks if authentication is necessary and sets up the authentication header, if necessary. Finally, it commits the headers and checks for redirection.
287	This method is used to register a TaskManager with the given connection info, hardware description, and number of slots. If both the instanceManager and scheduler are not null, the TaskManager will be registered and an InstanceID will be returned. Otherwise, null is returned.
652	: The getInt() method checks the bounds of the row and column given as parameters. If the column type is an integer or a categorical type, the corresponding data is retrieved from the columns array and returned. If the column type is neither an integer nor a categorical type, the string data is retrieved and a conversion to an integer is attempted, with a default missing integer value returned if the conversion fails.
936	This method traverses a target graph to get the inputs for each node. It then creates a sorted map of the target to its inputs and prints them in a JSON format using the ObjectMapper and Console.
611	This method verifies a node by checking the size of the keys and values and comparing the keys with a comparator. If the size of the keys and values do not match, or the comparator returns a value greater than zero, an IllegalStateException is thrown.
111	This method generates a setter for a given column in a POJO. It does this by declaring a className, columnType, columnSetterReturnType, columnSetter, columnMember, as well as determining if the column is a UDT or UDTArray. It then prints out an override and a println method depending on the generateInterfaces and scala variables.
873	This method is similar to method1 but requires the input string to not be null. If the string is null, the method does nothing. Otherwise, it logs each line of the string separately into the system.
759	This method retrieves the metadata associated with the enqueued transport URI from the stateMap. If the metadata is present in the stateMap and is not empty, the SonosXMLParser is used to get the metadata from the XML. Otherwise, the method returns a null value.
435	This method determines if an Iterable object is empty by checking if the given value is null or if the given value's iterator does not have a next value.
461	This method removes a specified integer from an array of integers and returns a new array without the integer. It first checks if the given array is null, and if not, it iterates through the array to find the integer. If the integer is found, a new array is created, containing all elements from the original array except for the specified integer.
524	This method is used to install a popup handler to a given JComponent, using a given group ID and place. The group ID is retrieved from the ActionManager, and the popup handler is then installed on the JComponent.
771	This method uses the onShowInputRequested() to determine if the input view should be shown. The isInputViewShown() is used to evaluate if the input view should be shown, and the setImeWindowStatus() is used to set the visibility of the input view. The ResultReceiver is used to send the results of the input view being shown or hidden.
316	This method overrides the dgetrf() function to take in the parameters M, N, INDArray A, INDArray IPIV, and INDArray INFO. It uses the LAPACKE_dgetrf() function to execute the dgetrf() operation, and if the status is less than 0, it throws a BlasException.
748	This method triggers an animation on start of the RecentsActivity by creating an intent, adding flags to the intent, and sending out a broadcast as the current user. It also sets a boolean mStartAnimationTriggered to true.
0	This method is deprecated and takes in an array of strings. It checks the current phone type to create either a com.android.internal.telephony.cdma.SmsMessage or a com.android.internal.telephony.gsm.SmsMessage, depending on the phone type. Finally, it returns a new SmsMessage object that wraps the wrappedMessage object.
595	This method routes SQL by creating a list of PreparedStatementExecutorWrapper objects, getting a SQLRouteResult from the preparedSQLRouter, setting the sqlParsedResult and GeneratedKeyContext according to the SQLRouteResult, then looping through the ExecutionUnits of the SQLRouteResult to create a PreparedStatement, replay methods invocations, and add the created PreparedStatement to the result list.
177	This method checks the default engine, a requested engine, and the highest-ranked engine to establish a connection with the text-to-speech (TTS) system. If a connection is established, the method returns a success value. Otherwise, it returns an error.
97	This method handles a RestRequest and RestChannel by creating a ClusterStateRequest and setting various parameters. It then listens for a ClusterStateResponse and sends an appropriate response based on the request method and the response.
664	This method retrieves an array of values from a HierarchicalDirectedGraph. It creates an empty ArrayList of size equal to the number of nodes in the graph, and then iterates over each node, calculating the total out degree of each node and adding it to the list. Finally, the list is converted to an array and returned.
114	This method collects variable instances from the parent scope, variableInstances and usedVariablesCache, and if a transientVariables object is present, it adds them to the collection as well.
738	This method takes in a Project and an email as input and attempts to retrieve a stored password associated with the given email using the PasswordSafe class. If the email is empty or an exception is thrown, the method will return null. In the case of an exception, the error is logged for informational purposes.
775	This method checks if a character is a part of a word. It first checks if the character is a part of a Unicode identifier or the character is a dollar sign. If not, it returns false. It then checks for any delimiters that have been defined, and if a character is not a letter and matches one of the delimiter characters, it checks for a sequence of characters that matches the delimiter. If the sequence of characters matches, false is returned. Otherwise, true is returned.
9	This method creates a default role for a given client and grants it to a specified service account. The role is identified by a constant (Constants.AUTHZ_UMA_PROTECTION), and is created if it does not already exist. The service account is fetched from the session and granted the role if it does not already have it.
185	This method is used to draw content on the canvas. It first checks if the content, mask, and matte bitmaps are present. If not, it returns. It then checks if the layer is visible. If not, it returns. Then, it draws the content on the content canvas, and if a mask is present, it applies it. Then it draws the main bitmap on the main canvas, with a matte if present.
225	This method adds a column to a composite type. The method first checks if the column is marked for deletion and returns if it is. The method then splits the column name into a byte buffer and checks if a column group exists. If one does not exist, a new one is created using the byte buffer and a boolean value indicating whether the name is static. The method then checks if the current group is static and the name is not static or if the group is not the same. If either of these conditions is true, a new column group is created. The new column group is then added to the existing group and the previous value is set to the current column.
394	This method defines the process of exporting a row of data to a JSON format. It begins by writing the row number and opening a set of curly braces. It then iterates through each column and evaluates the value of the cell. If the value is null, it writes a null value, otherwise, it writes the value as a string or binary data. If the value is a date, it formats it as an ISO. Lastly, it closes the set of curly braces.
927	This method checks the documents, root, and destination before allowing a copy to take place. It returns false if the destination is null, not a directory, or does not support creation. If the root is the downloads root, it also checks if any of the documents are directories, returning false if this is the case.
757	This method uses the SolrIndexSearcher class to get indexed fields info. A Query and a SolrQueryParser are created, as are an IndexReader, IndexSchema, and a Map. A SimpleOrderedMap is created and the Collection of fieldNames is retrieved from the reader. For each fieldName, a SimpleOrderedMap is created and the type, schema, and dynamicBase are retrieved. If numTerms is greater than 0, the top terms are retrieved and added to the SimpleOrderedMap. The fieldName is added to the finfo and the method returns finfo.
216	This method handles lifecycle events and initializes and terminates APR as necessary. If an INIT_EVENT is received, the method will attempt to initialize SSL and if an AFTER_STOP_EVENT is received, it will attempt to terminate APR. Any issues encountered are logged.
254	This method creates a table with three columns of data (username, score, and completed) and eight rows of data. A TableView is then created from the table and a query is run on it to find all results where the second column is greater than 500. A query is then run on the TableView to find all results where the third column is equal to false. The assertion is then made that the size of the results is 3.
215	This method creates a PerfBenchmarkDriverConf object and sets its 'StartServer' property to false. It then creates a PerfBenchmarkDriver object, passing in the configuration object, a temporary directory, a load mode, a segment format version, and a false flag. The driver's 'run' method is then called.
723	This method overrides the emitBitScanForward() method and creates a new variable of type int derived from the operand. It then appends a new SPARCBitManipulationOp object to the current object. The method then returns the result.
298	This method obtains the bounds of a view on screen by creating a RectF object (position) which is initially filled with the view's height and width values. It then accounts for any transformations applied to the view, such as scaling, and offsets the position by the view's left and top values. The position is then offset by the parent view's scroll values and, if the parent is a ViewRootImpl, the current scroll value. Finally, the position is offset by the mWindowLeft and mWindowTop values of the mAttachInfo object and the desired bounds are set in the outRect parameter.
336	This method defines the handling of a RestRequest, using a SearchScrollRequest to handle the request. It takes the scroll_id from the request, and if there is content, it takes the content in UTF-8 encoding. A scroll parameter is parsed and set, and the operation threading is set accordingly. In the case of an exception, a bad request is sent. The SearchResponse is sent as an XContentRestResponse upon a successful response.
724	This method sets the file name to the given string value and ensures that this method cannot be overridden by subclasses.
514	This method overrides the getOutline method and sets the alpha value to 0.0f if the bitmap is null or has an alpha value.
563	This method retrieves the locale of a user based on the user's ID from a BackgroundTask object. If the user ID is greater than 0, the user's locale is retrieved from UserLocalServiceUtil. Otherwise, the default locale is returned.
707	This method loads metric buffers from a collection of metric index entries. It first creates a File object for the metric store, then iterates through each index entry. For each entry, the method checks if an associated descriptor exists, and if it does not, an IllegalStateException is thrown. If the metric segments do not contain the index entry, a buffer file is created and mapped, and the debug log is enabled if necessary.
396	This method returns a ShortRange object if 'from' is greater than or equal to 'to', with the range being from 'from' to 'to - from - 1'. Otherwise, it returns an empty ShortRange.
786	This method is used to log a frontend log message to the backend. It takes in a LogMessage parameter, which must include a severity of either error, warn, info, or debug. The method then adds the logMessage to the LOG_BUFFER, and if the size of the buffer exceeds the limit, the last entry is removed. Finally, a response is returned with a status code of 200 if the log was successful, or 403 if the severity is not supported.
240	This method takes a RegisteredListener registration and Event event as parameters, and then checks if the listener is a PlayerListener. If so, it casts it as a PlayerListener and calls either the onPlayerJoin or onPlayerQuit method, depending on the type of event that was passed in.
863	This method handles events by first splitting the topic of the event into an array of parts. If the array has more than two parts and the first part matches the prefix, it will check to see what the second part of the topic is and act accordingly. If the second part is an update, it will call the receiveUpdate method with the item name and new state as parameters. If the second part is a command, it will call the receiveCommand method with the item name and command as parameters.
564	The @EncodeMethod(id=37) void loadGivenKeys(String name,List<Data> keys,boolean replaceExistingValues) method is used to load a given set of data keys into a specified name. It takes a string for the name, a list of data keys, and a boolean to determine whether existing values should be replaced.
10	This method deletes a FileShortcut using DLAppLocalServiceUtil.deleteFileShortcut(classPK) and throws PortalException, SystemException if any errors occur.
620	This method reads a byte from the input stream, and if the byte matches one of the four tags (DECLARATION_INFO_TAG, MEMBER_DECLARATION_INFO_TAG, REFERENCE_INFO_TAG, MEMBER_REFERENCE_INFO_TAG) a corresponding ItemInfo object is created and returned. If none of the tags match, an assertion error is thrown.
290	This method stores the given rule key and output file in the cache directory. It first creates a temporary cache file, copies the output file to it, and then moves the temp file to the cache folder with REPLACE_EXISTING. If an IOException occurs, it is logged and the temp file is deleted if it exists.
63	This method checks if the provided AsyncResult is data setup complete and if it is, checks for proxy settings and sets the system properties accordingly. If it is not data setup complete, it checks for any permanent failures and starts a delayed retry if needed.
387	This method is used to calculate the eigenvalues and eigenvectors of a given matrix A. It first checks if the cuda version is supported and if the data type is double. It then allocates the necessary resources, such as a CudaContext, cusolverDnHandle, and CublasPointer. It then invokes the cusolverDnDsyevd_bufferSize and cusolverDnDsyevd methods to calculate the eigenvalues and eigenvectors. The result is then registered with the allocator and A is then assigned the result.
574	This method uses the getView() method to create a contextual undo view. It uses a ContextualUndoView object to determine if the current view needs to be displayed as a content view or an undo view. If the view is determined to be an undo view, a countdown timer is started and the view's count down timer is updated accordingly.
760	This method initializes an existing Knowledge Session by setting a doRollback boolean to false. It then finds the SessionInfo associated with the session ID, and creates a SessionMarshallingHelper using the given KieBase, KieSessionConfiguration, and environment. The MarshallingConfiguration is set to not marshall process instances or work items. The sessionInfo is then set with the JPASessionMarshallingHelper, and the Ksession is loaded with the sessionInfo data and the JpaSessionInitializer. The InternalKnowledgeRuntime is then set with the session ID and EndOperationListenerImpl, and the SessionContext is created with the ksession's classloader and the ksession. Lastly, the TransactionInterceptor is created and the interceptors are added.
747	This method grants permissions to a package by checking if they have been requested and are present in the set of granted permissions. If the package is an updated system app, then it checks the old version of the package to see if the requested permissions have changed. It then grants the requested permissions to the package and updates the permission flags accordingly.
214	This method overrides the process() method and attempts to get a ScriptEngine and processFileOrScript. If a ScriptException or IOException occurs, it will log an error message.
107	This method processes a Presence packet by checking if the recipient has a group or not. If the group is not null, the method checks if the user exists in the chat room already. If the user does not exist, then the user is added to the chat room. The method also checks for any password or history requests and sends an error packet if the user is unauthorized, not allowed, already exists, room is locked, forbidden, or there is a conflict.
21	This method overrides the finalize() method, which checks if the mCloseGuard variable is not null, and if so, warns the user if it is open. It then calls the close() method. Additionally, this method throws a Throwable exception.
364	: This method iterates through a list of users and updates the rules for each user's app idle, device idle, and restrict power settings. The method utilizes the mPowerSaveTempWhitelistAppIds list to determine the appIds for the user.
794	This method creates a Reason object with a String parameter message.
57	This method creates an int array of 8573 elements, and then calls the zzUnpackRowMap method which assigns the result value to the offset variable.
478	This method creates a new Surface object using a SurfaceSession and a DisplayMetrics obtained from a given Display. The Surface is then set to a layer multiplier of 101 and its position is set to (0,0). Finally, a flag to draw the object is set to true.
951	This method returns a new Location object based on the values of a given block. If the block's world has a portal to the right or left of it, the Location returned is offset by one block in the x direction and one block in the z direction. Else, the Location returned is offset by one block in the x direction and one block in the z direction.
765	This method takes a StringBuilder and an array of GenericsTypes as parameters. It adds the name of each GenericsType to the StringBuilder, followed by a colon, and then adds any bounds to the GenericsType. Finally, it adds a '>' to the end of the StringBuilder.
37	This method retrieves a PrivateData object from a private data provider using the element name and namespace as arguments. The key is generated by calling the getProviderKey() method with the element name and namespace as arguments. The PrivateData object is then returned using the privateDataProviders.get() method.
551	This method creates a density map for a chunk with the dimensions of Configuration.CHUNK_DIMENSIONS using the calcDensity() function. The density map is triLerpDensityMapped and used to generate an inner and outer layer for the chunk using the GenerateInnerLayer() and GenerateOuterLayer() functions. The biome type for the chunk is calculated using the calcBiomeType() function.
87	This method populates the libsDirectory by first checking if libsDir() exists and if so, obtaining the list of files from the libsDir() and adding each file's name and absolute path to the libsList and libsFileList respectively.
682	This method attempts to retrieve the base configuration from a repository by first checking if it is a bare repository. If so, it creates a RevWalk and TreeWalk to traverse the repository and find the configuration file with the specified name. If the file is found, it is loaded and returned. If the repository is not bare, the method looks for the configuration file in the working tree and attempts to load it. If the file is not found, the method returns null.
734	This method creates a MultiUserChat object that takes a XMPPConnection, a room, and a MultiUserChatManager as parameters. It then creates several StanzaListeners that are responsible for processing packets, such as a messageListener, subjectListener, presenceListener, declinesListener, and presenceInterceptor. The StanzaListeners are responsible for handling different types of messages, such as messages, subjects, presences, and declines. The presenceListener is also responsible for checking for modifications in roles and affiliations, and for checking for presence codes in MUCUsers.
391	This method calculates the length of a line of text. It begins by retrieving the start and end points of the line, and checks if the line contains tabs. If so, tab stops are set. Then, the paragraph's direction is retrieved, and a TextLine object is obtained. The TextPaint object is set from the mPaint object, and the TextLine is set with the parameters of the line. If justification is required, the justify width is set. Finally, the width of the line is calculated and returned.
884	This method is used to stop tethering. It begins by checking and setting a connectivity instance, followed by getting an interface configuration. If the configuration is not null, it sets a link address to 0.0.0.0 and sets the interface configuration. If the untethering fails, an error is logged.
977	This method adds an input with a given name and Boolean value.
65	This method overrides the onCancelled function and checks for an existing result and bitmap in the result. If both are not null, the bitmap is recycled.
434	This method retrieves the BetaMemory and removes a specified InternalFactHandle if present. It then updates the constraints from the handle and iterates through the tuple memory to check if the criteria is met. If the criteria is met, the tuple is propagated and the matches are reduced by one.
644	This method uses an SQLSerializer object to generate a PreparedStatement for an insert query based on the provided columns and values. If batches are present, the method will add them to the statement. The statement is then prepared and set with parameters with the help of the prepareStatementAndSetParameters method.
964	This method checks if a particular tool has been suppressed. It first checks if the mySuppressions variable is not null, and if so, it iterates through the elements of the mySuppressions array to check if any of them is equal to the toolId or SuppressionUtil.ALL. If a match is found, the method returns true. Otherwise, it checks if the entity associated with this method is an instance of RefElementImpl and if so, then it checks if the tool is suppressed and returns the result.
176	This method takes in three parameters - a boolean indicating whether the background is dark, a ColorUIResource object, and a boolean indicating whether it is a high-contrast background. If the third parameter is set to false, the original ColorUIResource object is returned back. Otherwise, the method will return a ColorUIResource object that is darker or brighter based on the boolean value of the first parameter.
913	This method reads a line from a LineNumberReader and parses out the row, oldFlagged, and newFlagged values. It then creates a new RowFlagChange object with the values and returns it.
583	This method sets an OnImageAvailableListener to the calling thread and a Handler to the same thread, if the listener is not null and the Handler is null. If the Handler is null, a new Handler is created for the calling thread.
850	This method opens a camera with the given id and, if the device's Android version is higher than Jelly Bean MR1 and the camera is not null, it disables the shutter sound.
318	This method calculates a score for a given set of labels, loss function, and INDArray z. It first checks to make sure the labels and z have the same shape and throws an exception if they do not. It then enters a switch statement to calculate the score based on the specified loss function. Each calculation is done by performing various mathematical operations on the inputs. Lastly, if useRegularization is true, it adds the regularization term to the score before returning it.
549	This method overrides the agentConnected function, with the parameter packageName and IBinder agent. It checks if the BackupManagerServiceInterface is not null, and if it is not, it calls the agentConnected function with the given parameters.
783	This method is used to generate a key using a combination of the current time, a worker ID and a sequence. First, the current milliseconds is obtained from the time service. If the wait tolerate time difference is required, the current milliseconds are updated. If the last milliseconds equal the current milliseconds, the sequence is incremented and masked, and if this results in 0, the current milliseconds are wait until the next time. Otherwise, the sequence is set to a random number between 0 and 8. Finally, the last milliseconds is set to the current milliseconds, and the key is generated.
421	This method sets a ListAdapter for the drop down list. If an observer has not been created yet, it is created. The mAdapter is unregistered from the observer if it is not null, and the adapter is set to the mAdapter variable. The adapter is registered to the observer if it is not null, and the drop down list is set to the mAdapter.
246	This method provides an implementation of Representor for a UserWrapper object. It specifies the type as "Liferay:UserAccount" and "Person" and sets the identifier to User::getUserId. It also adds a date, "birthDate", and localized strings, "honorificPrefix" and "honorificSuffix", as well as a nested contact information object, which includes a Facebook, Skype, and Twitter username. The method also adds collections of related objects, such as roles and emails, and strings such as additionalName, alternateName, dashboardURL, email, familyName, gender, givenName, jobTitle, name, and profileURL.
523	This method uses mHandler.post() to execute a Runnable which calls mCallback.onInputUpdated() with the given inputId as an argument.
911	This method checks whether the surface is null and then calculates the delta from the current rotation and original rotation. It then loads the appropriate animations for each rotation. The animation duration is restricted and the scale is adjusted. Lastly, a BlackFrame is created to fill the transaction.
969	This method retrieves a float value based on a given offset. If the 'mHorizontals' array is null, or the offset is out of the array's bounds, the 'getPrimaryHorizontal' method is called, which returns the float value. Otherwise, the float value is retrieved from the 'mHorizontals' array.
118	This method creates an alert window with a list of applications that fits the intent criteria. The user can select from the list or if there is only one application, it will start the application automatically. If the always use option is enabled, a choice mode will be set to single and buttons to always and once will be displayed.
567	This method checks the deltaY, incrementalDeltaY, childCount, firstTop, lastBottom, listPadding, spaceAbove, end, spaceBelow, height values to determine if scrolling is possible. If the conditions are met, it will detach the views from the parent, offset the children, fill the gap, position the selector and invoke the listener.
979	This method sets the user visible hint and checks if the user is visible, the state is less than started, and the fragment manager is not null. If these conditions are met, the fragment manager will perform a pending deferred start. It then sets the user visible hint and defer start to the opposite boolean of isVisibleToUser.
150	This method clones a RemoteView, checking that it is the root of the hierarchy before doing so. The method obtains a Parcel, sets the mIsRoot field to false, writes it to the parcel, sets the Parcel's data position to 0, sets mIsRoot to true, creates a new RemoteView with the Parcel, sets the new RemoteView's mIsRoot field to true, and recycles the Parcel.
124	This method takes in a long value as an argument and checks if it is greater than or equal to -1. If so, a new BlockPointer is created with that value. Otherwise, a CorruptedCacheException is thrown.
228	This method retrieves an attribute from the cluster map using the buildAttributeName function. If deferredWrite is set to true, the attribute is first searched for in the localCache map, and if it is not found, it is retrieved from the clusterMap and stored in the localCache. The retrieved attribute is then returned.
234	This method sets the doc property of the current class to a DocWrapper object passed in as a parameter.
902	This method retrieves the pattern for the name mask and replaces any "*" or "?" with "%" and "_" respectively. If the match rule is set to prefix match and the name mask does not already end with a "%", the name mask is appended with a "%".
780	This method takes in a CodeBuilder object and an array of Class objects as parameters. It then iterates through the array, comparing the number of arguments in the target method and the number of arguments in the interceptor. The method then binds the arguments from the target method and interceptor with the CodeBuilder object, assigning 'null' as the value for any extra arguments in the interceptor.
590	This method runs the StackMoveTask, which takes three required arguments: taskId, stackId, and toTop. The taskId and stackId are parsed as integers, while the toTop parameter is a boolean whose value is determined from the toTopStr argument. The method then attempts to move the task to the stack as specified, and throws an error if the toTop argument is invalid.
449	This method implements a routing algorithm to identify the data source for a given SQL statement. If the database sharding only option is selected, the DatabaseRouter is used to determine the data source. If there is only one logic table, the SingleTableRouter is used to route the SQL statement. Otherwise, if all the logic tables are binding tables, the BindingTablesRouter is used to route the SQL statement. Otherwise, the MixedTablesRouter is used to route the SQL statement.
159	This method determines whether notifications are enabled depending on the input Peer type and whether or not a mention has been made. It checks the settings module to see if notifications are enabled, and will return false if they are not. If the peer type is a group, it will check if group notifications are enabled, and if so, if a notification is enabled for the specific peer. If group notifications are enabled, but only mentions are enabled, then the method will return true if a mention has been made, or false otherwise.
608	This method takes a DetailAST object as an argument and throws an IllegalArgumentException if it is null. It then checks the type of the DetailAST object and assigns the annotationHolder accordingly. If the type is ENUM_CONSTANT_DEF or PACKAGE_DEF, the annotationHolder is assigned the ANNOTATIONS token, otherwise, the MODIFIERS token is assigned to the annotationHolder. The method returns the annotationHolder.
972	This method returns the mobile network operator of a device as a string, by combining the mobile country code (mMccStr) and mobile network code (mMncStr) together. It returns null if either of the codes are not available.
665	: This method iterates through the array of chunks, accessing the element at row 0 of each chunk and determining if the value is a valid number. If it is, the value is adjusted by subtracting the mean and multiplying by the mults value. The adjusted value is then squared and added to the total sum. Finally, the means value is set to null.
257	This method retrieves cached messages from a BroadcasterTracker and adds them to a list. If the Broadcaster is not available, it is ignored. Filters are applied to the cached messages before being added to the list and the resulting list is returned.
755	This method calculates the time until a particular level is reached by taking the time elapsed in seconds, the amount of experience gained, and the remaining experience needed. It then calculates the remaining seconds by dividing the remaining experience by the experience gained and multiplying the result by the time elapsed in seconds. It then calculates the duration in days, hours, minutes, and seconds and formats them into a string.
422	This method creates a new SpringBusFactory, creates a Bus with a busFile, creates a SOAPService with a specified wsdlURL and SERVICE_NAME, and calls implicitPropagation and explicitPropagation on the port. If an exception is thrown, it is caught and printed, and the system exits with a status of 1.
669	This method checks the type of a DetailAST object and based on the type, processes the object by calling various methods. If the type is TokenTypes.PACKAGE_DEF, the method checks the mAllowUndeclaredRTE flag before calling the processPackage method. Similarly, if the type is TokenTypes.IMPORT, it checks the mAllowUndeclaredRTE flag before calling the processImport method. Otherwise, the processMethod method is called.
708	This method updates the position of the cursor and anchor information in an active text view. It first checks if an input method is active and if so, sets the selection range, matrix and composing text. It then checks if the selection start is greater than 0 and adds the insertion marker location if so. Finally, it updates the cursor and anchor information using the built builder.
970	This method returns a DatabaseLocker object, creating a new one if one does not already exist and the isUseDatabaseLock() method returns true.
52	This method checks if USB RNDIS has been started by enforcing permission and sending a command to mConnector. If the response code is equal to NetdResponseCode.UsbRNDISStatusResult, then it checks if the fourth token is "started", which returns true or false accordingly. If an unexpected response code is received, an IllegalStateException is thrown. An empty response will also throw an IllegalStateException.
429	This method creates a HelpMenuItem with a title, description, icon, helpFileName, and FragmentActivity as parameters. It sets the title to the string associated with the name parameter and the description to either null or the string associated with the description parameter. The icon, helpFileName, and FragmentActivity parameters remain unchanged. Lastly, it sets an onClickListener to a ShowArticleOnTouchListener with the helpFileName, activity, and title as parameters.
948	This method creates an Error object with a default access modifier that contains a message.
179	This method retrieves the title of a note by first checking if the activity exists and the EditText view exists, then retrieving the text from the EditText view if it exists, or by retrieving the text from the title field if the EditText view does not exist.
790	This method is used to show the soft input view. It first checks if the input view is shown, then sets the input view flags to 0. If the input view is requested to be shown, the showWindow() method is called. Finally, it checks if the input view is shown or not and returns the result to the result receiver.
655	This method reads in an XmlPullParser in and an ActivityStackSupervisor stackSupervisor as parameters. It parses the XmlPullParser to retrieve attributes related to an ActivityRecord, including the ID, launchedFromUID, launchedFromPackage, resolvedType, componentSpecified, userID, and TaskDescription. It then loops through the XML to get tags for the Intent and PersistableBundle, and retrieves the intent and persistentState from them. It resolves the activity from the intent and resolvedType, then creates an ActivityRecord with the retrieved information. Finally, it sets the taskDescription, persistentState, and createTime of the ActivityRecord and returns it.
918	This method is used to place a limit order on Poloniex. It takes a LimitOrder object as a parameter and uses the buy() and sell() methods to determine the trade response. If the limit order is a PoloniexLimitOrder, the response is set to the order. The order number is then returned as a string. If the order type is either BID or EXIT_ASK, the buy() method is used; otherwise, the sell() method is used.
361	This method creates a new UserResource object and uses a mapper to map the UserResource object to a Principal and Credential. It then uses the SCIM service to create a "Users" object and return a boolean value indicating if the creation was successful or not.
189	This method is used to send a multipart text message. It first gets a reference number and creates a SmsHeader.ConcatRef with the given information. It then creates PendingIntents for both the sentIntents and deliveryIntents and constructs a SubmitPdu with the scAddress, destinationAddress, the part of the message, and the byte array of the SmsHeader. Finally, it calls the sendRawPdu method with the encodedScAddress, encodedMessage, sentIntent and deliveryIntent.
383	This method takes a Collection and a Comparator as parameters and returns the maximum value of the Collection based on the Comparator. The Iterator iterates through the Collection and the comparator then compares the values. If the answer is null or the comparison between the current value and answer is greater than 0, the current value is set to the answer. Finally, the answer is returned.
317	This method creates a ByteArrayOutputStream and an executor, and uses the CommandLine class to execute the system_profiler SPUSBDataType command. If any Throwable is thrown, it calls the super method, preListAllCandidateDevices(), to handle the exception.
627	This method computes the declared function type from a given JSDocInfo, function name, node declaration, owner type, and parent scope. It checks for the existence of a function type from the callee, and if found, it calculates the function declared type from the callee. It then creates a function type builder, checks for a constructor type, and adds the owner type and nominal types if applicable. Finally, it builds the declared function type and sets the constructor function if applicable.
937	This method adds an IOnSubscriptionsChangedListener as a callback for when a subscription change occurs. It enforces the permission to read phone state, checks if the calling package is allowed to read the phone state, and creates a new record if the callback is not already registered. If the subscription change has already occurred, the callback is sent to the record. Otherwise, no callback is sent.
883	This method initializes the token end offset, token type, and buffer index and checks if the token end offset is equal to the buffer end offset. It then checks if the token is after a line break and if so, adjusts the token end offset accordingly. Finally, it checks if there is leading space and adjusts the token end offset and token type accordingly before calling the flexLocateToken() method.
607	This method uses onMeasure to determine the dimensions of the children views of the notification. It starts by setting the maximum size of the height to either the exact height specified or the maximum height if at most was specified. It then determines the height of the expanded view and contracted view, making sure to adjust the size accordingly if the layout parameters specify it. The heads up view is then measured, and then the single line view and ambient child views are measured. Finally, the maximum child height is set as the own height, with the maximum size being the specified size.
346	This method extracts data from XML documents and adds it to the list of headers. It parses the XML document using the XmlResourceParser and obtains the attributes of the preference header. It then obtains the header's id, title, summary, breadCrumbTitle, breadCrumbShortTitle, iconRes, and fragment. It also parses bundle extra and intent and checks the size of the bundle to add the fragment arguments. Finally, it adds the header to the target list.
697	This method allows the user to retrieve a Collection of GenericItems of a certain type, filtered by a list of tags. The method accepts a Class typeFilter and a list of tags as parameters. It will then retrieve a Collection of Items by the given tags and will loop through the Collection to check if the Item is an instance of the typeFilter. If the Item is an instance of the typeFilter, it will be added to the Collection of filteredItems and the method will return this Collection.
661	This method initializes a DecimalFormat object using a locale and a map of properties. The Boolean useGrouping and Integer maximum and minimum digits for both integer and fractional parts can be specified using the properties map. Additionally, a rounding mode can be specified. Finally, a StringBuffer and FieldPosition object are instantiated.
646	This method creates a PlanBuilder object with a WindowNode containing all the data related to the window functions that was previously defined. The PlanBuilder object is then appended with projections containing the window functions' arguments, partition by, and order by expressions, as well as the frame start and end expressions, if they were defined. The WindowNode also contains the frame type and frame start/frame end types, as well as the orderings and frame. Lastly, the rewritten function is assigned to a new symbol with the right signature, and the need for coercion is determined.
379	This method checks whether the message buffer or byte buffer is empty. If the message buffer is not null, it returns whether the message buffer is empty; otherwise, it returns the opposite of the readable status of the byte buffer. If the bypass direction is either 1 or 2, an UnsupportedOperationException is thrown. If the bypass direction is none of the above, an Error is thrown.
750	This method returns a boolean value of the optional parameter "kylin.query.disable-cube-noagg-sql" which is set to "false" by default.
24	This method configures a collection of job plugins by resolving the file object from the PluginConfig and checking if it is readable. If the file is a .jar, it builds the job from the file object and adds it to the collection. If it is a folder, it checks for .svn and .cvs folders, builds the job from the file object, and adds it to the collection.
20	This method is a public boolean that returns a boolean based on the layout direction being set to right-to-left (View.LAYOUT_DIRECTION_RTL).
427	This method calculates the LTE level of a signal by evaluating the LTE Received Signal Strength Indication (RSRP) and the LTE Reference Signal Signal-to-Noise Ratio (RSSNR), as well as the LTE signal strength. The RSRP is used to determine the signal strength level, while the RSSNR and signal strength are used to confirm the level of the signal. If the RSRP is invalid, or out of the range of the thresholds, the signal strength level is set to NONE OR UNKNOWN.
269	This method allows for the creation and alteration of index templates in an ElasticSearch cluster. It first checks for the presence of a name and template in the request, and then validates them. It then builds the index template metadata, including the order, template, settings, mappings, and customs. Finally, the cluster service submits a state update task to create the index template, and the listener is informed of the response.
968	This method creates a WireFormatFactory from a given map of options and a wireFormat. If no wireFormat is specified, it uses the default wireFormat. It then sets the properties of the WireFormatFactory and removes the wireFormat from the options map before returning it. If an error occurs, an IOException is thrown.
548	This method writes an integer TAG and an integer viewId to a parcel dest as well as an array of typed remoteInputs with the given flags.
453	This method uses an override to handle a RestRequest and RestChannel. A ClusterStateRequest is created and an ActionListener is used to create an XContentBuilder object. This builder object is then used to create a persistent and transient object containing key-value pairs from the ClusterStateResponse. Finally, an XContentThrowableRestResponse is sent to the channel.
726	This method adds a sink function to a given input stream and wraps it in a TypeSerializerWrapper. It then adds the sink to the jobGraphBuilder and serializes the sink function. Finally, it connects the input stream and the return stream and returns it.
481	This method fetches media from the MediaUtils library. If the media is not in the media store, it is downloaded using an asynchronous task. The newly downloaded media is then added to the post. If the media is in the media store, it is added directly to the post.
851	This method creates a Toast notification with a given context, toast resource ID, and toast length. If an error occurs, the exception is logged with a warning level.
372	This method refreshes the display view and sets the text view of the calendar. If the calendar is initialized, it checks if there is an event and sets the text based on this. If not initialized, it checks the default index of the calendar and sets the text according to that.
274	This method is used to compare two RestrictionEntry objects. It begins by checking if the objects are equal and then checks the type and the key of the objects. It then checks if either the mCurrentValues, mRestrictions, or mCurrentValue is null and the same between both objects. If all of these conditions are met, the method returns true.
617	This method begins by checking if the native data has been set up. If not, it returns false. It then switches the connectable setting to false and pauses the thread for 50 milliseconds. Finally, it updates the SDP records and returns true.
205	This method checks the DocValuesIterator for the specified field and throws a RuntimeException if it does not meet expectations. It compares the returned values from advance() and advanceExact() to ensure documents are found in the correct order and with the correct docID.
104	This method generates an ordered array of StorageTierInfo objects by retrieving the global StorageTierAssoc from the BlockMaster, as well as the TotalBytesOnTiers and UsedBytesOnTiers Maps. A loop then iterates through the StorageTierAssoc to get the associated tier alias, and if the total bytes is greater than zero and the key is contained in the TotalBytesOnTiers map, a Storage TierInfo object is created and added to the list of infos. The list is then converted to an array and returned.
907	This method creates a LockStore by first retrieving the NodeEngine from the mapServiceContext, then obtaining the shared LockService from the NodeEngine. If the LockService is not null, the LockStore is created by using the partitionId and the DefaultObjectNamespace of the MapService.
259	This method sets the visibility and content of a notification based on the input parameters. It accesses resources, the NotificationManager, and the Context to create a Notification object with the specified parameters. It also uses logging to record the parameters used to create the notification. The notification is then either shown or cancelled, depending on the visibility parameter. Additionally, this version of the method uses the UserHandle to notify all users.
875	This method checks for modem activity info and checks for the maximum time spent in each TX power level. If the highest power level is detected it adds a flag to the history record, and if the TX power level is lower than the highest it removes the flag from the history record.
831	PyLineWrapPositionStrategy is a method that adds rules for wrapping text, such as adding a new rule for a comma set to wrap after, adding a rule for a space and tab, a rule for a left parenthesis, a rule for a left bracket, a rule for a left brace, and a rule for a period set to wrap before.
689	This method runs inspections on a project with an AnalysisScope. It sets the searchInLibraries to false, saves all documents, creates a GlobalInspectionContextImpl, creates a migration profile, sets the external profile and current scope, and then runs the inspection on the scope.
535	This method overrides the onGnssStopped() method and checks if the mGnssCallback is not null. If it is not, it obtains a Message object and sets what to GPS_EVENT_STOPPED, before sending the message to the mGnssHandler.
445	This method utilizes GL20.glUniform2fv() to pass an int location, int count, a float array 'v', and an int offset to the function. It then converts the float array to a float buffer using the toFloatBuffer() method with an offset and count multiplied by two.
632	This method overrides the applyFix method for a project and a problem descriptor. It retrieves the PsiElement from the descriptor and if it is not null, replaces it with a lambda expression, setting the two parameters to false and false respectively.
626	This method uses the getDatePart() and dateAndTimeFromValue() functions to determine the field and the date value. It then uses a switch statement to determine the necessary calculation and assigns the calculated value to either the date or time variables. If the calculated value exceeds the maximum or minimum value, a DbException is thrown. The method then returns a value based on the calculation.
264	This method is used to dump application memory usage. The system clock is used to record the uptime and realtime, which are printed out to the writer if it is a check in request. For each process, the memory info is printed out to the writer. In the case of a remote exception, the writer is informed.
935	This method sets the typeface of the title and byline views to either Alegreya Sans Black and Alegreya Sans Medium, or Alegreya Black Italic and Alegreya Italic, depending on the value of currentArtwork.metaFont. It then sets the title and byline of the views accordingly, and displays the currentArtwork's attribution if it is not empty. Finally, it enables the metadata view and sets its onClickListener to start the viewIntent of the currentArtwork.
282	This method overrides the protected onFinishInflate() function. It retrieves a Drawable from the Resources class, gets the dimension from the dimen resource and finds the view from the handle. It then sets a content description from the string resource. The difference here is that the dimension is retrieved using the getDimensionPixelSize() method instead of getDimension().
871	This method attempts to read and check the property of a file, located at the given path. It uses a loop to try and read the property up to a maximum number of attempts. If the property is successfully read, the old and new versions, the last fingerprint and the oat directory are stored while the validity of the MD5 is checked. If successful, a SharePatchInfo object is created and returned.
572	This method attempts to open a connection to a data source, set connection defaults such as autoCommit, and transactionIsolationLevel, run context bootstrap, and initialize context state. If the connection is not closed, the method closes it before it attempts to open a new connection. In the end, it adds the context to the data source.
931	This method allows for the setting of the streaming mode by passing in a byte value. No exception is thrown if an invalid parameter is passed in.
25	This method accepts a Uri, projection, selection, selectionArgs, sortOrder, and cancellationSignal as parameters. It first checks that the Uri is not null and then creates a remote cancellation signal if one is provided. It then queries the content provider using the provided parameters, and returns the cursor if it is not null. If the package name is not "com.google.android.gms" or "com.google.android.syncadapters.contacts", it wraps the cursor in a CursorWrapperInner. It then catches a DeadObjectException and calls the mContentResolver.unstableProviderDied method if it is thrown and not stable. Finally, it calls the afterRemote method.
532	This method applies a tint to mVpn, mAirplane, mWifiActivity, and mEthernet. Additionally, it applies a dark intensity to mNoSims, mWifi, and mEthernet. Lastly, it applies a tint and a dark intensity to the objects stored in the mPhoneStates array.
22	This method optimizes a selector by finding an optimizable selector class, setting two fields - selectedKeysField and publicSelectedKeysField - to a SelectionKeysSet and logging the successful optimization.
81	This method cancels all tasks in the futures collection for the specified snapshot. All tasks are cancelled with the boolean value of "false" and any cancelled elements in the task pool are removed. Lastly, the stop() command is called to complete the process.
536	This method performs a search for a given text using the SearchUICore class. It uses a ResultMatcher to publish the search results, and if paused or cancelled, adds the results to a SearchResultCollection. It then updates the search result and sets the ResultCollection to null if necessary.
131	This method checks if the given base type is a checkbox and then adds the localized input name to the list of checkboxnames in the request attribute.
350	This method validates the provided Uplo argument, as well as the SYR2K element, A, B and C Allocations. It then determines the size of the K argument based on the Transpose argument. Finally, it calls the nScriptIntrinsicBLAS_Double with the appropriate RsBlas_dsyr2k argument.
503	This method attempts to get a template loader for a given path. If file system access is preferred, it attempts to resolve the path to a file. If successful, it returns a FileTemplateLoader. Otherwise, it falls back to a SpringTemplateLoader.
628	This method takes a ResolvedDependencyResult candidate as an argument and uses the ModuleComponentIdentifier object of the published candidate to create a String that contains the group, module and version of the candidate. This String is then checked against the provided stringNotation, and the method returns a boolean value based on the comparison.
164	This method creates a JFXTabPaneSkin which is a subclass of TabPane that inherits from the TabPaneBehavior class. It creates an observable array list of tabContentHolders, a HeaderContainer, an AnchorPane for tabsContainer, and a Rectangle for tabsClip. It also adds a listener for changes in the tabs and registers change listeners for the selected item property, width property, and height property.
186	This method checks whether a type contains generics by using a PsiTypeVisitor. It checks if the type has a PsiTypeParameter, and if it has parameters it iterates through them to check if they have generics. If any of the parameters have generics, the method returns true.
203	This method registers a protocol provider and checks the registration state of the provider. If the provider is registered, it sets an authorization handler and synchronizes the protocol provider with the local contact list. If the provider fails to authenticate, it displays an error message and if the provider connection fails, it displays a message asking the user to retry. If the connection expires, it also displays an error message and if the provider is unregistered, it also displays an error message.
466	This method upgrades settings for a specified userId from an old version to a new version. It starts by initializing the current version to the old version. It then updates settings such as ZEN_MODE, MODE_RINGER, DOUBLE_TAP_TO_WAKE, NFC_PAYMENT_DEFAULT_COMPONENT, ADD_USERS_WHEN_LOCKED, BLUETOOTH_DISABLED_PROFILES, SHOW_IME_WITH_HARD_KEYBOARD, and ENABLED_VR_LISTENERS. Finally, it also checks if the user is a managed profile and updates the settings for LOCK_SCREEN_SHOW_NOTIFICATIONS and LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS.
556	This method writes the date to a MapOrListWriterImpl object. If the allTextMode flag is enabled, the date is written as a string. If not, the date is written as a number of milliseconds since the epoch.
832	This method calculates the minimum and maximum values for a chart. If fixedValues is set to false, the minimum value will be set to the YMin value of the data and the maximum value will be set to the sum of YMin and YMax of the data. The difference between the YMax and YChartMin values is stored in mDeltaY, while the difference between the size of the XVals and 1 is stored in mDeltaX.
930	This method applies a click pending intent on a view that is passed to the method. It checks if the view is a collection child and if the target SDK version is at least Jelly Bean, and it sets the click listener with the pending intent. The click listener will get the position of the view on the screen and set the source bounds of the intent accordingly.
742	This method checks to see if a specified permission has been granted. It first retrieves the PackageManager from the Context and checks if it is not null. If it is not null, the method then attempts to check the permission against the PackageName and returns true if the permission is granted. If any Throwable is thrown, the method will return false.
433	This method uses the JsonWriter to create an object that contains the group's id, name, description, and the number of members in the group, if the corresponding fields are present in the Set of fields.
115	This method checks for the network type and feature validity, and creates a FeatureUser object with the given network type, feature, and binder. It then checks if the network type is protected, and if the network is already connected, connecting, or available. If it is, the method handles DNS configuration changes and returns a result. Otherwise, it reconnects the special network and returns a result.
442	This method creates a JSON subtree by adding keys and values to a JSONObject destination. If the destination contains a JSONObject, it uses the object as an intermediate destination, and if it contains a JSONArray, it uses the first JSONObject found in the array as an intermediate destination. It logs a warning if an unknown subtree type is found.
720	This method process a SocketWrapper, sets the stage to parse, sets the soTimeout and keepAliveTimeout, reads the request header message, checks for unexpected messages, prepares the request, services the request, and finishes the request. If an error occurs, the response status is set to 500 and the SocketState is set to closed. If no error occurs, the SocketState is set to open or long depending on if it is async.
688	: This method overrides the onFirstFix() method and checks whether the mGnssCallback is not null. If it is not null, the method sets the timeToFirstFix variable to the argument ttff and creates a message object. This message object is then sent to the mGnssHandler.
629	This method checks if a broadcast variable has been materialized and not disposed, and if it has not been transformed yet, it will be initialized with the given initializer and the data will be set to null.
586	This method attempts to retrieve a test class. It begins by retrieving the class name from a separate method. If the class name is null, it returns null. Otherwise, it attempts to return a class object corresponding to the class name using the Class.forName() method with the addition of the getClass().getClassLoader() parameter. If it is unable to do so, it returns null.
416	This method updates a directory by executing the 'svn up' command. It then uses the 'svnmerge.py' command to retrieve a list of versions which it stores in the 'verList' variable. It then prints out the root directory of the repository and loops through the versions in 'verList', prompting the user to merge, block, ignore or record each version. If the user chooses to merge, the 'svnmerge.py' command is used to execute the merge and the 'svnmerge.py' command is also used to block or record the versions if the user chooses to do so.
962	This method creates a ShapeDrawable object with a ShapeState parameter. If the ShapeState parameter is not null and has a tint, a PorterDuffColorFilter is created using the color of the tint and the tint mode of the ShapeState parameter.
806	This method generates a RemoteViews object for an Action object. It sets the text view compound drawables, text view text, on click pending intent and content description based on the Action object. It also processes the legacy action and returns the RemoteViews object.
758	This method equates the two given DataFlowValues, 'a' and 'b'. It creates a new builder hashmap and assigns the nullability of 'a' and 'b' to it. It then compares the nullability of 'a' and 'b' to refine the nullability, and returns a changed DataFlowInfo if any changes have been made.
141	This method copies an array of BaseObj objects into the existing allocation. It first validates that the array size is the same as the size of the allocation, and then creates an array of all the IDs of the BaseObj objects. Finally, it copies the array of IDs into the existing allocation without any additional checks.
696	This method attempts to divide an Integer by a Double. It first checks if the call is valid, and if it is, it performs the division. If the call is not valid, or there is a ClassCastException, the super.call method is used.
452	This method uses an OpenBitSet to clone an existing set of bits and then either uses a BitDocSet or DocIterator to perform an andNot operation. Once the operation is completed, a new BitDocSet is returned.
881	This method initializes listeners for a drawer. Depending on the direction of the drawer, the alignment of the side pane is set accordingly. A double binding is also set for the initial translate X value. Event handlers are then added for mouse pressed, dragged, and released, as well as for the side pane. The opacity of the overlay pane is also updated accordingly. Finally, a hold timer is set and a partial transition is created.
366	This method creates a SequenceGrabber which allows for capturing video data. A QDRect object is created and a QDGraphics object is instantiated to store the video data. The data is stored in a PixelData object, and the dataRowBytes, dataWidth and dataHeight is calculated. Finally, a thread is created to start the capturing process.
128	This method attempts to use the ITelephony interface to check if the system is idle. If the ITelephony interface is accessible, it will return the result of the isIdle(getOpPackageName()) method. Otherwise, it will return true.
456	This method creates an SQLExecutionEvent instance based on the SQLType provided. If SQLType is DQL, a DQLExecutionEvent is created with the RouteUnit of the SQLExecuteUnit, the given parameters, and the given URL. If SQLType is DML, a DMLExecutionEvent is created with the RouteUnit of the SQLExecuteUnit, the given parameters, and the given URL. Otherwise, a SQLExecutionEvent is created with the RouteUnit of the SQLExecuteUnit, the given parameters, and the given URL.
506	This method uses the private CachedIntrospectionResults() to obtain BeanInfo for a class. It uses a for loop to iterate over a list of BeanInfoFactories and attempts to get the BeanInfo from each one. If none of them return a valid BeanInfo, then it uses the Introspector.getBeanInfo() method. The method then caches the PropertyDescriptors and creates a LinkedHashMap to store them. It also creates a ConcurrentReferenceHashMap to store the TypeDescriptors.
352	This method takes a build target and action info as parameters and uploads the inputs necessary for remote execution. It uses the event bus to send a state event and the content addressed storage to add the missing data, which is then transformed into action info with no required data. Additionally, it uses the direct executor for more efficient execution.
657	This method resets all instances to null in a synchronized manner.
509	This method rebuilds the list of activities that can handle the given intent. If a base resolve list is available, it is used. Otherwise, a query is run against the PackageManager to get the list of activities that can handle the intent. This list is then filtered, and only activities with the appropriate permissions are kept. The activities are then sorted, and any initial intents are added to the list. Finally, the group of activities is processed one by one.
230	The connectTo() method of the AbstractJobVertex class allows for a connection to be established to the given vertex with a bipartite distribution pattern and with a broadcast flag.
229	This method checks if a drawer item is valid. It takes in a position and a boolean value, includeOffset. If includeOffset is true, the method will check if the size of mDrawerItems is greater than the position minus the header offset, and if the position minus the header offset is greater than -1. If includeOffset is false, the method will check if the size of mDrawerItems is greater than the position, and if the position is greater than -1. If either check is true, the method returns true, else it returns false.
138	This method generates a URL for a given FileEntry object. It creates a StringBundler object and appends the portal URL if the absoluteURL boolean is set to true. It then adds a path context and the file entry's group ID and title, ensuring that the title is original if it is in the trash. It then adds the file entry's UUID and query string, as well as a workflow status if the portlet key is set to the trash. It then checks if the session ID should be added to the URL and returns the generated URL.
289	This method moves the caret to the next paragraph in an editor. It first calls the SearchHelper to find the next paragraph given a count. If the result of the search is valid, the EditorHelper is called to normalize the offset with a true value. If the result of the search is invalid, -1 is returned.
54	This method updates the icons based on changes to the configuration, such as orientation, densityDpi and layoutDirection. The icons affected include mDockedIcon, mBackIcon, mBackLandIcon, mBackAltIcon, mBackAltLandIcon, mHomeDefaultIcon, mRecentIcon, mMenuIcon and mAccessibilityIcon. The dark and light versions of the icons are retrieved from the drawable resources. If ALTERNATE_CAR_MODE_UI is enabled, the car mode icons are also updated.
486	This method attempts to disable a network given its network ID by calling the 'mService.disableNetwork()' method with the package name from the context. If the method fails, an exception is thrown from the system server.
943	This method creates a Map object containing Command and ClientCommandHandler objects. It puts various Command objects as keys, such as SADD, SREMOVE, SCONTAINS, etc., and adds ClientCommandHandler objects as their corresponding values. It also adds CollectionItemListenHandler objects to the map, with a getCollectionProxyId() method to determine the type of the CollectionProxyId object. Additionally, it adds UnlockHandler, TryLockHandler, and ListenHandler objects to the map.
767	This method overrides the getOutline() method and sets the outline's alpha value to 0.0f if the bitmap is null or has an alpha value.
398	: The StringNumberWidget method creates a widget that allows user input of numbers and certain special characters. It sets the text size, input type, scrolling, and single line properties of the widget. Additionally, it sets the background, focusable, and clickable properties to read-only if the prompt is read-only. Finally, it sets the answer value in the widget if the answer value exists for the prompt.
739	This method creates a SashForm object and adds a Tree object to it. The Tree object is set with various properties such as SWT.SINGLE, SWT.BORDER, FillLayout, and TreeMemory. Various TreeItem objects are added to the Tree object to give it categories such as Connections, Steps, and Plugins. StepLoader is used to get Steps from StepPlugin, and these Steps are added to the TreeItem objects. Finally, various Listeners and SelectionAdapter objects are added to the Tree, along with tooltips, drag sources, and a set of weights.
846	This method first checks if the graph is open, and if it is not, returns. It then removes the registration time and any open transactions from the global configuration. The open transactions are then closed and any exceptions that occur in doing so are noted. If there is only one exception, an illegal state exception is thrown, otherwise if there are multiple exceptions, an illegal state exception is thrown with details about the number of exceptions. Finally, the super close method is called, the ID assigner is closed, the backend is closed, the query cache is closed, the serializer is closed, and the shutdown hook is removed before setting the open flag to false.
534	: This method disables a given user's access to a certain action. It calls the manageDisableListLocked() method with the userId and other parameters, followed by the gatherDisableActionsLocked() method to determine the net result of the disable action with respect to the mCurrentUserId. After that, the mHandler.post() method is called to inform the mNotificationCallbacks of the disabled action, and if the mBar object is present, then the mBar.disable() method is called to disable the action.
319	This method takes in a Context and a long number of milliseconds and formats that time into a short elapsed time. The program first divides the milliseconds into seconds and then sets the days, hours, and minutes accordingly. The program then uses a MeasureFormat to format the time into a short elapsed time in days, hours, minutes, or seconds depending on the length of time, with the addition of an extra check for zero minutes or seconds.
995	This method obtains a MotionEvent object and creates a clone of it by copying the mDeviceId, mEdgeFlags, mDownTime, mEventTimeNano, mAction, mNumPointers, mRawX, mRawY, mMetaState, mXPrecision, mYPrecision, mTimeSamples, mStateSamples, and mDataSamples to the clone.
634	This method is used to change the surface of the holder when the format, width, or height changes. It takes in the SurfaceHolder, format, width, and height as parameters, and if the mRS is not null, the surface is set accordingly. It is synchronized, meaning that it can only be accessed by one thread at a time.
987	This method enforces calling permission and checks if the activity is null, has no process, or if the caller is not the top activity. It then creates a bundle of args and puts the package name and UID in the bundle. It then calls the activity's thread to request assist context extras and adds the PendingAssistExtras to the pending extras list and posts the delayed request with a timeout.
842	This method creates a RecursiveNodeIterator object with a given node. The iterator contains a stack of iterators, and each iterator holds a boolean indicating whether the node has been visited. The 'next()' method will return the node if it has not been visited, and throw a NoSuchElementException otherwise. The 'hasNext()' method will return true if the node has not been visited and false otherwise.
368	This method checks if the given slot is a BuildingSlotBlock in which case it returns, otherwise it creates a LinkedList of ItemStacks for the slot's requirements. If the game type is Creative, it adds the stacks to the slot, otherwise it iterates through the inventory and checks if the items match the requirements and if so, consumes the items, adding them to the slot.
984	This method returns a PropertyDescriptor object for the given property name, throwing an InvalidPropertyException if the property is not found.
736	This method creates a JDBCCallableStatementImpl object with a JDBCSession connection, a CallableStatement original, a query (which can be null), and a boolean indicating whether logging is enabled or disabled. The procResults field is initialized with a JDBCResultSetCallable object, and the findProcedure method is used to find the procedure defined by the query. Binding is then performed depending on the type of procedure. If the procedure is not null, then the parameters are extracted and added to the procResults column. Otherwise, the parameter meta data is extracted and the columns are added to the procResults. Finally, a row is added to the procResults.
588	This method creates a new spinner if one does not already exist, sets its style attribute to actionDropDownStyle, and then sets its layout parameters as wrap content with gravity at the start and center vertically.
170	This method sets the submodel index and creates metrics for the training and validation frames. It also sets the threshold value for binomial models and creates the global beta array, which is filled with the value of the submodel's beta.
358	This method creates a PositionScroller and uses it to start a smooth scroll from the given position, with the given offset.
472	This method creates a map of valid encodings by iterating through the elements in the factoryMap and adding the valid encodings to the map. If the current element's first element is already present in the map, it checks if its second element is higher than the one in the map and if it is, then it continues. Finally, it adds the DictionaryDimEnc.ENCODING_NAME element to the map and returns it.
218	This method initializes an engine for text-to-speech (TTS) by checking if the given context is different than the existing one and if the TTS is already declared. It then creates a new locale based on the language provided and sets up the TTS. It then sets the language based on the locale, and sets the speech rate if it is different from 1. It also sets a listener for when utterance has completed and abandons audio focus when all utterances are completed.
619	This method adds a resource to the context with the name and type provided by the annotations and the default name and default type. If the type is a string, character, integer, boolean, double, byte, short, long or float, a ContextEnvironment is created. If the type is a Service, a ContextService is created. If the type is a DataSource, ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, Session, URL, ConnectionFactory or ORB, a ContextResource is created. If the type is a Queue or Topic, a MessageDestinationRef is created. Lastly, if the type is an InteractionSpec, UserTransaction or something else, a ContextResourceEnvRef is created.
761	This method grants ownership by changing the affiliation of the specified jid to 'owner' with no parameters.
712	This method retrieves the build and version numbers of the ApplicationInfo instance and sets the values to the myBuildNumber and myVersionNumber variables respectively. If a major version and minor version are present, it concatenates them to create a version string. If no major version is present, it uses the version name instead. Additionally, it sets the myNewBuildNumber and myNewVersionNumber variables with the latest build and latest version of the myNewVersion instance.
327	This method takes in a Map of type <String,String> as a parameter and returns another Map of type <String,String> which contains files from the original Map that have a .obf, .zip, .zip-1, .zip-2, .zip-3 or .zip-4 extension.
623	This method adds a ScheduledTimer to the sTimers map. It first verifies that the timer is not null and then acquires a lock on the sLock object. It then checks that the sTimers map does not contain the timer's thread name and if not, adds the timer to the map and signals all waiting threads.
243	This method begins by setting up a CollapseUnaryTransformer, a parserModel, an inputPath, and a sentimentModelPath. The program then parses the specified input file and splits it into chunks. For each chunk, the tokens are extracted and a Tree is created using the LexicalizedParser. The Tree is then binarized, collapsed, and labels are set. The sentiment model is then used to forward propagate the Tree and labels are set to the predicted labels. Finally, the span labels are set and the modified Tree is output.
983	This method attempts to stop a service, specified by the Intent, as a user. It first checks if the service's Component and Package are set, and if they are not, it throws an IllegalArgumentException. Next, the Intent is prepared and ActivityManagerNative is called, then it checks if the response is negative, in which case a SecurityException is thrown. Finally, it returns the response.
802	This method creates an AndroidDistinguishedNameParser object using the X509Certificate object's subjectX500Principal. It then obtains a list of all the most specific first "cn" values from the object and creates a String array of these values. If the list is empty, the method returns null.
301	This method sets an ExecutorService for the application thread pool. The ExecutorService is set to the configBuilder and the method returns the same builder.
129	This method overrides the onTreeChanged method and checks for different events that occur in the tree. If the event is generic, or a code block, it will return and not process further. If it is not, it will check for the parent of the event and if it is a code block then it will return, otherwise it will increment the out of code block counter.
744	This method visits a string tuple expression and returns a tuple expression.
425	This method checks for the presence of a copyOrUpdate() method in a generated proxy class for a RealmObject. If the method is not found, it throws a RealmException. Otherwise, it invokes the method and returns the result as a RealmObject, using a HashMap with RealmObject as the key.
740	This method overrides the original generateCacheKey method and uses the DefaultCacheKeysFactory to create a collection key using the given id, persister, factory, and tenantIdentifier, specifically using the staticCreateCollectionKey method.
236	This method returns a BlockValSet with a BlockSingleValIterator. The BlockSingleValIterator contains a counter and a maximum value, docIdSearchableOffset, to iterate through. This iterator has methods such as skipTo, size, reset, next, nextIntVal, nextLongVal, nextFloatVal, nextDoubleVal, hasNext, getValueType, and currentDocId to access the ByteBuffers of data and return the long values associated with the columnName. The DataType is determined by the spec.
393	This method handles the set path request by reading the requested length, flags, and constants. It then reads the headers and updates the HeaderSet request and sets the connection ID. If the authentication response is not authorized, it handles the authentication challenge, validates the response code, and creates a header for the reply. Finally, it writes the reply data to the output stream.
953	This method overrides the performClick() method by checking if mWasActivatedOnDown or mNeedsDimming or isTouchExplorationEnabled() is false before returning the super.performClick() result.
209	This method sets the title of a toolbar with a given string, or if the string is empty it will set the title to the string found in the WordPress resource. If there is an existing toolbar, the title of the toolbar will be set to the given string.
695	This method is used to write data to a parcel object. It will write the values of mRequiresNetwork, mRequiresSatellite, mRequiresCell, mHasMonetaryCost, mSupportsAltitude, mSupportsSpeed, mSupportsBearing, mPowerRequirement, and mAccuracy as integers.
408	This method creates an instance of the specified class, and then binds the data from the provided 'map' parameter to the instance using either the GrailsDataBinder or the DataBinder class. If the 'map' parameter is a GrailsParameterMap or an HttpServletRequest, the GrailsDataBinder is used, and if it is a regular Map, the DataBinder is used.
494	This method performs the necessary steps to stop tethering. It first checks and sets the Connectivity instance and then sets the interface configuration to LinkAddress with a value of 0.0.0.0. The untethering is then initiated on the TetherInterfaceName.
774	This method implements an onRequest() event handler to manage requests in an atmosphere. It first sets the content type of the response, suspends the event, adds filters for cross-site scripting and cluster-based broadcasting, then broadcasts a message. Lastly, it schedules and delays a broadcast.
490	This method creates a Map of Strings and Integers from a Vocabulary object. It first checks the tokenTypeMapCache to see if the Map already exists. If it does not, it creates a new Map and adds the literal and symbolic names of each token type up to the maxTokenType, as well as the Token.EOF value. It then makes the Map unmodifiable and adds it to the tokenTypeMapCache.
529	This method checks if a transaction is waiting on a particular resource, and throws a DeadlockDetectedException if so. It begins by obtaining a list of transactions that are currently locking the resource, and then iterates over these transactions, pushing them onto a graph stack and calling the checkWaitOnRecursive method to check for any deadlocks. If no deadlocks are detected, the transaction is added to the waitingTxMap.
815	This method retrieves or creates a client ID specified by the input String parameter. Using a sqlSessionFactory, a dbLoggingCache is accessed, which tries to find the client's ID. If not found, a new client is inserted and the ID is retrieved. If the ID is not found, or an exception is thrown, then -1L is returned and an error message is printed including the client parameter.
772	This method builds a PomClassicDomainModel from a list of DomainModel objects and InterpolatorProperty objects. It first searches for the most specialized DomainModel and stores it as the 'child' model. It then creates a list of processors, including a PrerequisitesProcessor, and processes the models for inheritance. It then converts the models to Maven models, interpolates the model properties, and aligns the paths of the model properties with the child model's project directory. Finally, it returns a PomClassicDomainModel object with the model properties.
944	This method loads the meta service by retrieving the attribute from the servletConfig's servlet context. If the attribute is not found, the service file is read from the AtmosphereFramework class. Then, the action from the entry is applied to the class with the loaded class.
847	This method initializes a server by creating NettyServerBuilder and BindableService objects, creating a ProxyFactory and ServerInterceptor, and setting a superclass. Additionally, it checks if the configuration has the host and port specified and builds the server accordingly. Finally, it adds the interceptor to the bindable service before building the server.
96	This method sets up the data connection for the specified ApnContext. If the data setup is successful, the LinkProperties http proxy is set and the default data is notified. If the data setup fails, the waiting APNs permanent fail count is decremented, the next waiting APN is removed, and a delayed retry is started.
975	This method creates a Drawable object from an InputStream object, taking in a srcName parameter. It does this by calling the createFromResourceStream method, passing in null values for the first two parameters, and a null value for the fifth parameter.
973	This method stops the local only hotspot by setting the mLOHSCallbackProxy to null and using the mService.stopLocalOnlyHotspot() command with the mContext.getOpPackageName().
668	This method takes a string as an argument and converts it to lower case. If the string matches one of the four modes of ECB, CBC, CTR and GCM, it returns the corresponding block mode as an enum value. Otherwise, it throws an illegal argument exception.
340	This method adds a pipe upgrade recipe between two ItemPipeHolders, with an additional ingredient. It creates a ShapelessOreRecipe for the return recipe, as well as a ShapelessRecipes for the upgrade recipe, and additional recipes for each color in the ColourUtil.COLOURS list.
636	This method computes the bitmap size by taking into account the nine patch state and the target density. It adjusts the optical insets and padding accordingly, while also accounting for the height, width and outline of the bitmap.
762	This method checks whether a given key code is a mnemonic in a window. It first verifies that the key code is not the ALT key or 0, and then checks the container associated with the focus owner if the key code is a mnemonic.
869	This method uses the DisplayMetrics variable to gather information about the display and create a watermark onto the surface. It generates a text from the tokens provided, sets text size and typeface, and sets text color and shadow color using the WindowManagerService. It then creates a new surface for the watermark and shows it.
621	This method creates an animator object that transitions between two views with different sizes. It uses a ColorDrawable and a Drawable to represent the original and the target view, and animates between them using a circular reveal and a translation effect. The duration and interpolator of the animation can be set. The animation also includes a fading effect for each of the views.
573	This method performs a check to see if a given key code matches a confirm key, and if so, determines if the key is being released (KeyEvent.ACTION_UP). If not, the method checks for other key codes, such as left and right arrow keys, up and down arrow keys, page up and down keys, move home and end keys, and tab keys. Depending on the key code, the method will either perform a selection resurrection or scroll the page accordingly. If the key code is not matched, the method will pass the key code to the text filter and return the result.
557	This method compares the sizeIncrement to a range of powers of two (1, 2, 4, 8, etc.) and returns the power of two that it matches. If no match can be found, an IllegalStateException is thrown.
711	This method ensures that a column family exists in a table. It uses the HBaseAdmin interface to disable the table, add a new HColumnDescriptor with a GZ compression type, modify the table, and then enable the table. If the column family already exists, it checks the compression type, and if it is null or NONE, it sets it to GZ.
651	This method begins by logging a finer message about creating an extern file for exports. It then starts the externExports pass, instantiates the ExternExportsPass object, and processes it. Finally, the generated externs are stored in the externExports variable, and the pass is ended.
845	This method attempts to obtain an HBase Authentication Token from a ZooKeeper quorum using the HBase security user class. If successful, the token is stored for the job. If not successful, an error is logged.
584	This method attempts to silence the ringer by checking if the service is connected, and if so, calling the getTelecomService() method with the context of the OpPackageName. If any errors occur, a log error is generated.
749	This method is used to determine if a PostgreScriptObject is read-only or not. It checks if the sourceObject is an instance of PostgreProcedure, PostgreTrigger, or PostgreViewBase and returns false if it is, otherwise it returns true.
741	This method checks that the event loop is in the correct state and sets up a channel pipeline to fire channel read events. It then reads the file descriptor of a connection and creates an EpollSocketChannel with the socket file descriptor. If an error occurs while creating the channel, the channel read complete and exception caught events are fired. Finally, if auto read is disabled and there is no pending read, the epoll in is cleared.
729	This method takes in a name and color, splits the name into its words, and then takes the first letter of the first and second words to generate a default avatar. It checks to make sure the words are of a valid length before proceeding. It then builds a TextDrawable with the given font size, width, and height, and returns the round avatar.
109	This method processes a socket wrapper and socket status, and returns a SocketState. It first checks if the socket is already being processed, and if not, creates a Processor. It then initializes SSL and calls various methods depending on the processor's state. If the state is LONG or OPEN, the socket and processor are released. If the state is SENDFILE, the socket and processor are released without releasing the processor. If the state is UPGRADED, the longPoll method is called. Finally, if the processor is not an upgrade, the socket and processor are released.
743	This method installs a FileEditorManagerListener to the project. When a file is opened, it checks for the virtual file associated with the project and registers action shortcuts for the text editor. Additionally, it also adds a caret listener and a focus listener to the editor, with the focus listener setting the editor as the current editor. When the file is closed, it runs the UI update runnable.
440	This method is used to execute a GoCommandBeforeRunTask with a specific configuration. It creates a Semaphore and Ref<Boolean> object to keep track of the result and calls the GoSdkService to check if the specified module is a Go module. It then uses GoExecutor to execute the command with the given parameter string and working directory. Finally, it waits for the Semaphore and returns the result.
198	This method draws a frame onto a SurfaceTexture with a given width and height. It begins by retrieving the size of the SurfaceTexture and throwing an exception if the dimensions are 0. It then scales the dimensions according to the output size and creates a matrix for the transformation. The viewport is then set, followed by the program and texture binding. Finally, the uniform matrices are set and the frame is drawn.
756	This method iterates over a set of remote views and calculates the distance between the given position and each view. It then stores the furthest distance as well as the furthest distance from a non-requested view. If there is a non-requested view with a greater distance, that is returned, else the maximum distance is returned.
60	This method checks for a call to the receiver, and if found, multiplies a long and integer values and returns a long. If an exception is thrown, it returns the call from the superclass.
666	This method creates a BuildConfig, starting with a BuildConfigSpecBuilder and adding parameters such as a Git Source, an Output Image Tag, an Image Text and a Webhook Secret. After building the parameters, the method calls buildConfigBuilder to create a BuildConfig from the name, labels and parameters, and adds webhook triggers if a webhook secret is provided.
779	This method is used to execute an extract of job instances from the given cube, project and period. It first obtains the start and end times from the period and then calls the listJobInstances() method with the project, cube, start time and end time to obtain the list of job instances. Finally, it uses an ObjectMapper to write the job instances to a .json file in the export directory.
39	This method is used to handle service timeouts in the Android operating system. It first checks to see if the process has any executing services and a thread associated with it. If so, it determines the maximum time allowed for processing the service and looks for a service that has been running longer than that. If found, it records the timeout and creates an ANR message. Otherwise, it sends a message to the Activity Manager's handler to handle the timeout for the process in the future.
674	This method returns a list of strings of friendly attributes associated with the given friendly name. If the list is not null, it is returned as an unmodifiable list, otherwise an empty list is returned.
405	The TimingDecorator method takes a TruffleJUnitRunListener as a parameter. This method calls the super constructor of the TruffleJUnitRunListener.
359	This method sets the surface boundaries for a window state. It takes into account the window's requested width, height, flags, surface insets, and ShownFrame. It also checks whether the surface has moved and resized, and adjusts the surface accordingly. If any errors are encountered, it will attempt to reclaim some surface memory. Lastly, it will update the surface window crop.
221	This method creates a KillableColoredProcessHandler from a GeneralCommandLine object generated from a patchExecutor(createCommonExecutor()) call, and then attaches a ProcessTerminatedListener to the handler with a boolean parameter before returning it.
182	This method adds an ArmorMaterial enum to the application, providing a name, texture name, durability, reduction amounts, and enchantability.
120	This method iterates through an array of session IDs and attempts to invalidate each session. If a session is null, a warning is logged and the session is skipped. If the session is valid, it is invalidated and a log message is printed. The method returns the number of sessions affected.
552	This method takes in arguments from the command line, and uses the Searcher class to search for the matches of a given rule in an index directory. It prints out the results, and also the time taken for each rule and the total time taken for all rules.
798	This method overrides the existing removeLifecycleListener method and throws an UnsupportedOperationException when called with an Object as an argument.
848	This method initializes two bodies, bodyA and bodyB, with a given anchor and axis. The anchor and axis are converted to local points and vectors, respectively, using the body's local point and vector functions.
291	This method capitalizes the first character of a given string and returns the modified string. It checks the length of the string and if it is greater than 1 and the first character is already uppercase, the string is returned as it is. Otherwise, the first character is converted to uppercase and all the remaining characters are returned with the same case as it was previously.
500	This method enables the user to select a split distance for a track segment and set a color for it. A dialog is opened with a spinner, a checkbox and a color spinner. The spinner contains options to split the segment by 30, 60, 150, 300, 600, 1500, 3000 and 8000 meters or 15, 30, 60, 120, 150, 300, 600 and 900 seconds. The user can also set the visibility of the segment and its color. Finally, if the visibility is checked and a point to show is found, the map will be launched with the point centered.
622	: This method is declared as @Input and returns the maximum number of errors allowed as an integer. It can be called to access the maximum errors value.
58	This method is used to load word vectors from two files, a word file and a vector file. It first reads the lines in the word file, then checks the length of the line in the vector file and compares it to the numHid parameter, making sure they match. If the dimension of the line in the vector file is too large, the method deletes some of the dimensions to fit, while if it is too small, an exception is thrown. Finally, the word and vector are put into a hashmap and the number of words is printed out.
633	This method checks if a given coordinate (x, y) is within the area of the QsDensityContainer. To determine this, the x-coordinate is compared to the x-coordinate and width of the QsDensityContainer, while the y-coordinate is compared to the bottom-most notification bottom or the y-coordinate and height of the QsContainer.
839	This method intercepts a call and logs the method name. It then attaches either an API key or auth token to the header, depending on what is available, before forwarding the call.
26	This method registers various tags to the UI namespace, such as tags related to themes, disabling and enabling, label positioning, readonly, action and namespace references, CssInHtmlClassOrIdReferenceProvider, flush, executeResult, ignoreContextParams, enctype, method, target, validate, escape, emptyOption, multiple, scope, type, sortOrder, sortable, encode and escapeAmp.
662	This method starts a daemon process and locks the lifecycle. It then checks if the state coordinator is null, and if not, throws an exception. It then calls a connector that starts an incoming connection handler, which executes a command object, dispatches any daemon failures, and logs the command execution. A domain registry updater is also created which runs on start, start command, finish command, stop, and stop requested. Finally, a daemon state coordinator is created and started.
153	This method is used to send service arguments to a ServiceRecord. It starts by checking the size of the pendingStarts queue, and if it is empty, it returns. It then iterates through the pendingStarts queue, delivering the arguments, updating delivery counts, granting any necessary permissions, and bumping the service's execution count. It then calls the scheduleServiceArgs method to schedule the arguments for delivery.
854	This method overrides the write() method for the MultiValueMap, suppressing unchecked warnings. It will write form data if the content is not multipart, otherwise it will write multipart data.
833	This method parses a property getter or setter, and returns an AccessorKind value. It first parses a modifier list, and then checks if a GET_KEYWORD or SET_KEYWORD is used. If not, it rolls back the getterOrSetter marker and returns a null value. If one of the keywords is used, it advances, and then checks if a LPAR is used. If not, it checks for an ACCESSOR_FIRST_OR_PROPERTY_END token; if it finds one, it closes the declaration with a comment binder and returns the accessorKind. If not, it errors until it finds one and then parses the function body and closes the declaration with a comment binder, returning the accessorKind.
843	This method overrides and suppresses unchecked warnings, and returns a generic type of value from the CameraMetadataNative metadata object based on the key that is provided. Specifically, it returns faces from the metadata.
98	This method is a native code which is used to write native bytes for a ByteBuffer. It takes in parameters such as audio data, position in bytes, size in bytes, format, and a boolean to determine if it should be blocking.
945	This method converts legacy request metadata into a CaptureRequest format. It begins by retrieving the CameraCharacteristics and CaptureRequest objects, as well as the preview size and Camera.Parameters. It then uses the ParameterUtils.convertScalerCropRegion() method to convert the SCALER_CROP_REGION, and sets the zoom index if supported. It then converts the CONTROL_AE_ANTIBANDING_MODE to legacy mode, and converts the CONTROL_AE_REGIONS and CONTROL_AF_REGIONS to Camera.Area objects. It then sets the previewFpsRange and exposureCompensation, and sets the AE lock and flash mode if supported. Finally, it sets the AWB lock if supported.
94	This method formats a double amount using a DecimalFormat to create a String formed. If formed ends with a period, it is removed. The currency and currency plural are then retrieved using the getCurrency and getCurrencyPlural methods respectively and the formed amount is concatenated with either the currency or currency plural depending on the value of amount.
197	This method creates a PublishedResponseListener object with a RunningPersistentTask parameter.
604	This method configures an account after a successful sign in by setting mShouldSendTwoStepSMS to false and saving credentials in SmartLock. If isJetpackAuth() is true and there is an active activity, it sets the result to OK and finishes the activity. Lastly, it executes a FetchBlogListWPCom to complete the configuration.
921	This method returns a collection of strings that contain information URLs. It creates a new empty array list with a length of 0 and returns it.
852	This method checks for any logs that have not been flushed recently, and if the time since the last flush is greater than the flush interval, it will flush the logs.
191	This method returns a Boolean value of the optional configuration setting "kylin.query.convert-create-table-to-with", which has a default value of "false" by parsing the value.
541	This method provides a synchronized way to open an AstyanaxKeyColumnValueStore by checking if it already exists in openStores, and if it does not, it will ensure that the column family exists and create a new AstyanaxKeyColumnValueStore and store it in openStores.
373	This method is used to calculate the length of an extension. It begins by checking if the extension bit is set, and if it is not, then 0 is returned. Otherwise, the extension length index is calculated by adding the offset, the fixed header size, and the CSRC count multiplied by 4, then adding 2. Finally, the length of the extension is calculated by shifting the buffer value at the calculated index by 8 then ORing it with the buffer value at the index plus one, then multiplying the result by 4.
904	This method writes the given content to a source file in the given package with the specified filename. It logs the name of the file and uses the filer.createSourceFile method to create the file. If an error occurs while writing to the file, a warning message is logged. Finally, the writer is closed.
813	This method is used to process an exchange and execute any associated advice before and after the exchange is processed. If the exchange is transacted, it will be routed synchronously, otherwise it will be routed asynchronously through a UnitOfWork if applicable.
277	This method creates a new TokenSet object with the minimum and maximum shifts of both the input TokenSets. It then iterates through the newSet's words array, setting each element to the bitwise AND of the corresponding elements from the input TokenSets.
112	This method checks if a given declaration descriptor is deprecated and creates a warning annotation with the appropriate text attributes (warning or deprecated) to the corresponding element if it is.
613	This method sets the material of an Object3D with the materialName specified. The material is selected from the mMaterials list, and is composed of attributes such as diffuseTexture, bumpTexture, specularColor and specularCoefficient. Textures may be fetched from the resources, or from a file. The object's transparency may be set if the material's alpha value is less than 1f.
232	This method attempts to display the details of the specified session. The response headers are set to ensure that the page is not cached, the current session is set as a request attribute and the session detail page is included in the response.
253	This method checks to make sure the state is valid before continuing and then sends a keydown event and adds a timer if the key is not repeatable. If the key is repeatable, the last keycode is stored and the timer is cleared. If the key is not pressed, the corresponding keyup is sent and the method finishes.
335	This method compares two sources - referenceSource and source - using the HashedSequence, IssueTrackingBlocksRecognizer and RollingHashSequence classes to create a Multimap, map and HashOccurrence object. It then sorts the LinePair objects and maps them accordingly.
245	This method handles the update state of a BooleanState object. It sets the state of the object based on whether it is plugged in or in power save mode. Additionally, it creates a BatterySaverIcon and sets the state, label, content description, value, and expanded accessibility class name of the BooleanState object.
886	This method overrides the toXContent() method in order to provide a detailed summary of size and files. It includes fields such as total, reused, and recovered bytes, as well as percentages of the same. Additionally, it includes the total and reused file counts, along with the percentage of recovered files. If required, details of the files can also be provided. Lastly, total, source, and target throttle times can also be specified.
403	This method creates a Paint object and sets the stroke width, color, and path effect. The path effect is determined by the specified dash width and gap. Lastly, the paint object is invalidated.
184	This method sets the current location and checks for deviations from the route. If a deviation is detected, a route recalculation is triggered. The method also checks for accuracy of the current location and identifies if a U-turn is needed. If a U-turn is not needed, the voice router will update the status and announce if the user is back on route. Additionally, if a point to start has been set, a route recalculation will be triggered. Finally, the method will return either the updated location or the current location depending on the distance to the location projection.
473	This method provides a way for users to get the data network type for a given subscriber id. It does this by first trying to get an ITelephony object and then checking if it is not null before returning the data network type using the getOpPackageName() method. If there is an error or the object is null, the method will return NETWORK_TYPE_UNKNOWN.
313	This method reads an input stream and writes it to an output file, while monitoring progress and potentially removing a definer if requested. It uses a LineNumberReader to read the input and a BufferedWriter to write the output, in the default charset, and uses a NumberFormat to keep track of the number of lines written.
59	This method creates a CompositeELResolver object with a size of 0 and an ELResolver array of size 8.
323	This method gets the index of an array with a specified length, and increments the last user value by one. If the last user value is greater than or equal to the length of the array, the last user value is reset to zero.
183	This method emits a null check for a given ValueNode. It creates two BlockPlaceholderNodes, one for the true outcome and one for the false outcome. It then adds an IfNode to the current graph with the given ValueNode as an input, and the two BlockPlaceholderNodes as outputs. If GraalOptions.OmitHotExceptionStacktrace is true, a NullPointerException is created and passed to the handleException method, otherwise the RuntimeCall.CreateNullPointerException is invoked and passed to the handleException method.
6	This method iterates through the mResourceData array, counting the number of non-null entries that are not equal to the REFERENCE_NULL value. The total number of non-null entries is stored in the first index of the mIndices array.
344	This method parses meshes from a JSON file. It checks for the presence of meshes, then obtains the ID, attributes, and vertices associated with each mesh. It also obtains the parts associated with each mesh, and checks that each part has an ID and a type.
297	This method applies an algorithm which starts from a fixed node and evaluates the various node types. If the node is of type InvokeWithException, the method invokes the node and queues the successors. If the node is of type LoopBegin, the node states are put in a map and the loop begins. Similarly, if the node is of type LoopEnd, LoopMerge, FixedWithNext, End, Deoptimize, Return or Unwind, the method executes the appropriate functions. The successors of the ControlSplit node are queued and the nextQueuedNode is called.
271	This method allocates stack slots for the given number of slots and bitset objects. It checks that the frame size is not yet fixed, and then adds the slots multiplied by the word size to the spilling size. If objects are present, it allocates a new spill slot for each object, adds each object to the stack slots and sets the first slot as the result if an object is present or the new spill slot if not.
525	This method compares a given directory with a branch. ProgressManager is used to run the process synchronously and a List of Change objects is created. SVNWCaccess is used to open the anchor file and the URL is retrieved from the SVNEntry object. An SVNReporter is created and SVNDiffEditor is used to get the changes between the directory and the branch. Finally, the changes are displayed using AbstractVcsHelper.
412	This method closes the current block input stream and attempts to get a new block input stream for the given block ID. If the Tachyon storage type is set to promote, an attempt is made to promote the block. If the attempt to get a block input stream fails, an UnderStore file input stream is used instead. The current block should be cached if the Tachyon storage type is set to store and the block input stream is not a local block input stream.
11	This method calculates the selected index of a given array of model elements and a trimmed text. If the myModel instance is a Comparator, the index is set to 0. Otherwise, a pattern matcher is built from the transformed pattern of the text and a Comparator is created with three components: a comparison of the trim text to the model element names, a comparison of the matching degree of the pattern matcher to the model element, and a comparison of the use count of the statistics context to the model element. The index is then set to the best position among the model elements and if the selected position is a NON_PREFIX_SEPARATOR, the index is incremented by one.
908	This method creates an output file by taking a file name as an argument and creating a File object. The Files.createParentDirs(outputFile) method is then used to create the parent directories for the output file. The output file is then returned.
382	This method creates an array of indices which keeps track of the number of elements in the mResourceData array that are not null and do not equal RenderResources.REFERENCE_NULL. The first element of the array is the number of non-null elements in the array, and the subsequent elements are the indices of those elements.
543	This method creates a range of dates from the specified start month, start day, end month, and end day. It sets the start date to midnight while setting the end date to 11:59:59.999. It then creates a Range object with the start date and end date and returns it.
314	This method overrides the existing DivideByOnConditionStep method and returns a DivideByOnConditionStep object given an existing Select object.
428	This method begins a restore session and checks for available restore sets with a given token. If the token matches a restore set, it is scheduled for restoration. If not, a list of available sets is printed. The observer waits for completion before ending the restore session.
618	This method creates a BufferedImageMonochromeBitmapSource, which is an image that has a black point of 0x7F. The source height and width are determined by the image's height and width, respectively. The left, top, width, and height of the image are set by the given left, top, right, and bottom parameters. If these parameters are not valid, an IllegalArgumentException is thrown.
44	This method retrieves the phone type from a property associated with a certain phone id. If the property is not set or empty, the method uses a default value to get the phone type from the network type associated with the phone id.
325	This method checks if the GnssCallback is not null and if it is not null, it sends a message with the GPS_EVENT_STOPPED code to the mGnssHandler.
258	This method reads a class descriptor from the input stream. If the class descriptor type is CompactObjectOutputStream.TYPE_FAT_DESCRIPTOR, then the superclass's readClassDescriptor method is called. If the class descriptor type is CompactObjectOutputStream.TYPE_THIN_DESCRIPTOR, then the class name is read from the input stream and the class is resolved using the classResolver. The resolved class is then used to look up the ObjectStreamClass. If the class descriptor type is neither of these then a StreamCorruptedException is thrown.
493	This method checks if the received energy is coming from a valid source by using the ForgeDirection and IRedstoneEngine classes. If energy is coming from an allowed source, the battery will receive the energy with a maximum of maxReceive and lastRequestedEnergy. If it is not an allowed source, no energy will be received.
374	This method creates a RowVisitor which is initialized with the cell index and list of CellChanges in order to identify the best ReconCandidate for the given cell. If a ReconCandidate is found and the cell is not null, a CellChange is added to the list of CellChanges.
963	This method provides a public static Factory 'enhance' that takes a Class, an array of Classes, Callbacks, a ClassLoader, and a CallbackFilter as parameters and returns an enhanced Helper object.
914	This method, stripAliases, takes a given string as an argument and uses a pattern defined by the ALIAS_PATTERN to modify the string. The end result is that the modified string is returned.
823	This method enables tethering for the given interface by retrieving the Network Management Service from the ServiceManager and the ConnectivityManager from the context. It then checks if the given interface exists and creates a new tethering address if it does. It then sets the mask, address, and flags of the interface and calls the tether method. If successful, it returns the address.
505	This method creates a Queryable object of Grouping objects, using a source Queryable object and a FunctionExpression for keySelector. It also uses an EqualityComparer for the TKey type.
566	This method reads in an XML document and builds a JobStatus object which contains information about any jobs that are associated with it. It first builds a JobInfo.Builder object from the XML document and parses the attributes of the XML document for the job's UID, priority, and sourceUserId. It then continues to build constraints from the XML document and calculates the execution times from the XML document. It may also build a backoff policy from the XML document. Finally, it reads in any extras and creates a JobStatus object with all of the gathered information.
957	This method checks if a given TypeDescription is an interface, does not extend other interfaces, is public, has one abstract method, and returns an Object-type with a single argument of type Object[]. If any of these conditions are not met, an IllegalArgumentException is thrown.
654	This method checks the visibility of the object and if it is visible or the given visibility is not visible, it calls the onVisibilityAggregated method and returns the boolean value of the object's visibility and the given visibility.
733	This method provides a static <T extends Number>Field<T> shr(T value1,Number value2) function that is supported by CUBRID, FIREBIRD, H2, HSQLDB, MARIADB, MYSQL, POSTGRES and SQLITE. This function takes one value of type T and one value of type Number and returns a Field<T> object.
770	This method allows for the editing of settings for a specified project, inspection profile, and consumer action. It creates an errors configurable based on whether or not a different profile can be chosen. The settings utility is then used to edit the configurable and select the profile. Finally, the configurable action is accepted.
558	This method reads data from a NioDatagramChannel and stores it in a ByteBuffer. It uses a ReceiveBufferSizePredictor to calculate the size of the ByteBuffer and a ChannelBufferFactory to determine the ByteBuffer order. If data is received, it is flipped and the size is stored in the predictor. If the read fails, the key is closed.
306	This method collects partitions for a given cache name by utilizing the GridCacheAdapter and CacheConfiguration, and CacheMode. It checks if the cache is partitioned, and then collects the local partitions using GridDhtPartitionTopology. It obtains the primary and backup partitions and adds them to the VisorCachePartitions object.
56	This method checks a boolean value and sets it to false if it is true. Then, the method clears the store and logs that the store has been stopped.
